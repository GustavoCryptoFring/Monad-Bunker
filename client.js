console.log('üéÆ Bunker Game Client Loading...');

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
    playerId: null,
    playerName: '',
    isHost: false,
    players: [],
    gamePhase: 'login',
    serverGameState: 'lobby',
    currentRound: 1,
    timeLeft: 0,
    votingResults: {},
    myVote: null,
    timer: null,
    maxPlayers: 12,
    currentTurnPlayer: null,
    // –ù–û–í–´–ï –ü–û–õ–Ø –î–õ–Ø –û–ü–†–ê–í–î–ê–ù–ò–ô
    currentJustifyingPlayer: null,
    canChangeVote: {},
    hasChangedVote: false
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO
const socket = io();

// === SOCKET –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
socket.on('connect', function() {
    console.log('‚úÖ Connected to server:', socket.id);
    gameState.playerId = socket.id;
    updatePlayerCount();
});

socket.on('disconnect', function() {
    console.log('‚ùå Disconnected from server');
    showNotification('–û—Ç–∫–ª—é—á–µ–Ω–∏–µ', '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ');
});

socket.on('room-state', function(data) {
    console.log('üìä Room state received:', data);
    updateGameState(data);
});

socket.on('join-confirmed', function(data) {
    console.log('‚úÖ Join confirmed:', data);
    gameState.playerId = data.playerId;
    gameState.playerName = data.playerName;
    gameState.isHost = data.isHost;
    gameState.maxPlayers = data.maxPlayers || 12;
    showLobbyScreen();
});

socket.on('player-joined', function(data) {
    console.log('üëã Player joined:', data);
    gameState.players = data.players;
    if (data.maxPlayers) {
        gameState.maxPlayers = data.maxPlayers;
    }
    updatePlayersDisplay();
    updatePlayerCount();
});

socket.on('max-players-changed', function(data) {
    console.log('üîß Max players changed:', data);
    gameState.maxPlayers = data.maxPlayers;
    gameState.players = data.players;
    updatePlayersDisplay();
    updateMaxPlayersSelector();
});

socket.on('player-left', function(data) {
    console.log('üëã Player left:', data);
    gameState.players = data.players;
    gameState.serverGameState = data.gameState;
    updatePlayersDisplay();
    updatePlayerCount();
    
    const me = gameState.players.find(p => p.id === gameState.playerId);
    if (me) {
        gameState.isHost = me.isHost;
        updateHostControls();
    }
});

socket.on('game-started', function(data) {
    console.log('üöÄ Game started:', data);
    gameState.players = data.players;
    gameState.serverGameState = data.gameState;
    gameState.gamePhase = data.gamePhase;
    gameState.currentRound = data.currentRound;
    gameState.timeLeft = data.timeLeft;
    showGameScreen();
});

// –ù–û–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
socket.on('player-turn-started', function(data) {
    console.log('üéØ Player turn started:', data);
    gameState.gamePhase = data.gamePhase;
    gameState.currentTurnPlayer = data.currentTurnPlayer;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    updateGameDisplay();
});

socket.on('phase-changed', function(data) {
    console.log('üîÑ Phase changed:', data);
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.currentTurnPlayer = data.currentTurnPlayer || null; // –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º currentTurnPlayer
    updateGameDisplay();
});

socket.on('timer-update', function(data) {
    gameState.timeLeft = data.timeLeft;
    gameState.currentTurnPlayer = data.currentTurnPlayer;
    updateTimerDisplay();
});

socket.on('vote-update', function(data) {
    console.log('üó≥Ô∏è Vote update:', data);
    gameState.players = data.players;
    gameState.votingResults = data.votingResults;
    updatePlayersGrid();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    if (data.votedCount !== undefined && data.totalPlayers !== undefined) {
        const voteProgress = document.getElementById('voteProgress');
        if (voteProgress) {
            voteProgress.textContent = `–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: ${data.votedCount}/${data.totalPlayers}`;
        }
    }
});

socket.on('characteristic-revealed', function(data) {
    console.log('üîç Characteristic revealed:', data);
    gameState.players = data.players;
    updatePlayersGrid();
    
    // –£–ë–†–ê–ù–û: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    // showNotification('–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∞', 
    //     `${playerName} —Ä–∞—Å–∫—Ä—ã–ª${isMe ? '–∏' : ''}: ${translateCharacteristic(data.characteristic)} - ${data.value}`);
});

socket.on('round-results', function(data) {
    console.log('üìä Round results:', data);
    gameState.players = data.players;
    
    if (data.eliminatedPlayer) {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        const eliminatedPlayer = gameState.players.find(p => p.name === data.eliminatedPlayer);
        const isMe = eliminatedPlayer && eliminatedPlayer.id === gameState.playerId;
        const displayName = isMe ? '–í—ã' : data.eliminatedPlayer;
        
        showNotification('–ò–≥—Ä–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω', `${displayName} ${isMe ? '–±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã' : '–±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω'} –∏–∑ –±—É–Ω–∫–µ—Ä–∞!`);
    } else {
        showNotification('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è', '–ù–∏–∫—Ç–æ –Ω–µ –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ');
    }
    
    updatePlayersGrid();
});

socket.on('new-round', function(data) {
    console.log('üîÑ New round:', data);
    gameState.currentRound = data.currentRound;
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.myVote = null;
    gameState.currentTurnPlayer = null;
    updateGameDisplay();
});

socket.on('game-ended', function(data) {
    console.log('üèÅ Game ended:', data);
    gameState.players = data.players;
    showResultsScreen(data.winners);
});

socket.on('game-reset', function(data) {
    console.log('üîÑ Game reset:', data);
    gameState.players = data.players;
    gameState.serverGameState = data.gameState;
    gameState.gamePhase = 'lobby';
    gameState.currentRound = 1;
    gameState.myVote = null;
    gameState.currentTurnPlayer = null;
    showLobbyScreen();
});

socket.on('error', function(error) {
    console.error('‚ùå Server error:', error);
    showNotification('–û—à–∏–±–∫–∞', error);
});

// === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
function joinGame() {
    const playerName = document.getElementById('playerNameInput').value.trim();
    
    if (!playerName) {
        showNotification('–û—à–∏–±–∫–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
        return;
    }
    
    if (playerName.length < 2) {
        showNotification('–û—à–∏–±–∫–∞', '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
        return;
    }
    
    if (!socket.connected) {
        showNotification('–û—à–∏–±–∫–∞', '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        return;
    }
    
    console.log('üéØ Joining game as:', playerName);
    socket.emit('join-game', { playerName });
}

function startGame() {
    if (!gameState.isHost) {
        showNotification('–û—à–∏–±–∫–∞', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É');
        return;
    }
    
    socket.emit('start-game');
}

// –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞
function startRound() {
    if (!gameState.isHost) {
        showNotification('–û—à–∏–±–∫–∞', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥');
        return;
    }
    
    if (gameState.gamePhase !== 'preparation') {
        showNotification('–û—à–∏–±–∫–∞', '–†–∞—É–Ω–¥ —É–∂–µ –Ω–∞—á–∞–ª—Å—è');
        return;
    }
    
    console.log('üöÄ Starting round...');
    socket.emit('start-round');
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–≤
function showLobbyScreen() {
    document.getElementById('loginScreen').style.display = 'none';
    document.getElementById('lobbyScreen').style.display = 'block';
    document.getElementById('gameScreen').style.display = 'none';
    document.getElementById('resultsScreen').style.display = 'none';
    
    updatePlayersDisplay();
    updatePlayerCount();
    updateHostControls();
}

function showGameScreen() {
    document.getElementById('loginScreen').style.display = 'none';
    document.getElementById('lobbyScreen').style.display = 'none';
    document.getElementById('gameScreen').style.display = 'block';
    document.getElementById('resultsScreen').style.display = 'none';
    
    updateGameDisplay();
    updatePlayersGrid();
}

function showResultsScreen(winners) {
    document.getElementById('loginScreen').style.display = 'none';
    document.getElementById('lobbyScreen').style.display = 'none';
    document.getElementById('gameScreen').style.display = 'none';
    document.getElementById('resultsScreen').style.display = 'block';
    
    const winnersList = document.getElementById('winnersList');
    winnersList.innerHTML = '';
    
    winners.forEach(winner => {
        const li = document.createElement('li');
        const isMe = winner.id === gameState.playerId;
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        li.textContent = isMe ? `${winner.name} (–í–´)` : winner.name;
        li.className = 'host';
        winnersList.appendChild(li);
    });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function updateGameState(data) {
    gameState.players = data.players || [];
    gameState.serverGameState = data.gameState;
    gameState.gamePhase = data.gamePhase;
    gameState.currentRound = data.currentRound || 1;
    gameState.timeLeft = data.timeLeft || 0;
    gameState.currentTurnPlayer = data.currentTurnPlayer;
    
    updatePlayerCount();
    
    if (gameState.players.length > 0) {
        const me = gameState.players.find(p => p.id === gameState.playerId);
        if (me) {
            gameState.isHost = me.isHost;
        }
    }
}

function updatePlayersDisplay() {
    const playersList = document.getElementById('playersList');
    const currentPlayersCount = document.getElementById('currentPlayersCount');
    const maxPlayersCount = document.getElementById('maxPlayersCount');
    
    if (playersList) {
        playersList.innerHTML = '';
        
        gameState.players.forEach(player => {
            const li = document.createElement('li');
            const isMe = player.id === gameState.playerId;
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è
            li.textContent = `${player.name}${player.isHost ? ' üëë' : ''}`;
            li.className = player.isHost ? 'host' : '';
            playersList.appendChild(li);
        });
    }
    
    if (currentPlayersCount) {
        currentPlayersCount.textContent = gameState.players.length;
    }
    
    if (maxPlayersCount) {
        maxPlayersCount.textContent = gameState.maxPlayers || 12;
    }
    
    updateHostControls();
}

function updatePlayerCount() {
    const playerCountElement = document.getElementById('playerCount');
    if (playerCountElement) {
        playerCountElement.textContent = gameState.players.length;
    }
}

function updateHostControls() {
    const startBtn = document.getElementById('startGameBtn');
    const waitingInfo = document.getElementById('waitingInfo');
    const maxPlayersSelector = document.getElementById('maxPlayersSelector');
    
    if (gameState.isHost) {
        if (startBtn) {
            startBtn.style.display = 'block';
            startBtn.disabled = gameState.players.length < 2;
            startBtn.textContent = gameState.players.length < 2 ? 
                '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É (–º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞)' : 
                `–ù–∞—á–∞—Ç—å –∏–≥—Ä—É (${gameState.players.length}/${gameState.maxPlayers || 12})`;
        }
        if (waitingInfo) {
            waitingInfo.style.display = 'none';
        }
        if (maxPlayersSelector) {
            maxPlayersSelector.style.display = 'block';
        }
    } else {
        if (startBtn) {
            startBtn.style.display = 'none';
        }
        if (waitingInfo) {
            waitingInfo.style.display = 'block';
        }
        if (maxPlayersSelector) {
            maxPlayersSelector.style.display = 'none';
        }
    }
}

function changeMaxPlayers() {
    const selector = document.getElementById('maxPlayersSelect');
    const maxPlayers = parseInt(selector.value);
    
    console.log('üîß Changing max players to:', maxPlayers);
    socket.emit('change-max-players', { maxPlayers });
}

function updateMaxPlayersSelector() {
    const selector = document.getElementById('maxPlayersSelect');
    if (selector && gameState.maxPlayers) {
        selector.value = gameState.maxPlayers;
    }
}

function updateGameDisplay() {
    const currentRoundElement = document.getElementById('currentRound');
    const gameStatusElement = document.getElementById('gameStatus');
    const phaseDisplayElement = document.getElementById('phaseDisplay');
    const gameActionsElement = document.getElementById('gameActions');
    
    if (currentRoundElement) {
        currentRoundElement.textContent = gameState.currentRound;
    }
    
    if (gameStatusElement) {
        gameStatusElement.textContent = getGameStatusText();
    }
    
    if (phaseDisplayElement) {
        phaseDisplayElement.textContent = getPhaseDisplayText();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã
    if (gameActionsElement) {
        updateGameActions();
    }
    
    updateTimerDisplay();
    updatePlayersGrid();
}

function getGameStatusText() {
    switch (gameState.gamePhase) {
        case 'preparation': 
            return '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞—É–Ω–¥—É';
        case 'revelation': 
            const currentPlayer = gameState.players.find(p => p.id === gameState.currentTurnPlayer);
            if (currentPlayer) {
                const isMyTurn = currentPlayer.id === gameState.playerId;
                return `–•–æ–¥ –∏–≥—Ä–æ–∫–∞: ${isMyTurn ? '–í–∞—à —Ö–æ–¥' : currentPlayer.name}`;
            }
            return '–†–∞—Å–∫—Ä—ã—Ç–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫';
        case 'discussion': 
            return '–§–∞–∑–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è';
        case 'voting': 
            return '–§–∞–∑–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è';
        case 'justification':
            const justifyingPlayer = gameState.players.find(p => p.id === gameState.currentJustifyingPlayer);
            if (justifyingPlayer) {
                const isMyJustification = justifyingPlayer.id === gameState.playerId;
                return `–û–ø—Ä–∞–≤–¥–∞–Ω–∏–µ: ${isMyJustification ? '–í–∞—à —á–µ—Ä–µ–¥' : justifyingPlayer.name}`;
            }
            return '–§–∞–∑–∞ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è';
        case 'results': 
            return '–ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ —Ä–∞—É–Ω–¥–∞';
        case 'finished': 
            return '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
        default: 
            return '–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...';
    }
}

function getPhaseDisplayText() {
    switch (gameState.gamePhase) {
        case 'preparation': return '–ü–û–î–ì–û–¢–û–í–ö–ê';
        case 'revelation': return '–†–ê–°–ö–†–´–¢–ò–ï';
        case 'discussion': return '–û–ë–°–£–ñ–î–ï–ù–ò–ï';
        case 'voting': return '–ì–û–õ–û–°–û–í–ê–ù–ò–ï';
        case 'justification': return '–û–ü–†–ê–í–î–ê–ù–ò–ï';
        case 'results': return '–†–ï–ó–£–õ–¨–¢–ê–¢–´';
        default: return '–û–ñ–ò–î–ê–ù–ò–ï';
    }
}

function updateGameActions() {
    const gameActionsElement = document.getElementById('gameActions');
    const roundActionsElement = document.getElementById('roundActions');
    
    // –£–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
    if (roundActionsElement) {
        if (gameState.gamePhase === 'preparation' && gameState.isHost) {
            // –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥" –≤ —Ñ–∞–∑–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ö–æ—Å—Ç–∞
            roundActionsElement.innerHTML = `
                <button id="startRoundBtn" class="start-round-btn" onclick="startRound()">
                    üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥
                </button>
            `;
            roundActionsElement.style.display = 'block';
        } else if (gameState.gamePhase === 'discussion') {
            // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ" –¥–ª—è –í–°–ï–• –∏–≥—Ä–æ–∫–æ–≤
            const skipVotes = gameState.skipDiscussionVotes || 0;
            const requiredVotes = 2;
            const hasVotedToSkip = gameState.mySkipVote || false;
            
            roundActionsElement.innerHTML = `
                <button id="skipDiscussionBtn" class="start-round-btn ${hasVotedToSkip ? 'voted-skip' : ''}" 
                        onclick="voteToSkipDiscussion()" ${hasVotedToSkip ? 'disabled' : ''}>
                    ${hasVotedToSkip ? '‚úÖ –ì–æ–ª–æ—Å –ø–æ–¥–∞–Ω' : '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ'}
                </button>
                <div class="skip-votes-info">
                    –ì–æ–ª–æ—Å–æ–≤ –∑–∞ –ø—Ä–æ–ø—É—Å–∫: ${skipVotes}/${requiredVotes}
                </div>
            `;
            roundActionsElement.style.display = 'block';
        } else if (gameState.gamePhase === 'justification') {
            // –ù–û–í–û–ï: –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–∞–∑—ã –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è
            const isMyJustification = gameState.currentJustifyingPlayer === gameState.playerId;
            
            if (isMyJustification) {
                roundActionsElement.innerHTML = `
                    <div class="justification-actions">
                        <button id="finishJustificationBtn" class="start-round-btn" onclick="finishJustification()">
                            ‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–µ
                        </button>
                        <button id="surrenderBtn" class="surrender-btn" onclick="surrender()">
                            üè≥Ô∏è –°–¥–∞—Ç—å—Å—è
                        </button>
                    </div>
                `;
            } else {
                roundActionsElement.innerHTML = `
                    <div class="justification-info">
                        <p>üé§ –ò–≥—Ä–æ–∫ –æ–ø—Ä–∞–≤–¥—ã–≤–∞–µ—Ç—Å—è...</p>
                    </div>
                `;
            }
            roundActionsElement.style.display = 'block';
        } else {
            roundActionsElement.style.display = 'none';
        }
    }
    
    // –ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    if (gameState.gamePhase === 'voting') {
        const alivePlayers = gameState.players.filter(p => p.isAlive);
        const votedPlayers = alivePlayers.filter(p => p.hasVoted);
        const canChange = gameState.canChangeVote[gameState.playerId] && !gameState.hasChangedVote;
        
        gameActionsElement.innerHTML = `
            <div class="vote-progress">
                <span id="voteProgress">–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: ${votedPlayers.length}/${alivePlayers.length}</span>
                ${canChange ? '<div class="change-vote-info">üí° –í—ã –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –≥–æ–ª–æ—Å</div>' : ''}
            </div>
        `;
    } else {
        gameActionsElement.innerHTML = '';
    }
}

// –ù–û–í–´–ï —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–π
function finishJustification() {
    if (gameState.gamePhase !== 'justification') {
        showNotification('–û—à–∏–±–∫–∞', '–°–µ–π—á–∞—Å –Ω–µ —Ñ–∞–∑–∞ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è');
        return;
    }
    
    if (gameState.currentJustifyingPlayer !== gameState.playerId) {
        showNotification('–û—à–∏–±–∫–∞', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à–µ –≤—Ä–µ–º—è –¥–ª—è –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è');
        return;
    }
    
    console.log('‚úÖ Finishing justification...');
    socket.emit('finish-justification');
}

function surrender() {
    if (gameState.gamePhase !== 'justification') {
        showNotification('–û—à–∏–±–∫–∞', '–°–µ–π—á–∞—Å –Ω–µ —Ñ–∞–∑–∞ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è');
        return;
    }
    
    if (gameState.currentJustifyingPlayer !== gameState.playerId) {
        showNotification('–û—à–∏–±–∫–∞', '–¢–æ–ª—å–∫–æ –æ–ø—Ä–∞–≤–¥—ã–≤–∞—é—â–∏–π—Å—è –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç —Å–¥–∞—Ç—å—Å—è');
        return;
    }
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–∞—á–∏
    if (confirm('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å—Å—è –∏ –ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É?')) {
        console.log('üè≥Ô∏è Surrendering...');
        socket.emit('surrender');
    }
}

// –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–º–µ–Ω—ã –≥–æ–ª–æ—Å–∞
function voteForPlayer(playerId) {
    if (gameState.gamePhase !== 'voting') {
        showNotification('–û—à–∏–±–∫–∞', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
        return;
    }
    
    const me = gameState.players.find(p => p.id === gameState.playerId);
    if (!me || !me.isAlive) {
        showNotification('–û—à–∏–±–∫–∞', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
        return;
    }
    
    // –ï—Å–ª–∏ —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã –≥–æ–ª–æ—Å–∞
    if (me.hasVoted) {
        const canChange = gameState.canChangeVote[gameState.playerId] && !gameState.hasChangedVote;
        
        if (!canChange) {
            if (gameState.hasChangedVote) {
                showNotification('–û—à–∏–±–∫–∞', '–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã –≥–æ–ª–æ—Å–∞!');
            } else {
                showNotification('–û—à–∏–±–∫–∞', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!');
            }
            return;
        }
        
        // –°–º–µ–Ω–∞ –≥–æ–ª–æ—Å–∞
        if (me.votedFor === playerId) {
            showNotification('–û—à–∏–±–∫–∞', '–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        console.log('üîÑ Changing vote to:', playerId);
        socket.emit('change-vote', { targetId: playerId });
        gameState.hasChangedVote = true;
    } else {
        // –ü–µ—Ä–≤–∏—á–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        console.log('üó≥Ô∏è Voting for:', playerId);
        gameState.myVote = playerId;
        socket.emit('vote-player', { targetId: playerId });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    updatePlayersGrid();
}

// –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞
function createPlayerCard(player) {
    const card = document.createElement('div');
    const isCurrentPlayer = player.id === gameState.playerId;
    const isCurrentTurn = player.id === gameState.currentTurnPlayer;
    const isJustifying = player.id === gameState.currentJustifyingPlayer;
    
    card.className = `player-card ${player.isAlive ? '' : 'eliminated'} ${isCurrentPlayer ? 'current-player' : ''} ${isCurrentTurn ? 'current-turn' : ''} ${isJustifying ? 'justifying' : ''}`;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ—Ä—è–¥–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å –¥–≤—É–º—è —Ñ–∞–∫—Ç–∞–º–∏ –≤–Ω–∏–∑—É
    const characteristicOrder = ['profession', 'health', 'hobby', 'phobia', 'baggage', 'fact1', 'fact2'];
    
    card.innerHTML = `
        <div class="player-header">
            <div class="player-info">
                <div class="player-avatar-container">
                    <div class="player-avatar ${player.isAlive ? '' : 'eliminated-avatar'}">
                        ${player.name.charAt(0).toUpperCase()}
                    </div>
                </div>
                <div>
                    <div class="player-name ${player.isAlive ? '' : 'eliminated-name'}">
                        ${player.name}${player.isHost ? ' üëë' : ''}
                    </div>
                    ${isCurrentPlayer ? '<div class="player-status current">–í–´</div>' : ''}
                    ${isCurrentTurn ? '<div class="player-status turn">–í–∞—à —Ö–æ–¥!</div>' : ''}
                    ${isJustifying ? '<div class="player-status justifying">üé§ –û–ø—Ä–∞–≤–¥—ã–≤–∞–µ—Ç—Å—è</div>' : ''}
                </div>
            </div>
        </div>
        
        <div class="characteristics">
            ${characteristicOrder.map(key => {
                if (!player.characteristics || !player.characteristics[key]) return '';
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ª–æ–≥–∏–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                const isRevealed = player.revealedCharacteristics && player.revealedCharacteristics.includes(key);
                const isOwnCard = isCurrentPlayer;
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –º–æ–∂–Ω–æ –∫–ª–∏–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–≤–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
                const canReveal = isCurrentPlayer && isCurrentTurn && !isRevealed && gameState.gamePhase === 'revelation';
                
                return `<div class="characteristic ${isRevealed ? 'revealed' : (isOwnCard ? 'own-hidden' : 'hidden')} ${canReveal ? 'clickable' : ''}" 
                    ${canReveal ? `onclick="confirmRevealCharacteristic('${key}')"` : ''}>
                    <span class="characteristic-name">${translateCharacteristic(key)}:</span>
                    <span class="characteristic-value ${isOwnCard && !isRevealed ? 'own-characteristic' : ''}">
                        ${isRevealed ? player.characteristics[key] : (isOwnCard ? player.characteristics[key] : '???')}
                    </span>
                </div>`;
            }).join('')}
        </div>
        
        <div class="player-actions">
            ${gameState.gamePhase === 'voting' && !isCurrentPlayer && player.isAlive ? 
                getVotingButtons(player) : ''
            }
        </div>
    `;
    
    return card;
}

// –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function getVotingButtons(player) {
    const me = gameState.players.find(p => p.id === gameState.playerId);
    if (!me) return '';
    
    const hasVoted = me.hasVoted;
    const votedForThis = me.votedFor === player.id;
    const canChange = gameState.canChangeVote[gameState.playerId] && !gameState.hasChangedVote;
    
    let buttonText = 'üìã –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å';
    let buttonClass = 'vote-player-btn';
    let disabled = false;
    
    if (hasVoted) {
        if (votedForThis) {
            buttonText = '‚úÖ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–æ';
            buttonClass += ' voted';
            disabled = !canChange;
        } else if (canChange) {
            buttonText = 'üîÑ –°–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å';
            buttonClass += ' change-vote';
        } else {
            buttonText = 'üìã –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å';
            disabled = true;
        }
    }
    
    return `
        <div class="vote-section">
            <button class="${buttonClass}" 
                    onclick="voteForPlayer('${player.id}')" 
                    ${disabled ? 'disabled' : ''}>
                ${buttonText}
            </button>
            <div class="voters-list">
                –ì–æ–ª–æ—Å–æ–≤: ${player.votes || 0}
            </div>
        </div>
    `;
}

// –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
function confirmRevealCharacteristic(characteristic) {
    const player = gameState.players.find(p => p.id === gameState.playerId);
    if (!player || !player.characteristics) return;
    
    // –î–û–ë–ê–í–õ–ï–ù–û: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (gameState.gamePhase !== 'revelation') {
        console.log('‚ùå Not revelation phase');
        return;
    }
    
    if (gameState.currentTurnPlayer !== gameState.playerId) {
        console.log('‚ùå Not my turn');
        return;
    }
    
    if (player.revealedCharacteristics && player.revealedCharacteristics.includes(characteristic)) {
        console.log('‚ùå Already revealed');
        return;
    }
    
    const characteristicName = translateCharacteristic(characteristic);
    const characteristicValue = player.characteristics[characteristic];
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    document.getElementById('confirmCharacteristicName').textContent = characteristicName;
    document.getElementById('confirmCharacteristicValue').textContent = characteristicValue;
    document.getElementById('confirmRevealModal').style.display = 'flex';
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
    window.characteristicToReveal = characteristic;
}

function confirmReveal() {
    if (window.characteristicToReveal) {
        console.log('üîç Revealing characteristic:', window.characteristicToReveal);
        socket.emit('reveal-characteristic', { characteristic: window.characteristicToReveal });
        document.getElementById('confirmRevealModal').style.display = 'none';
        window.characteristicToReveal = null;
    }
}

function cancelReveal() {
    document.getElementById('confirmRevealModal').style.display = 'none';
    window.characteristicToReveal = null;
}

// –§—É–Ω–∫—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –∏–≥—Ä–æ–∫–∞
function voteForPlayer(playerId) {
    if (gameState.gamePhase !== 'voting') {
        showNotification('–û—à–∏–±–∫–∞', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
        return;
    }
    
    if (gameState.myVote) {
        showNotification('–û—à–∏–±–∫–∞', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!');
        return;
    }
    
    gameState.myVote = playerId;
    socket.emit('vote-player', { targetId: playerId });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    updatePlayersGrid();
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
function translateCharacteristic(key) {
    const translations = {
        'profession': '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è',
        'health': '–ó–¥–æ—Ä–æ–≤—å–µ',
        'hobby': '–•–æ–±–±–∏',
        'phobia': '–§–æ–±–∏—è',
        'baggage': '–ë–∞–≥–∞–∂',
        'fact1': '–§–∞–∫—Ç 1',
        'fact2': '–§–∞–∫—Ç 2'
    };
    
    return translations[key] || key;
}

// –î–û–ë–ê–í–õ–Ø–ï–ú –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
document.addEventListener('DOMContentLoaded', function() {
    const playerNameInput = document.getElementById('playerNameInput');
    if (playerNameInput) {
        playerNameInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                joinGame();
            }
        });
    }
});

console.log('üéÆ Bunker Game Client Loaded');

// –ù–û–í–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
socket.on('skip-discussion-vote-update', function(data) {
    console.log('‚è≠Ô∏è Skip discussion vote update:', data);
    gameState.skipDiscussionVotes = data.votes;
    gameState.mySkipVote = data.hasVoted;
    updateGameActions();
});

socket.on('discussion-skipped', function(data) {
    console.log('‚è≠Ô∏è Discussion skipped:', data);
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.skipDiscussionVotes = 0;
    gameState.mySkipVote = false;
    updateGameDisplay();
    showNotification('–û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ', '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—è');
});

// –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∞–∑—ã
socket.on('phase-changed', function(data) {
    console.log('üîÑ Phase changed:', data);
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.currentTurnPlayer = data.currentTurnPlayer || null;
    
    // –î–û–ë–ê–í–õ–ï–ù–û: —Å–±—Ä–æ—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∞–∑—ã
    if (data.gamePhase !== 'discussion') {
        gameState.skipDiscussionVotes = 0;
        gameState.mySkipVote = false;
    }
    
    // –î–û–ë–ê–í–õ–ï–ù–û: —Å–±—Ä–æ—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∞–∑—ã
    if (data.gamePhase !== 'voting') {
        gameState.myVote = null;
    }
    
    updateGameDisplay();
});

// –ù–û–í–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∞–∑—ã –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–π
socket.on('justification-started', function(data) {
    console.log('‚öñÔ∏è Justification started:', data);
    gameState.gamePhase = 'justification';
    gameState.currentJustifyingPlayer = data.justifyingPlayer.id;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    updateGameDisplay();
    
    const isMyJustification = data.justifyingPlayer.id === gameState.playerId;
    const message = isMyJustification ? 
        '–í–∞—à–µ –≤—Ä–µ–º—è –¥–ª—è –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è! –£ –≤–∞—Å –µ—Å—Ç—å 2 –º–∏–Ω—É—Ç—ã.' : 
        `${data.justifyingPlayer.name} –æ–ø—Ä–∞–≤–¥—ã–≤–∞–µ—Ç—Å—è. –û—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏: ${data.remainingQueue}`;
    
    showNotification('–§–∞–∑–∞ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è', message);
});

socket.on('second-voting-started', function(data) {
    console.log('üó≥Ô∏è Second voting started:', data);
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.canChangeVote = data.canChangeVote;
    gameState.hasChangedVote = false;
    updateGameDisplay();
    
    showNotification('–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', '–ì–æ–ª–æ—Å–∞ –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä–µ–∂–Ω–∏–º–∏. –í—ã –º–æ–∂–µ—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ —Å–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –≥–æ–ª–æ—Å.');
});

socket.on('player-surrendered', function(data) {
    console.log('üè≥Ô∏è Player surrendered:', data);
    gameState.players = data.players;
    updatePlayersGrid();
    
    const isMe = data.surrenderedPlayer === gameState.playerName;
    const message = isMe ? '–í—ã —Å–¥–∞–ª–∏—Å—å –∏ –ø–æ–∫–∏–Ω—É–ª–∏ –∏–≥—Ä—É.' : `${data.surrenderedPlayer} —Å–¥–∞–ª—Å—è –∏ –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É.`;
    
    showNotification('–ò–≥—Ä–æ–∫ —Å–¥–∞–ª—Å—è', message);
});