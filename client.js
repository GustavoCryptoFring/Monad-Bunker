console.log('Client.js loading...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è
const IS_ROOM_PAGE = window.IS_ROOM_PAGE || false;
const ROOM_CODE = window.ROOM_CODE || null;

// –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
    players: [],
    currentRound: 1,
    gamePhase: 'login',
    votingResults: {},
    maxRounds: 3,
    currentPlayerName: '',
    currentPlayerId: null,
    roomCode: ROOM_CODE || '',
    isRoomHost: false,
    currentTurnPlayerId: null,
    revealedThisRound: 0,
    timer: null,
    timeLeft: 0,
    playersWhoVoted: [],
    skipVotes: 0,
    playersToEliminateNextRound: 0,
    currentPhase: 'waiting',
    round: 1,
    maxPlayers: 8,
    playerId: '',
    playerName: '',
    isHost: false,
    skipVotes: {
        discussion: new Set(),
        voting: new Set()
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO
const socket = io();

// Socket.IO –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
socket.on('connect', function() {
    console.log('‚úÖ Connected to server:', socket.id);
    gameState.playerId = socket.id;
    gameState.currentPlayerId = socket.id;
});

socket.on('disconnect', function() {
    console.log('‚ùå Disconnected from server');
});

socket.on('connect_error', function(error) {
    console.error('‚ùå Connection error:', error);
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã - —Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
socket.on('room-created', function(data) {
    console.log('Room created:', data);
    
    if (data.redirect && data.roomUrl) {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–¥–¥–æ–º–µ–Ω
        alert(`–ö–æ–º–Ω–∞—Ç–∞ ${data.roomCode} —Å–æ–∑–¥–∞–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–º–Ω–∞—Ç–µ...`);
        window.location.href = data.roomUrl;
    } else {
        // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–º—ã —É–∂–µ –Ω–∞ –ø–æ–¥–¥–æ–º–µ–Ω–µ)
        gameState.roomCode = data.roomCode;
        gameState.isHost = data.isHost;
        gameState.isRoomHost = data.isHost;
        updatePlayersFromServer(data.players);
        showRoomSetup();
    }
});

socket.on('room-joined', function(data) {
    console.log('Room joined:', data);
    
    if (data.redirect && data.roomUrl) {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–¥–¥–æ–º–µ–Ω
        alert(`–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${data.roomCode}...`);
        window.location.href = data.roomUrl;
    } else {
        // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ –ø–æ–¥–¥–æ–º–µ–Ω–µ
        gameState.roomCode = data.roomCode;
        gameState.isHost = data.isHost;
        gameState.isRoomHost = data.isHost;
        updatePlayersFromServer(data.players);
        showRoomSetup();
    }
});

socket.on('player-joined', function(data) {
    console.log('Player joined:', data);
    updatePlayersFromServer(data.players);
    updatePlayersList();
});

socket.on('player-left', function(data) {
    console.log('Player left:', data);
    updatePlayersFromServer(data.players);
    updatePlayersList();
});

socket.on('game-started', function(data) {
    console.log('Game started:', data);
    
    document.getElementById('roomSetup').style.display = 'none';
    document.getElementById('gameBoard').style.display = 'block';
    
    gameState.gamePhase = 'discussion';
    updateGameDisplay();
    updatePlayersGrid();
    startDiscussionPhase();
});

socket.on('error', function(error) {
    console.error('Server error:', error);
    alert('–û—à–∏–±–∫–∞: ' + error);
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü
function createRoom() {
    console.log('Creating room...');
    
    const playerName = document.getElementById('playerName').value.trim();
    
    if (!playerName) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
        return;
    }
    
    if (!socket.connected) {
        alert('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        return;
    }
    
    gameState.playerName = playerName;
    gameState.currentPlayerName = playerName;
    
    socket.emit('create-room', { playerName });
}

function joinRoom() {
    const playerName = document.getElementById('playerName').value.trim();
    const roomCode = document.getElementById('roomCodeInput').value.trim().toUpperCase();
    
    if (!playerName) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è!');
        return;
    }
    
    if (!roomCode) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã!');
        return;
    }

    gameState.playerName = playerName;
    gameState.currentPlayerName = playerName;
    
    socket.emit('join-room', { 
        roomCode, 
        playerName,
        fromMainPage: true  // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–æ–¥–¥–æ–º–µ–Ω–∞
function joinRoomFromSubdomain(roomCode) {
    const playerName = document.getElementById('playerName').value.trim();
    
    if (!playerName) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è!');
        return;
    }
    
    gameState.playerName = playerName;
    gameState.currentPlayerName = playerName;
    gameState.roomCode = roomCode;
    
    socket.emit('join-room', { 
        roomCode, 
        playerName,
        fromMainPage: false  // –ú—ã —É–∂–µ –Ω–∞ –ø–æ–¥–¥–æ–º–µ–Ω–µ
    });
}

function showRoomSetup() {
    document.getElementById('loginScreen').style.display = 'none';
    document.getElementById('roomSetup').style.display = 'block';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç—É
    if (gameState.isHost) {
        document.getElementById('roomSettings').style.display = 'block';
        document.getElementById('startGameBtn').style.display = 'block';
    }
    
    updatePlayersList();
}

function updatePlayersFromServer(players) {
    gameState.players = [];
    
    players.forEach(player => {
        gameState.players.push({
            id: player.id,
            name: player.name,
            isHost: player.isHost,
            characteristics: generateCharacteristics(),
            actionCards: [getRandomActionCard()],
            isAlive: true,
            votes: 0,
            hasRevealed: false
        });
    });
}

function updatePlayersList() {
    const playersList = document.getElementById('playersList');
    const currentPlayersCount = document.getElementById('currentPlayersCount');
    const maxPlayersCount = document.getElementById('maxPlayersCount');
    
    if (!playersList || !currentPlayersCount) return;
    
    playersList.innerHTML = '';
    
    gameState.players.forEach(player => {
        const li = document.createElement('li');
        li.textContent = player.name + (player.isHost ? ' üëë' : '');
        li.className = player.isHost ? 'host' : '';
        playersList.appendChild(li);
    });
    
    currentPlayersCount.textContent = gameState.players.length;
    if (maxPlayersCount) {
        maxPlayersCount.textContent = gameState.maxPlayers;
    }
    
    const startBtn = document.getElementById('startGameBtn');
    if (startBtn) {
        const canStart = gameState.players.length >= 2 && gameState.isHost;
        startBtn.disabled = !canStart;
        startBtn.textContent = gameState.players.length < 2 ? 
            `–ù–∞—á–∞—Ç—å –∏–≥—Ä—É (–º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞)` : 
            `–ù–∞—á–∞—Ç—å –∏–≥—Ä—É (${gameState.players.length}/${gameState.maxPlayers})`;
    }
}

function copyRoomUrl() {
    const roomUrl = window.location.href;
    
    navigator.clipboard.writeText(roomUrl).then(() => {
        alert(`–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–º–Ω–∞—Ç—É —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞:\n${roomUrl}`);
    }).catch(() => {
        const textArea = document.createElement('textarea');
        textArea.value = roomUrl;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        alert(`–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–º–Ω–∞—Ç—É —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞:\n${roomUrl}`);
    });
}

function updateMaxPlayers() {
    if (!gameState.isHost) return;
    
    const maxPlayers = parseInt(document.getElementById('maxPlayers').value);
    gameState.maxPlayers = maxPlayers;
    updatePlayersList();
}

function startGame() {
    if (!gameState.isHost) return;
    
    if (gameState.players.length < 2) {
        alert('–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!');
        return;
    }
    
    socket.emit('start-game', { roomCode: gameState.roomCode });
}

// –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã (–≤—Å–µ –º–∞—Å—Å–∏–≤—ã –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ –∂–µ)
const professions = [
    "–í—Ä–∞—á", "–£—á–∏—Ç–µ–ª—å", "–ò–Ω–∂–µ–Ω–µ—Ä", "–ü–æ–≤–∞—Ä", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "–ú–µ—Ö–∞–Ω–∏–∫",
    "–ü–∏—Å–∞—Ç–µ–ª—å", "–•—É–¥–æ–∂–Ω–∏–∫", "–ú—É–∑—ã–∫–∞–Ω—Ç", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å", "–§–µ—Ä–º–µ—Ä", "–ü–∏–ª–æ—Ç",
    "–ú–µ–¥—Å–µ—Å—Ç—Ä–∞", "–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π", "–ü–æ–∂–∞—Ä–Ω—ã–π", "–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä", "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫",
    "–î–∏–∑–∞–π–Ω–µ—Ä", "–§–æ—Ç–æ–≥—Ä–∞—Ñ", "–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç", "–ü—Å–∏—Ö–æ–ª–æ–≥", "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä"
];

const healthConditions = [
    "–û—Ç–ª–∏—á–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "–•–æ—Ä–æ—à–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
    "–ë–ª–∏–∑–æ—Ä—É–∫–æ—Å—Ç—å", "–î–∞–ª—å–Ω–æ–∑–æ—Ä–∫–æ—Å—Ç—å", "–ê—Å—Ç–º–∞", "–ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –ø—ã–ª—å",
    "–ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö", "–î–∏–∞–±–µ—Ç", "–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è", "–ê—Ä—Ç—Ä–∏—Ç",
    "–•—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å", "–ú–∏–≥—Ä–µ–Ω–∏", "–ë–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞", "–î–µ–ø—Ä–µ—Å—Å–∏—è",
    "–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å", "–ë–æ—è–∑–Ω—å –≤—ã—Å–æ—Ç—ã", "–ö–ª–∞—É—Å—Ç—Ä–æ—Ñ–æ–±–∏—è"
];

const hobbies = [
    "–ß—Ç–µ–Ω–∏–µ", "–ö—É–ª–∏–Ω–∞—Ä–∏—è", "–°–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ", "–†–∏—Å–æ–≤–∞–Ω–∏–µ", "–ú—É–∑—ã–∫–∞",
    "–°–ø–æ—Ä—Ç", "–¢–∞–Ω—Ü—ã", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "–†—É–∫–æ–¥–µ–ª–∏–µ", "–ò–≥—Ä—ã", "–†—ã–±–∞–ª–∫–∞", "–û—Ö–æ—Ç–∞", "–ô–æ–≥–∞", "–ú–µ–¥–∏—Ç–∞—Ü–∏—è",
    "–í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ", "–ò–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤", "–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è", "–ê—Ä—Ö–µ–æ–ª–æ–≥–∏—è"
];

const phobias = [
    "–ë–æ—è–∑–Ω—å —Ç–µ–º–Ω–æ—Ç—ã", "–ë–æ—è–∑–Ω—å –≤—ã—Å–æ—Ç—ã", "–ë–æ—è–∑–Ω—å –∑–∞–º–∫–Ω—É—Ç—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤",
    "–ë–æ—è–∑–Ω—å –ø–∞—É–∫–æ–≤", "–ë–æ—è–∑–Ω—å –∑–º–µ–π", "–ë–æ—è–∑–Ω—å —Å–æ–±–∞–∫", "–ë–æ—è–∑–Ω—å –≤–æ–¥—ã",
    "–ë–æ—è–∑–Ω—å –æ–≥–Ω—è", "–ë–æ—è–∑–Ω—å —Ç–æ–ª–ø—ã", "–ë–æ—è–∑–Ω—å –ø—É–±–ª–∏—á–Ω—ã—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π",
    "–ë–æ—è–∑–Ω—å –∏–≥–ª", "–ë–æ—è–∑–Ω—å –∫—Ä–æ–≤–∏", "–ë–æ—è–∑–Ω—å —Å–∞–º–æ–ª–µ—Ç–æ–≤", "–ë–æ—è–∑–Ω—å –ª–∏—Ñ—Ç–æ–≤",
    "–ë–æ—è–∑–Ω—å –º–∏–∫—Ä–æ–±–æ–≤", "–ë–æ—è–∑–Ω—å –∫–ª–æ—É–Ω–æ–≤", "–ë–æ—è–∑–Ω—å –∑–µ—Ä–∫–∞–ª"
];

const baggage = [
    "–†—é–∫–∑–∞–∫ —Å –µ–¥–æ–π", "–ê–ø—Ç–µ—á–∫–∞", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "–û—Ä—É–∂–∏–µ", "–ö–Ω–∏–≥–∏",
    "–°–µ–º–µ–Ω–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π", "–†–∞–¥–∏–æ", "–§–æ–Ω–∞—Ä–∏–∫", "–û–¥–µ—è–ª–∞", "–û–¥–µ–∂–¥–∞",
    "–î–æ–∫—É–º–µ–Ω—Ç—ã", "–î–µ–Ω—å–≥–∏", "–£–∫—Ä–∞—à–µ–Ω–∏—è", "–õ–µ–∫–∞—Ä—Å—Ç–≤–∞", "–ö–æ–º–ø—å—é—Ç–µ—Ä",
    "–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", "–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ", "–ò–≥—Ä—É—à–∫–∏"
];

const facts = [
    "–ë—ã–ª –≤ —Ç—é—Ä—å–º–µ", "–°–ø–∞—Å —á—å—é-—Ç–æ –∂–∏–∑–Ω—å", "–í—ã–∏–≥—Ä–∞–ª –≤ –ª–æ—Ç–µ—Ä–µ—é",
    "–ó–Ω–∞–µ—Ç 5 —è–∑—ã–∫–æ–≤", "–ß–µ–º–ø–∏–æ–Ω –ø–æ —à–∞—Ö–º–∞—Ç–∞–º", "–ë—ã–≤—à–∏–π –≤–æ–µ–Ω–Ω—ã–π",
    "–ò–º–µ–µ—Ç –¥–≤–æ–π–Ω–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ", "–†–∞–±–æ—Ç–∞–ª –≤ —Ü–∏—Ä–∫–µ", "–ü–∏—Å–∞–ª –∫–Ω–∏–≥–∏",
    "–ò–∑–æ–±—Ä–µ–ª —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞–ª –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É",
    "–í—ã–∂–∏–≤–∞–ª –≤ –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥–µ", "–ó–Ω–∞–µ—Ç –±–æ–µ–≤—ã–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞",
    "–ë—ã–≤—à–∏–π –∞–∫—Ç–µ—Ä", "–†–∞–±–æ—Ç–∞–ª —Å–ø–∞—Å–∞—Ç–µ–ª–µ–º", "–ò–º–µ–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –ø–∞–º—è—Ç—å"
];

const actionCards = [
    { id: 1, name: "–¶–µ–ª–∏—Ç–µ–ª—å", description: "–ú–æ–∂–µ—Ç–µ —Å–ø–∞—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –æ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è", type: "protective", usesLeft: 1 },
    { id: 2, name: "–î–µ—Ç–µ–∫—Ç–∏–≤", description: "–£–∑–Ω–∞–π—Ç–µ –æ–¥–Ω—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞", type: "investigative", usesLeft: 1 },
    { id: 3, name: "–°–∞–±–æ—Ç–∞–∂–Ω–∏–∫", description: "–û—Ç–º–µ–Ω–∏—Ç–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞", type: "disruptive", usesLeft: 1 },
    { id: 4, name: "–õ–∏–¥–µ—Ä", description: "–í–∞—à –≥–æ–ª–æ—Å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞ –¥–≤–∞", type: "influential", usesLeft: 1 },
    { id: 5, name: "–®–ø–∏–æ–Ω", description: "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Å–µ –∫–∞—Ä—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤", type: "investigative", usesLeft: 1 },
    { id: 6, name: "–ú–µ–¥–∏–∫", description: "–ò–∑–ª–µ—á–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ —Å –ø–ª–æ—Ö–∏–º –∑–¥–æ—Ä–æ–≤—å–µ–º", type: "supportive", usesLeft: 1 },
    { id: 7, name: "–°—Ç—Ä–∞—Ç–µ–≥", description: "–ò–∑–º–µ–Ω–∏—Ç–µ –ø–æ—Ä—è–¥–æ–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è", type: "tactical", usesLeft: 1 },
    { id: 8, name: "–î–∏–ø–ª–æ–º–∞—Ç", description: "–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –æ–¥–∏–Ω —Ä–∞—É–Ω–¥", type: "protective", usesLeft: 1 }
];

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–≥—Ä—ã –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ –∂–µ...
function generateCharacteristics() {
    return {
        profession: getRandomItem(professions),
        health: getRandomItem(healthConditions),
        hobby: getRandomItem(hobbies),
        phobia: getRandomItem(phobias),
        baggage: getRandomItem(baggage),
        fact: getRandomItem(facts)
    };
}

function getRandomActionCard() {
    return { ...getRandomItem(actionCards) };
}

function getRandomItem(array) {
    return array[Math.floor(Math.random() * array.length)];
}

function updateGameDisplay() {
    const currentRoundElement = document.getElementById('currentRound');
    const gameStatusElement = document.getElementById('gameStatus');
    const phaseDisplayElement = document.getElementById('phaseDisplay');
    
    if (currentRoundElement) {
        currentRoundElement.textContent = gameState.currentRound;
    }
    
    if (gameStatusElement) {
        gameStatusElement.textContent = getGameStatusText();
    }
    
    if (phaseDisplayElement) {
        phaseDisplayElement.textContent = getPhaseDisplayText();
    }
    
    updatePlayersGrid();
}

function getGameStatusText() {
    switch (gameState.gamePhase) {
        case 'setup': return '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–≥—Ä–µ...';
        case 'discussion': return '–§–∞–∑–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è';
        case 'voting': return '–§–∞–∑–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è';
        case 'results': return '–ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ —Ä–∞—É–Ω–¥–∞';
        case 'finished': return '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
        default: return '–û–∂–∏–¥–∞–Ω–∏–µ...';
    }
}

function getPhaseDisplayText() {
    switch (gameState.gamePhase) {
        case 'discussion': return '–û–ë–°–£–ñ–î–ï–ù–ò–ï';
        case 'voting': return '–ì–û–õ–û–°–û–í–ê–ù–ò–ï';
        case 'results': return '–†–ï–ó–£–õ–¨–¢–ê–¢–´';
        default: return '–ü–û–î–ì–û–¢–û–í–ö–ê';
    }
}

function updatePlayersGrid() {
    const playersGrid = document.getElementById('playersGrid');
    if (!playersGrid) return;
    
    playersGrid.innerHTML = '';
    playersGrid.className = 'players-grid';
    
    const playerCount = gameState.players.length;
    playersGrid.classList.add(`players-${playerCount}`);
    
    gameState.players.forEach(player => {
        const playerCard = createPlayerCard(player);
        playersGrid.appendChild(playerCard);
    });
}

function createPlayerCard(player) {
    const card = document.createElement('div');
    const isCurrentPlayer = player.id === gameState.playerId;
    
    card.className = `player-card ${player.isAlive ? '' : 'eliminated'} ${isCurrentPlayer ? 'current-player' : ''}`;
    
    card.innerHTML = `
        <div class="player-header">
            <div class="player-info">
                <div class="player-avatar-container">
                    <div class="player-avatar ${player.isAlive ? '' : 'eliminated-avatar'}">
                        ${player.name.charAt(0).toUpperCase()}
                    </div>
                </div>
                <div>
                    <div class="player-name ${player.isAlive ? '' : 'eliminated-name'}">
                        ${player.name}${player.isHost ? ' üëë' : ''}
                    </div>
                    ${isCurrentPlayer ? '<div class="player-status current">–í—ã</div>' : ''}
                </div>
            </div>
        </div>
        
        <div class="characteristics">
            ${Object.entries(player.characteristics).map(([key, value]) => {
                const isRevealed = player.hasRevealed || key === 'profession';
                const isOwnCard = isCurrentPlayer;
                
                return `<div class="characteristic ${isRevealed ? 'revealed' : (isOwnCard ? 'own-hidden' : 'hidden')}">
                    <span class="characteristic-name">${translateCharacteristic(key)}:</span>
                    <span class="characteristic-value ${isOwnCard && !isRevealed ? 'own-characteristic' : ''}">
                        ${isRevealed ? value : (isOwnCard ? value : '???')}
                    </span>
                </div>`;
            }).join('')}
        </div>
        
        <div class="player-actions">
            ${gameState.gamePhase === 'discussion' && isCurrentPlayer ? 
                `<button class="modal-buttons" onclick="revealCharacteristic('${player.id}')">
                    üîç –†–∞—Å–∫—Ä—ã—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
                </button>` : ''
            }
            ${gameState.gamePhase === 'voting' && !isCurrentPlayer && player.isAlive ? 
                `<div class="vote-section">
                    <button class="vote-player-btn" onclick="voteForPlayer('${player.id}')">
                        üìã –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                    </button>
                    <div class="voters-list" id="voters-${player.id}">
                        –ì–æ–ª–æ—Å–æ–≤: ${player.votes || 0}
                    </div>
                </div>` : ''
            }
        </div>
    `;
    
    return card;
}

function translateCharacteristic(key) {
    const translations = {
        profession: '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è',
        health: '–ó–¥–æ—Ä–æ–≤—å–µ',
        hobby: '–•–æ–±–±–∏',
        phobia: '–§–æ–±–∏—è',
        baggage: '–ë–∞–≥–∞–∂',
        fact: '–§–∞–∫—Ç'
    };
    return translations[key] || key;
}

function startDiscussionPhase() {
    gameState.gamePhase = 'discussion';
    gameState.timeLeft = 180;
    
    updateGameDisplay();
    startTimer();
}

function startTimer() {
    if (gameState.timer) {
        clearInterval(gameState.timer);
    }
    
    gameState.timer = setInterval(() => {
        gameState.timeLeft--;
        updateTimerDisplay();
        
        if (gameState.timeLeft <= 0) {
            clearInterval(gameState.timer);
            nextPhase();
        }
    }, 1000);
}

function updateTimerDisplay() {
    const timerDisplay = document.getElementById('timerDisplay');
    if (timerDisplay) {
        const minutes = Math.floor(gameState.timeLeft / 60);
        const seconds = gameState.timeLeft % 60;
        timerDisplay.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }
}

function nextPhase() {
    switch (gameState.gamePhase) {
        case 'discussion':
            startVotingPhase();
            break;
        case 'voting':
            showResults();
            break;
        case 'results':
            nextRound();
            break;
    }
}

function startVotingPhase() {
    gameState.gamePhase = 'voting';
    gameState.timeLeft = 60;
    gameState.playersWhoVoted = [];
    
    updateGameDisplay();
    startTimer();
}

function showResults() {
    gameState.gamePhase = 'results';
    updateGameDisplay();
    
    setTimeout(() => {
        nextRound();
    }, 5000);
}

function nextRound() {
    gameState.currentRound++;
    gameState.revealedThisRound = 0;
    
    if (gameState.currentRound > gameState.maxRounds) {
        endGame();
    } else {
        startDiscussionPhase();
    }
}

function endGame() {
    gameState.gamePhase = 'finished';
    updateGameDisplay();
    alert('–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

// –ó–∞–≥–ª—É—à–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π
function revealCharacteristic(playerId) { console.log('Revealing characteristic for player:', playerId); }
function voteForPlayer(playerId) { console.log('Voting for player:', playerId); }
function voteToSkip() { console.log('Voting to skip'); }
function showActionCard() { console.log('Showing action cards'); }
function closeActionCardModal() {}
function closeTargetSelectionModal() {}
function closeCharacteristicSelectionModal() {}

document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, IS_ROOM_PAGE:', IS_ROOM_PAGE, 'ROOM_CODE:', ROOM_CODE);
});

console.log('Client.js loaded with subdomain support');