console.log('üéÆ Bunker Game Client Loading...');

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
    playerId: null,
    playerName: '',
    isHost: false,
    players: [],
    gamePhase: 'login',
    serverGameState: 'lobby',
    currentRound: 1,
    timeLeft: 0,
    votingResults: {},
    myVote: null,
    timer: null,
    maxPlayers: 12,
    currentTurnPlayer: null,
    currentJustifyingPlayer: null,
    canChangeVote: {},
    hasChangedVote: false,
    cardsRevealedThisRound: 0,
    requiredCardsThisRound: 1,
    skipDiscussionVotes: 0,
    mySkipVote: false
};

// Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
const socket = io();

// === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô SOCKET.IO ===

socket.on('connect', function() {
    console.log('üåê Connected to server');
});

socket.on('disconnect', function() {
    console.log('‚ùå Disconnected from server');
    showNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ', '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
});

socket.on('error', function(errorMessage) {
    console.error('‚ùå Server error:', errorMessage);
    showNotification('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', errorMessage);
});

socket.on('room-state', function(data) {
    console.log('üè† Room state received:', data);
    gameState.players = data.players || [];
    gameState.serverGameState = data.gameState || 'lobby';
    gameState.gamePhase = data.gamePhase || 'waiting';
    gameState.currentRound = data.currentRound || 1;
    gameState.timeLeft = data.timeLeft || 0;
    gameState.currentTurnPlayer = data.currentTurnPlayer || null;
    
    if (gameState.gamePhase !== 'login') {
        updateGameDisplay();
    }
});

socket.on('join-confirmed', function(data) {
    console.log('‚úÖ Join confirmed:', data);
    gameState.playerId = data.playerId;
    gameState.playerName = data.playerName;
    gameState.isHost = data.isHost;
    gameState.maxPlayers = data.maxPlayers;
    gameState.gamePhase = 'lobby';
    updateGameDisplay();
});

socket.on('player-joined', function(data) {
    console.log('üëã Player joined:', data);
    gameState.players = data.players;
    gameState.maxPlayers = data.maxPlayers;
    updateGameDisplay();
    
    if (data.newPlayer !== gameState.playerName) {
        showNotification('–ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è', `${data.newPlayer} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ`);
    }
});

socket.on('player-left', function(data) {
    console.log('üëã Player left:', data);
    gameState.players = data.players;
    gameState.serverGameState = data.gameState;
    updateGameDisplay();
    
    showNotification('–ò–≥—Ä–æ–∫ –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É', `${data.leftPlayer} –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É`);
});

socket.on('max-players-changed', function(data) {
    console.log('üîß Max players changed:', data);
    gameState.maxPlayers = data.maxPlayers;
    gameState.players = data.players;
    updateGameDisplay();
});

socket.on('game-started', function(data) {
    console.log('üöÄ Game started:', data);
    gameState.players = data.players;
    gameState.serverGameState = data.gameState;
    gameState.gamePhase = data.gamePhase;
    gameState.currentRound = data.currentRound;
    gameState.timeLeft = data.timeLeft;
    updateGameDisplay();
    
    showNotification('–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!', '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ä–æ–∑–¥–∞–Ω—ã. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø–µ—Ä–≤–æ–º—É —Ä–∞—É–Ω–¥—É.');
});

socket.on('phase-changed', function(data) {
    console.log('üîÑ Phase changed:', data);
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.currentTurnPlayer = data.currentTurnPlayer || null;
    gameState.currentRound = data.currentRound || gameState.currentRound;
    
    gameState.requiredCardsThisRound = getRequiredCardsForRound(gameState.currentRound);
    
    if (data.gamePhase !== 'discussion') {
        gameState.skipDiscussionVotes = 0;
        gameState.mySkipVote = false;
    }
    
    if (data.gamePhase !== 'voting') {
        gameState.myVote = null;
        gameState.hasChangedVote = false;
    }
    
    if (data.gamePhase === 'revelation') {
        gameState.cardsRevealedThisRound = 0;
    }
    
    updateGameDisplay();
});

socket.on('characteristic-revealed', function(data) {
    console.log('üîç Characteristic revealed:', data);
    gameState.players = data.players;
    
    if (data.playerId === gameState.playerId) {
        gameState.cardsRevealedThisRound = data.cardsRevealedThisRound;
        gameState.requiredCardsThisRound = data.requiredCards;
    }
    
    updatePlayersGrid();
});

socket.on('timer-update', function(data) {
    gameState.timeLeft = data.timeLeft;
    gameState.currentTurnPlayer = data.currentTurnPlayer;
    updateTimerDisplay();
    
    if (gameState.gamePhase === 'revelation') {
        updateGameDisplay();
    }
});

socket.on('vote-update', function(data) {
    console.log('üó≥Ô∏è Vote update:', data);
    gameState.players = data.players;
    gameState.votingResults = data.votingResults;
    gameState.canChangeVote = data.canChangeVote || {};
    updatePlayersGrid();
});

socket.on('justification-started', function(data) {
    console.log('‚öñÔ∏è Justification started:', data);
    gameState.currentJustifyingPlayer = data.justifyingPlayer?.id;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.gamePhase = 'justification';
    updateGameDisplay();
});

socket.on('second-voting-started', function(data) {
    console.log('üó≥Ô∏è Second voting started:', data);
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.canChangeVote = data.canChangeVote || {};
    updateGameDisplay();
});

socket.on('skip-discussion-vote-update', function(data) {
    console.log('‚è≠Ô∏è Skip discussion vote update:', data);
    gameState.skipDiscussionVotes = data.votes;
    gameState.mySkipVote = data.hasVoted;
    updateGameDisplay();
});

socket.on('discussion-skipped', function(data) {
    console.log('‚è≠Ô∏è Discussion skipped:', data);
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    updateGameDisplay();
    showNotification('–û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ', '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é');
});

socket.on('round-results', function(data) {
    console.log('üìä Round results:', data);
    gameState.players = data.players;
    gameState.votingResults = data.votingResults;
    updateGameDisplay();
    
    if (data.eliminatedPlayer) {
        showNotification('–ò–≥—Ä–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω', `${data.eliminatedPlayer} –ø–æ–∫–∏–¥–∞–µ—Ç –±—É–Ω–∫–µ—Ä`);
    } else {
        showNotification('–ù–∏—á—å—è', '–ù–∏–∫—Ç–æ –Ω–µ –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ');
    }
});

socket.on('new-round', function(data) {
    console.log('üîÑ New round:', data);
    gameState.currentRound = data.currentRound;
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    updateGameDisplay();
    
    showNotification(`–†–∞—É–Ω–¥ ${data.currentRound}`, '–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!');
});

socket.on('game-ended', function(data) {
    console.log('üèÅ Game ended:', data);
    gameState.players = data.players;
    gameState.gamePhase = 'finished';
    updateGameDisplay();
    
    const winners = data.winners.map(p => p.name).join(', ');
    showNotification('–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', `–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: ${winners}`);
});

socket.on('game-reset', function(data) {
    console.log('üîÑ Game reset:', data);
    gameState.players = data.players;
    gameState.serverGameState = data.gameState;
    gameState.gamePhase = 'lobby';
    gameState.currentRound = 1;
    gameState.timeLeft = 0;
    gameState.currentTurnPlayer = null;
    updateGameDisplay();
    
    showNotification('–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞', '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ª–æ–±–±–∏');
});

socket.on('player-surrendered', function(data) {
    console.log('üè≥Ô∏è Player surrendered:', data);
    gameState.players = data.players;
    updateGameDisplay();
    showNotification('–ò–≥—Ä–æ–∫ —Å–¥–∞–ª—Å—è', `${data.surrenderedPlayer} –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É`);
});

// === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò–ì–†–´ ===

function joinGame() {
    const nameInput = document.getElementById('playerNameInput');
    const playerName = nameInput.value.trim();
    
    if (!playerName) {
        showNotification('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è!');
        return;
    }
    
    if (playerName.length < 2 || playerName.length > 20) {
        showNotification('–û—à–∏–±–∫–∞', '–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤!');
        return;
    }
    
    console.log('üéØ Joining game with name:', playerName);
    socket.emit('join-game', { playerName: playerName });
}

function startGame() {
    console.log('üöÄ Starting game...');
    socket.emit('start-game');
}

function startRound() {
    console.log('üéØ Starting round...');
    socket.emit('start-round');
}

function getRequiredCardsForRound(round) {
    if (round === 1) {
        return 2; // –ü—Ä–æ—Ñ–µ—Å—Å–∏—è + 1 –∫–∞—Ä—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä
    } else {
        return 1; // 1 –∫–∞—Ä—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä
    }
}

function getGameStatusText() {
    switch (gameState.gamePhase) {
        case 'preparation': 
            return '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞—É–Ω–¥—É';
        case 'revelation': 
            const currentPlayer = gameState.players.find(p => p.id === gameState.currentTurnPlayer);
            if (currentPlayer) {
                const isMyTurn = currentPlayer.id === gameState.playerId;
                const requiredCards = getRequiredCardsForRound(gameState.currentRound);
                const revealedCards = currentPlayer.cardsRevealedThisRound || 0;
                
                if (isMyTurn) {
                    if (gameState.currentRound === 1) {
                        if (revealedCards === 0) {
                            return '–í–∞—à —Ö–æ–¥: –†–∞—Å–∫—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é';
                        } else if (revealedCards === 1) {
                            return '–í–∞—à —Ö–æ–¥: –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É';
                        } else {
                            return '–í–∞—à —Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω';
                        }
                    } else {
                        if (revealedCards === 0) {
                            return '–í–∞—à —Ö–æ–¥: –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É';
                        } else {
                            return '–í–∞—à —Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω';
                        }
                    }
                } else {
                    return `–•–æ–¥ –∏–≥—Ä–æ–∫–∞: ${currentPlayer.name} (${revealedCards}/${requiredCards})`;
                }
            }
            return '–†–∞—Å–∫—Ä—ã—Ç–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫';
        case 'discussion': 
            return '–§–∞–∑–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è';
        case 'voting': 
            return '–§–∞–∑–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è';
        case 'justification':
            const justifyingPlayer = gameState.players.find(p => p.id === gameState.currentJustifyingPlayer);
            if (justifyingPlayer) {
                const isMyJustification = justifyingPlayer.id === gameState.playerId;
                return `–û–ø—Ä–∞–≤–¥–∞–Ω–∏–µ: ${isMyJustification ? '–í–∞—à —á–µ—Ä–µ–¥' : justifyingPlayer.name}`;
            }
            return '–§–∞–∑–∞ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è';
        case 'results': 
            return '–ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ —Ä–∞—É–Ω–¥–∞';
        case 'finished': 
            return '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
        default: 
            return '–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...';
    }
}

function getPhaseDisplayText() {
    const statusText = getGameStatusText();
    
    if (gameState.gamePhase === 'revelation' && gameState.currentTurnPlayer === gameState.playerId) {
        return `<span class="my-turn">${statusText}</span>`;
    }
    
    return statusText;
}

function updateGameDisplay() {
    const gameContainer = document.querySelector('.game-container');
    
    if (gameState.gamePhase === 'login') {
        gameContainer.innerHTML = `
            <div class="login-screen">
                <h2>üé≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë—É–Ω–∫–µ—Ä!</h2>
                <div class="login-form">
                    <input type="text" id="playerNameInput" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è" maxlength="20" />
                    <button onclick="joinGame()" class="room-btn primary">–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ</button>
                </div>
            </div>
        `;
        
        const nameInput = document.getElementById('playerNameInput');
        if (nameInput) {
            nameInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    joinGame();
                }
            });
            nameInput.focus();
        }
        return;
    }
    
    gameContainer.innerHTML = `
        <div class="game-header">
            <h1>üé≠ –ë–£–ù–ö–ï–†</h1>
            <div class="game-info">
                <span class="game-info-item">üë• –ò–≥—Ä–æ–∫–æ–≤: ${gameState.players.length}/${gameState.maxPlayers}</span>
                <span class="game-info-item">üéØ –†–∞—É–Ω–¥: ${gameState.currentRound}</span>
                <span class="game-info-item" id="timerDisplay">‚è±Ô∏è ${Math.floor(gameState.timeLeft / 60)}:${(gameState.timeLeft % 60).toString().padStart(2, '0')}</span>
            </div>
        </div>
        
        <div class="game-status">
            <h2>${getPhaseDisplayText()}</h2>
        </div>
        
        <div class="game-actions">
            ${updateGameActions()}
        </div>
        
        <div class="players-section">
            <h3>–ò–≥—Ä–æ–∫–∏</h3>
            <div id="playersGrid" class="players-grid">
                <!-- –ò–≥—Ä–æ–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
            </div>
        </div>
    `;
    
    updatePlayersGrid();
    updateTimerDisplay();
}

function updateGameActions() {
    if (gameState.gamePhase === 'lobby') {
        let actions = '';
        
        if (gameState.isHost) {
            actions += `
                <button onclick="startGame()" class="room-btn primary">üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É</button>
                <div class="host-controls">
                    <label for="maxPlayersSelect">–ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤:</label>
                    <select id="maxPlayersSelect" onchange="changeMaxPlayers()">
                        <option value="8" ${gameState.maxPlayers === 8 ? 'selected' : ''}>8 –∏–≥—Ä–æ–∫–æ–≤</option>
                        <option value="12" ${gameState.maxPlayers === 12 ? 'selected' : ''}>12 –∏–≥—Ä–æ–∫–æ–≤</option>
                        <option value="16" ${gameState.maxPlayers === 16 ? 'selected' : ''}>16 –∏–≥—Ä–æ–∫–æ–≤</option>
                    </select>
                </div>
            `;
        }
        
        return actions;
    }
    
    if (gameState.gamePhase === 'preparation' && gameState.isHost) {
        return '<button onclick="startRound()" class="room-btn primary">‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥</button>';
    }
    
    if (gameState.gamePhase === 'discussion') {
        const canSkip = !gameState.mySkipVote;
        const skipText = gameState.mySkipVote ? '‚úÖ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–æ –∑–∞ –ø—Ä–æ–ø—É—Å–∫' : '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ';
        const skipClass = gameState.mySkipVote ? 'room-btn voted-skip' : 'room-btn secondary';
        
        return `
            <button onclick="voteToSkipDiscussion()" class="${skipClass}" ${!canSkip ? 'disabled' : ''}>
                ${skipText}
            </button>
            ${gameState.skipDiscussionVotes > 0 ? `
                <div class="skip-votes-info">
                    –ì–æ–ª–æ—Å–æ–≤ –∑–∞ –ø—Ä–æ–ø—É—Å–∫: ${gameState.skipDiscussionVotes}/2
                </div>
            ` : ''}
        `;
    }
    
    if (gameState.gamePhase === 'justification') {
        const justifyingPlayer = gameState.players.find(p => p.id === gameState.currentJustifyingPlayer);
        if (justifyingPlayer && justifyingPlayer.id === gameState.playerId) {
            return `
                <div class="justification-actions">
                    <button onclick="finishJustification()" class="room-btn primary">‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–µ</button>
                    <button onclick="surrender()" class="room-btn danger">üè≥Ô∏è –°–¥–∞—Ç—å—Å—è</button>
                </div>
            `;
        }
    }
    
    return '';
}

function updateTimerDisplay() {
    const timerElement = document.getElementById('timerDisplay');
    if (timerElement && gameState.timeLeft >= 0) {
        const minutes = Math.floor(gameState.timeLeft / 60);
        const seconds = gameState.timeLeft % 60;
        timerElement.textContent = `‚è±Ô∏è ${minutes}:${seconds.toString().padStart(2, '0')}`;
    }
}

function updatePlayersGrid() {
    const playersGrid = document.getElementById('playersGrid');
    
    if (!playersGrid) {
        console.error('‚ùå playersGrid element not found');
        return;
    }
    
    playersGrid.innerHTML = '';
    playersGrid.className = `players-grid players-${gameState.players.length}`;
    
    gameState.players.forEach(player => {
        const playerCard = createPlayerCard(player);
        playersGrid.appendChild(playerCard);
    });
    
    console.log('üéÆ Players grid updated:', gameState.players.length, 'players');
}

function createPlayerCard(player) {
    const card = document.createElement('div');
    const isCurrentPlayer = player.id === gameState.playerId;
    const isCurrentTurn = player.id === gameState.currentTurnPlayer;
    const isJustifying = player.id === gameState.currentJustifyingPlayer;
    
    card.className = `player-card ${player.isAlive ? '' : 'eliminated'} ${isCurrentPlayer ? 'current-player' : ''} ${isCurrentTurn ? 'current-turn' : ''} ${isJustifying ? 'justifying' : ''}`;
    
    const characteristicOrder = ['profession', 'health', 'hobby', 'phobia', 'baggage', 'fact1', 'fact2'];
    
    let turnInfo = '';
    if (isCurrentTurn && gameState.gamePhase === 'revelation') {
        const requiredCards = getRequiredCardsForRound(gameState.currentRound);
        const revealedCards = player.cardsRevealedThisRound || 0;
        
        if (gameState.currentRound === 1) {
            if (revealedCards === 0) {
                turnInfo = '<div class="turn-info">üìã –†–∞—Å–∫—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é</div>';
            } else if (revealedCards === 1) {
                turnInfo = '<div class="turn-info">üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É</div>';
            }
        } else {
            if (revealedCards === 0) {
                turnInfo = '<div class="turn-info">üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É</div>';
            }
        }
    }
    
    card.innerHTML = `
        <div class="player-header">
            <div class="player-info">
                <div class="player-avatar-container">
                    <div class="player-avatar ${player.isAlive ? '' : 'eliminated-avatar'}">
                        ${player.name.charAt(0).toUpperCase()}
                    </div>
                </div>
                <div>
                    <div class="player-name ${player.isAlive ? '' : 'eliminated-name'}">
                        ${player.name}${player.isHost ? ' üëë' : ''}
                    </div>
                    ${isCurrentPlayer ? '<div class="player-status current">–í–´</div>' : ''}
                    ${isCurrentTurn ? '<div class="player-status turn">–í–∞—à —Ö–æ–¥!</div>' : ''}
                    ${isJustifying ? '<div class="player-status justifying">üé§ –û–ø—Ä–∞–≤–¥—ã–≤–∞–µ—Ç—Å—è</div>' : ''}
                    ${turnInfo}
                </div>
            </div>
        </div>
        
        <div class="characteristics">
            ${characteristicOrder.map(key => {
                if (!player.characteristics || !player.characteristics[key]) return '';
                
                const isRevealed = player.revealedCharacteristics && player.revealedCharacteristics.includes(key);
                const isOwnCard = isCurrentPlayer;
                
                let canReveal = false;
                if (isCurrentPlayer && isCurrentTurn && !isRevealed && gameState.gamePhase === 'revelation') {
                    const requiredCards = getRequiredCardsForRound(gameState.currentRound);
                    const revealedCards = player.cardsRevealedThisRound || 0;
                    
                    if (revealedCards < requiredCards) {
                        if (gameState.currentRound === 1) {
                            if (revealedCards === 0 && key === 'profession') {
                                canReveal = true;
                            } else if (revealedCards === 1 && key !== 'profession') {
                                canReveal = true;
                            }
                        } else {
                            canReveal = true;
                        }
                    }
                }
                
                return `<div class="characteristic ${isRevealed ? 'revealed' : (isOwnCard ? 'own-hidden' : 'hidden')} ${canReveal ? 'clickable' : ''}" 
                    ${canReveal ? `onclick="confirmRevealCharacteristic('${key}')"` : ''}>
                    <span class="characteristic-name">${translateCharacteristic(key)}:</span>
                    <span class="characteristic-value ${isOwnCard && !isRevealed ? 'own-characteristic' : ''}">
                        ${isRevealed ? player.characteristics[key] : (isOwnCard ? player.characteristics[key] : '???')}
                    </span>
                </div>`;
            }).join('')}
        </div>
        
        <div class="player-actions">
            ${gameState.gamePhase === 'voting' && !isCurrentPlayer && player.isAlive ? 
                getVotingButtons(player) : ''
            }
        </div>
    `;
    
    return card;
}

function confirmRevealCharacteristic(characteristic) {
    const player = gameState.players.find(p => p.id === gameState.playerId);
    if (!player || !player.characteristics) return;
    
    if (gameState.gamePhase !== 'revelation') {
        console.log('‚ùå Not revelation phase');
        return;
    }
    
    if (gameState.currentTurnPlayer !== gameState.playerId) {
        console.log('‚ùå Not my turn');
        return;
    }
    
    if (player.revealedCharacteristics && player.revealedCharacteristics.includes(characteristic)) {
        console.log('‚ùå Already revealed');
        return;
    }
    
    const requiredCards = getRequiredCardsForRound(gameState.currentRound);
    const revealedCards = player.cardsRevealedThisRound || 0;
    
    if (revealedCards >= requiredCards) {
        showNotification('–û—à–∏–±–∫–∞', '–í—ã —É–∂–µ —Ä–∞—Å–∫—Ä—ã–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ!');
        return;
    }
    
    if (gameState.currentRound === 1 && revealedCards === 0 && characteristic !== 'profession') {
        showNotification('–û—à–∏–±–∫–∞', '–í –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —Ä–∞—Å–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é!');
        return;
    }
    
    const characteristicName = translateCharacteristic(characteristic);
    const characteristicValue = player.characteristics[characteristic];
    
    let progressInfo = '';
    if (gameState.currentRound === 1) {
        if (revealedCards === 0) {
            progressInfo = '(–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞: –ü—Ä–æ—Ñ–µ—Å—Å–∏—è)';
        } else if (revealedCards === 1) {
            progressInfo = '(–ö–∞—Ä—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä)';
        }
    } else {
        progressInfo = '(–ö–∞—Ä—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä)';
    }
    
    document.getElementById('confirmCharacteristicName').textContent = characteristicName;
    document.getElementById('confirmCharacteristicValue').textContent = characteristicValue;
    
    const progressElement = document.getElementById('revealProgress');
    if (progressElement) {
        progressElement.textContent = progressInfo;
    }
    
    document.getElementById('confirmRevealModal').style.display = 'flex';
    window.characteristicToReveal = characteristic;
}

function confirmReveal() {
    if (window.characteristicToReveal) {
        console.log('üîç Revealing characteristic:', window.characteristicToReveal);
        socket.emit('reveal-characteristic', { characteristic: window.characteristicToReveal });
        document.getElementById('confirmRevealModal').style.display = 'none';
        window.characteristicToReveal = null;
    }
}

function cancelReveal() {
    document.getElementById('confirmRevealModal').style.display = 'none';
    window.characteristicToReveal = null;
}

function translateCharacteristic(key) {
    const translations = {
        'profession': '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è',
        'health': '–ó–¥–æ—Ä–æ–≤—å–µ',
        'hobby': '–•–æ–±–±–∏',
        'phobia': '–§–æ–±–∏—è',
        'baggage': '–ë–∞–≥–∞–∂',
        'fact1': '–§–∞–∫—Ç 1',
        'fact2': '–§–∞–∫—Ç 2'
    };
    
    return translations[key] || key;
}

function getVotingButtons(player) {
    const me = gameState.players.find(p => p.id === gameState.playerId);
    if (!me || !me.isAlive) return '';
    
    const hasVoted = me.hasVoted;
    const votedFor = me.votedFor;
    const canChange = gameState.canChangeVote[gameState.playerId] && !gameState.hasChangedVote;
    
    let buttonText = '–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å';
    let buttonClass = 'vote-player-btn';
    let isDisabled = false;
    
    if (hasVoted) {
        if (votedFor === player.id) {
            if (canChange) {
                buttonText = '–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å';
                buttonClass = 'vote-player-btn change-vote';
                isDisabled = true;
            } else {
                buttonText = '‚úÖ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–æ';
                buttonClass = 'vote-player-btn voted';
                isDisabled = true;
            }
        } else {
            if (canChange) {
                buttonText = '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞ —ç—Ç–æ–≥–æ';
                buttonClass = 'vote-player-btn change-vote';
            } else {
                buttonText = '–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å';
                buttonClass = 'vote-player-btn';
                isDisabled = true;
            }
        }
    }
    
    return `
        <div class="vote-section">
            <button class="${buttonClass}" 
                    onclick="voteForPlayer('${player.id}')" 
                    ${isDisabled ? 'disabled' : ''}>
                ${buttonText}
            </button>
        </div>
    `;
}

function voteForPlayer(targetId) {
    const me = gameState.players.find(p => p.id === gameState.playerId);
    if (!me || !me.isAlive) return;
    
    if (gameState.gamePhase !== 'voting') {
        showNotification('–û—à–∏–±–∫–∞', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
        return;
    }
    
    if (me.hasVoted && !gameState.canChangeVote[gameState.playerId]) {
        showNotification('–û—à–∏–±–∫–∞', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!');
        return;
    }
    
    if (me.hasVoted && gameState.canChangeVote[gameState.playerId]) {
        console.log('üîÑ Changing vote to:', targetId);
        socket.emit('change-vote', { targetId: targetId });
        gameState.hasChangedVote = true;
    } else {
        console.log('üó≥Ô∏è Voting for:', targetId);
        socket.emit('vote-player', { targetId: targetId });
    }
}

function finishJustification() {
    console.log('‚úÖ Finishing justification...');
    socket.emit('finish-justification');
}

function surrender() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å—Å—è –∏ –ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É?')) {
        console.log('üè≥Ô∏è Surrendering...');
        socket.emit('surrender');
    }
}

function changeMaxPlayers() {
    const select = document.getElementById('maxPlayersSelect');
    const newMaxPlayers = parseInt(select.value);
    
    console.log('üîß Changing max players to:', newMaxPlayers);
    socket.emit('change-max-players', { maxPlayers: newMaxPlayers });
}

function voteToSkipDiscussion() {
    if (gameState.gamePhase !== 'discussion') {
        showNotification('–û—à–∏–±–∫–∞', '–°–µ–π—á–∞—Å –Ω–µ —Ñ–∞–∑–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è');
        return;
    }
    
    if (gameState.mySkipVote) {
        showNotification('–û—à–∏–±–∫–∞', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –ø—Ä–æ–ø—É—Å–∫');
        return;
    }
    
    console.log('‚è≠Ô∏è Voting to skip discussion...');
    socket.emit('vote-skip-discussion');
}

function showNotification(title, message) {
    const modal = document.getElementById('notificationModal');
    const titleElement = document.getElementById('notificationTitle');
    const messageElement = document.getElementById('notificationMessage');
    
    if (modal && titleElement && messageElement) {
        titleElement.textContent = title;
        messageElement.textContent = message;
        modal.style.display = 'flex';
    } else {
        alert(`${title}: ${message}`);
    }
}

function closeNotificationModal() {
    const modal = document.getElementById('notificationModal');
    if (modal) {
        modal.style.display = 'none';
    }
}

document.addEventListener('DOMContentLoaded', function() {
    const playerNameInput = document.getElementById('playerNameInput');
    if (playerNameInput) {
        playerNameInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                joinGame();
            }
        });
    }
});

console.log('üéÆ Bunker Game Client Loaded');

// –ù–û–í–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
socket.on('skip-discussion-vote-update', function(data) {
    console.log('‚è≠Ô∏è Skip discussion vote update:', data);
    gameState.skipDiscussionVotes = data.votes;
    gameState.mySkipVote = data.hasVoted;
    updateGameActions();
});

socket.on('discussion-skipped', function(data) {
    console.log('‚è≠Ô∏è Discussion skipped:', data);
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.skipDiscussionVotes = 0;
    gameState.mySkipVote = false;
    updateGameDisplay();
    showNotification('–û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ', '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—è');
});

// –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∞–∑—ã
socket.on('phase-changed', function(data) {
    console.log('üîÑ Phase changed:', data);
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.currentTurnPlayer = data.currentTurnPlayer || null;
    
    // –î–û–ë–ê–í–õ–ï–ù–û: —Å–±—Ä–æ—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∞–∑—ã
    if (data.gamePhase !== 'discussion') {
        gameState.skipDiscussionVotes = 0;
        gameState.mySkipVote = false;
    }
    
    // –î–û–ë–ê–í–õ–ï–ù–û: —Å–±—Ä–æ—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∞–∑—ã
    if (data.gamePhase !== 'voting') {
        gameState.myVote = null;
        gameState.hasChangedVote = false;
    }
    
    updateGameDisplay();
});

// –ù–û–í–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∞–∑—ã –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–π
socket.on('justification-started', function(data) {
    console.log('‚öñÔ∏è Justification started:', data);
    gameState.gamePhase = 'justification';
    gameState.currentJustifyingPlayer = data.justifyingPlayer.id;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    updateGameDisplay();
    
    const isMyJustification = data.justifyingPlayer.id === gameState.playerId;
    const message = isMyJustification ? 
        '–í–∞—à–µ –≤—Ä–µ–º—è –¥–ª—è –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è! –£ –≤–∞—Å –µ—Å—Ç—å 2 –º–∏–Ω—É—Ç—ã.' : 
        `${data.justifyingPlayer.name} –æ–ø—Ä–∞–≤–¥—ã–≤–∞–µ—Ç—Å—è. –û—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏: ${data.remainingQueue}`;
    
    showNotification('–§–∞–∑–∞ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è', message);
});

socket.on('second-voting-started', function(data) {
    console.log('üó≥Ô∏è Second voting started:', data);
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.canChangeVote = data.canChangeVote;
    gameState.hasChangedVote = false;
    updateGameDisplay();
    
    showNotification('–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', '–ì–æ–ª–æ—Å–∞ –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä–µ–∂–Ω–∏–º–∏. –í—ã –º–æ–∂–µ—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ —Å–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –≥–æ–ª–æ—Å.');
});

socket.on('player-surrendered', function(data) {
    console.log('üè≥Ô∏è Player surrendered:', data);
    gameState.players = data.players;
    updatePlayersGrid();
    
    const isMe = data.surrenderedPlayer === gameState.playerName;
    const message = isMe ? '–í—ã —Å–¥–∞–ª–∏—Å—å –∏ –ø–æ–∫–∏–Ω—É–ª–∏ –∏–≥—Ä—É.' : `${data.surrenderedPlayer} —Å–¥–∞–ª—Å—è –∏ –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É.`;
    
    showNotification('–ò–≥—Ä–æ–∫ —Å–¥–∞–ª—Å—è', message);
});

function updateTimerDisplay() {
    const timerElement = document.getElementById('timerDisplay');
    if (timerElement && gameState.timeLeft >= 0) {
        const minutes = Math.floor(gameState.timeLeft / 60);
        const seconds = gameState.timeLeft % 60;
        timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }
}

function updatePlayersGrid() {
    const playersGrid = document.getElementById('playersGrid');
    
    if (!playersGrid) {
        console.error('‚ùå playersGrid element not found');
        return;
    }
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Ç–∫—É
    playersGrid.innerHTML = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∫–∏
    playersGrid.className = `players-grid players-${gameState.players.length}`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
    gameState.players.forEach(player => {
        const playerCard = createPlayerCard(player);
        playersGrid.appendChild(playerCard);
    });
    
    console.log('üéÆ Players grid updated:', gameState.players.length, 'players');
}

// –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
function voteToSkipDiscussion() {
    if (gameState.gamePhase !== 'discussion') {
        showNotification('–û—à–∏–±–∫–∞', '–°–µ–π—á–∞—Å –Ω–µ —Ñ–∞–∑–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è');
        return;
    }
    
    if (gameState.mySkipVote) {
        showNotification('–û—à–∏–±–∫–∞', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –ø—Ä–æ–ø—É—Å–∫');
        return;
    }
    
    console.log('‚è≠Ô∏è Voting to skip discussion...');
    socket.emit('vote-skip-discussion');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(title, message) {
    const modal = document.getElementById('notificationModal');
    const titleElement = document.getElementById('notificationTitle');
    const messageElement = document.getElementById('notificationMessage');
    
    if (modal && titleElement && messageElement) {
        titleElement.textContent = title;
        messageElement.textContent = message;
        modal.style.display = 'flex';
    } else {
        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º alert –µ—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        alert(`${title}: ${message}`);
    }
}

function closeNotificationModal() {
    const modal = document.getElementById('notificationModal');
    if (modal) {
        modal.style.display = 'none';
    }
}

// –î–û–ë–ê–í–õ–Ø–ï–ú –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
socket.on('reveal-characteristic', function(data) {
    console.log('üîç Revealing characteristic:', data);
    
    const player = gameState.players.find(p => p.id === gameState.playerId);
    if (!player) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à —Ö–æ–¥
    if (gameState.currentTurnPlayer !== gameState.playerId) {
        showNotification('–û—à–∏–±–∫–∞', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!');
        return;
    }
    
    if (gameState.gamePhase !== 'revelation') {
        showNotification('–û—à–∏–±–∫–∞', '–°–µ–π—á–∞—Å –Ω–µ —Ñ–∞–∑–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è!');
        return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    socket.emit('reveal-characteristic', data);
});

// –ò–°–ü–†–ê–í–õ–Ø–ï–ú –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
socket.on('timer-update', function(data) {
    gameState.timeLeft = data.timeLeft;
    gameState.currentTurnPlayer = data.currentTurnPlayer;
    updateTimerDisplay();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
    if (gameState.gamePhase === 'revelation') {
        updateGameDisplay();
    }
});

// –û–ë–ù–û–í–õ–Ø–ï–ú –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Ñ–∞–∑—ã
socket.on('phase-changed', function(data) {
    console.log('üîÑ Phase changed:', data);
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.currentTurnPlayer = data.currentTurnPlayer || null;
    
    // –î–û–ë–ê–í–õ–ï–ù–û: —Å–±—Ä–æ—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∞–∑—ã
    if (data.gamePhase !== 'discussion') {
        gameState.skipDiscussionVotes = 0;
        gameState.mySkipVote = false;
    }
    
    // –î–û–ë–ê–í–õ–ï–ù–û: —Å–±—Ä–æ—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∞–∑—ã
    if (data.gamePhase !== 'voting') {
        gameState.myVote = null;
        gameState.hasChangedVote = false;
    }
    
    updateGameDisplay();
});