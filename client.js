console.log('üéÆ Bunker Game Client Loading...');

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
    playerId: null,
    playerName: '',
    isHost: false,
    players: [],
    gamePhase: 'login',
    serverGameState: 'lobby',
    currentRound: 1,
    timeLeft: 0,
    votingResults: {},
    myVote: null,
    timer: null,
    maxPlayers: 12,
    currentTurnPlayer: null
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO
const socket = io();

// === SOCKET –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
socket.on('connect', function() {
    console.log('‚úÖ Connected to server:', socket.id);
    gameState.playerId = socket.id;
    updatePlayerCount();
});

socket.on('disconnect', function() {
    console.log('‚ùå Disconnected from server');
    showNotification('–û—Ç–∫–ª—é—á–µ–Ω–∏–µ', '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ');
});

socket.on('room-state', function(data) {
    console.log('üìä Room state received:', data);
    updateGameState(data);
});

socket.on('join-confirmed', function(data) {
    console.log('‚úÖ Join confirmed:', data);
    gameState.playerId = data.playerId;
    gameState.playerName = data.playerName;
    gameState.isHost = data.isHost;
    gameState.maxPlayers = data.maxPlayers || 12;
    showLobbyScreen();
});

socket.on('player-joined', function(data) {
    console.log('üëã Player joined:', data);
    gameState.players = data.players;
    if (data.maxPlayers) {
        gameState.maxPlayers = data.maxPlayers;
    }
    updatePlayersDisplay();
    updatePlayerCount();
});

socket.on('max-players-changed', function(data) {
    console.log('üîß Max players changed:', data);
    gameState.maxPlayers = data.maxPlayers;
    gameState.players = data.players;
    updatePlayersDisplay();
    updateMaxPlayersSelector();
});

socket.on('player-left', function(data) {
    console.log('üëã Player left:', data);
    gameState.players = data.players;
    gameState.serverGameState = data.gameState;
    updatePlayersDisplay();
    updatePlayerCount();
    
    const me = gameState.players.find(p => p.id === gameState.playerId);
    if (me) {
        gameState.isHost = me.isHost;
        updateHostControls();
    }
});

socket.on('game-started', function(data) {
    console.log('üöÄ Game started:', data);
    gameState.players = data.players;
    gameState.serverGameState = data.gameState;
    gameState.gamePhase = data.gamePhase;
    gameState.currentRound = data.currentRound;
    gameState.timeLeft = data.timeLeft;
    showGameScreen();
});

// –ù–û–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
socket.on('player-turn-started', function(data) {
    console.log('üéØ Player turn started:', data);
    gameState.gamePhase = data.gamePhase;
    gameState.currentTurnPlayer = data.currentTurnPlayer;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    updateGameDisplay();
});

socket.on('phase-changed', function(data) {
    console.log('üîÑ Phase changed:', data);
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.currentTurnPlayer = data.currentTurnPlayer || null; // –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º currentTurnPlayer
    updateGameDisplay();
});

socket.on('timer-update', function(data) {
    gameState.timeLeft = data.timeLeft;
    gameState.currentTurnPlayer = data.currentTurnPlayer;
    updateTimerDisplay();
});

socket.on('vote-update', function(data) {
    console.log('üó≥Ô∏è Vote update:', data);
    gameState.players = data.players;
    gameState.votingResults = data.votingResults;
    updatePlayersGrid();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    if (data.votedCount !== undefined && data.totalPlayers !== undefined) {
        const voteProgress = document.getElementById('voteProgress');
        if (voteProgress) {
            voteProgress.textContent = `–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: ${data.votedCount}/${data.totalPlayers}`;
        }
    }
});

socket.on('characteristic-revealed', function(data) {
    console.log('üîç Characteristic revealed:', data);
    gameState.players = data.players;
    updatePlayersGrid();
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
    const isMe = data.playerId === gameState.playerId;
    const playerName = isMe ? '–í—ã' : data.playerName;
    
    showNotification('–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∞', 
        `${playerName} —Ä–∞—Å–∫—Ä—ã–ª${isMe ? '–∏' : ''}: ${translateCharacteristic(data.characteristic)} - ${data.value}`);
});

socket.on('round-results', function(data) {
    console.log('üìä Round results:', data);
    gameState.players = data.players;
    
    if (data.eliminatedPlayer) {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        const eliminatedPlayer = gameState.players.find(p => p.name === data.eliminatedPlayer);
        const isMe = eliminatedPlayer && eliminatedPlayer.id === gameState.playerId;
        const displayName = isMe ? '–í—ã' : data.eliminatedPlayer;
        
        showNotification('–ò–≥—Ä–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω', `${displayName} ${isMe ? '–±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã' : '–±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω'} –∏–∑ –±—É–Ω–∫–µ—Ä–∞!`);
    } else {
        showNotification('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è', '–ù–∏–∫—Ç–æ –Ω–µ –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ');
    }
    
    updatePlayersGrid();
});

socket.on('new-round', function(data) {
    console.log('üîÑ New round:', data);
    gameState.currentRound = data.currentRound;
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.myVote = null;
    gameState.currentTurnPlayer = null;
    updateGameDisplay();
});

socket.on('game-ended', function(data) {
    console.log('üèÅ Game ended:', data);
    gameState.players = data.players;
    showResultsScreen(data.winners);
});

socket.on('game-reset', function(data) {
    console.log('üîÑ Game reset:', data);
    gameState.players = data.players;
    gameState.serverGameState = data.gameState;
    gameState.gamePhase = 'lobby';
    gameState.currentRound = 1;
    gameState.myVote = null;
    gameState.currentTurnPlayer = null;
    showLobbyScreen();
});

socket.on('error', function(error) {
    console.error('‚ùå Server error:', error);
    showNotification('–û—à–∏–±–∫–∞', error);
});

// === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
function joinGame() {
    const playerName = document.getElementById('playerNameInput').value.trim();
    
    if (!playerName) {
        showNotification('–û—à–∏–±–∫–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
        return;
    }
    
    if (playerName.length < 2) {
        showNotification('–û—à–∏–±–∫–∞', '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
        return;
    }
    
    if (!socket.connected) {
        showNotification('–û—à–∏–±–∫–∞', '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        return;
    }
    
    console.log('üéØ Joining game as:', playerName);
    socket.emit('join-game', { playerName });
}

function startGame() {
    if (!gameState.isHost) {
        showNotification('–û—à–∏–±–∫–∞', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É');
        return;
    }
    
    socket.emit('start-game');
}

// –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞
function startRound() {
    if (!gameState.isHost) {
        showNotification('–û—à–∏–±–∫–∞', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥');
        return;
    }
    
    // –î–û–ë–ê–í–õ–ï–ù–û: –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ª—É—á—à–µ–≥–æ UX
    const roundActionsElement = document.getElementById('roundActions');
    if (roundActionsElement) {
        roundActionsElement.style.display = 'none';
    }
    
    console.log('üöÄ Starting round...');
    socket.emit('start-round');
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–≤
function showLobbyScreen() {
    document.getElementById('loginScreen').style.display = 'none';
    document.getElementById('lobbyScreen').style.display = 'block';
    document.getElementById('gameScreen').style.display = 'none';
    document.getElementById('resultsScreen').style.display = 'none';
    
    updatePlayersDisplay();
    updatePlayerCount();
    updateHostControls();
}

function showGameScreen() {
    document.getElementById('loginScreen').style.display = 'none';
    document.getElementById('lobbyScreen').style.display = 'none';
    document.getElementById('gameScreen').style.display = 'block';
    document.getElementById('resultsScreen').style.display = 'none';
    
    updateGameDisplay();
    updatePlayersGrid();
}

function showResultsScreen(winners) {
    document.getElementById('loginScreen').style.display = 'none';
    document.getElementById('lobbyScreen').style.display = 'none';
    document.getElementById('gameScreen').style.display = 'none';
    document.getElementById('resultsScreen').style.display = 'block';
    
    const winnersList = document.getElementById('winnersList');
    winnersList.innerHTML = '';
    
    winners.forEach(winner => {
        const li = document.createElement('li');
        const isMe = winner.id === gameState.playerId;
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        li.textContent = isMe ? `${winner.name} (–í–´)` : winner.name;
        li.className = 'host';
        winnersList.appendChild(li);
    });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function updateGameState(data) {
    gameState.players = data.players || [];
    gameState.serverGameState = data.gameState;
    gameState.gamePhase = data.gamePhase;
    gameState.currentRound = data.currentRound || 1;
    gameState.timeLeft = data.timeLeft || 0;
    gameState.currentTurnPlayer = data.currentTurnPlayer;
    
    updatePlayerCount();
    
    if (gameState.players.length > 0) {
        const me = gameState.players.find(p => p.id === gameState.playerId);
        if (me) {
            gameState.isHost = me.isHost;
        }
    }
}

function updatePlayersDisplay() {
    const playersList = document.getElementById('playersList');
    const currentPlayersCount = document.getElementById('currentPlayersCount');
    const maxPlayersCount = document.getElementById('maxPlayersCount');
    
    if (playersList) {
        playersList.innerHTML = '';
        
        gameState.players.forEach(player => {
            const li = document.createElement('li');
            const isMe = player.id === gameState.playerId;
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è
            li.textContent = `${player.name}${player.isHost ? ' üëë' : ''}`;
            li.className = player.isHost ? 'host' : '';
            playersList.appendChild(li);
        });
    }
    
    if (currentPlayersCount) {
        currentPlayersCount.textContent = gameState.players.length;
    }
    
    if (maxPlayersCount) {
        maxPlayersCount.textContent = gameState.maxPlayers || 12;
    }
    
    updateHostControls();
}

function updatePlayerCount() {
    const playerCountElement = document.getElementById('playerCount');
    if (playerCountElement) {
        playerCountElement.textContent = gameState.players.length;
    }
}

function updateHostControls() {
    const startBtn = document.getElementById('startGameBtn');
    const waitingInfo = document.getElementById('waitingInfo');
    const maxPlayersSelector = document.getElementById('maxPlayersSelector');
    
    if (gameState.isHost) {
        if (startBtn) {
            startBtn.style.display = 'block';
            startBtn.disabled = gameState.players.length < 2;
            startBtn.textContent = gameState.players.length < 2 ? 
                '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É (–º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞)' : 
                `–ù–∞—á–∞—Ç—å –∏–≥—Ä—É (${gameState.players.length}/${gameState.maxPlayers || 12})`;
        }
        if (waitingInfo) {
            waitingInfo.style.display = 'none';
        }
        if (maxPlayersSelector) {
            maxPlayersSelector.style.display = 'block';
        }
    } else {
        if (startBtn) {
            startBtn.style.display = 'none';
        }
        if (waitingInfo) {
            waitingInfo.style.display = 'block';
        }
        if (maxPlayersSelector) {
            maxPlayersSelector.style.display = 'none';
        }
    }
}

function changeMaxPlayers() {
    const selector = document.getElementById('maxPlayersSelect');
    const maxPlayers = parseInt(selector.value);
    
    console.log('üîß Changing max players to:', maxPlayers);
    socket.emit('change-max-players', { maxPlayers });
}

function updateMaxPlayersSelector() {
    const selector = document.getElementById('maxPlayersSelect');
    if (selector && gameState.maxPlayers) {
        selector.value = gameState.maxPlayers;
    }
}

function updateGameDisplay() {
    const currentRoundElement = document.getElementById('currentRound');
    const gameStatusElement = document.getElementById('gameStatus');
    const phaseDisplayElement = document.getElementById('phaseDisplay');
    const gameActionsElement = document.getElementById('gameActions');
    
    if (currentRoundElement) {
        currentRoundElement.textContent = gameState.currentRound;
    }
    
    if (gameStatusElement) {
        gameStatusElement.textContent = getGameStatusText();
    }
    
    if (phaseDisplayElement) {
        phaseDisplayElement.textContent = getPhaseDisplayText();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã
    if (gameActionsElement) {
        updateGameActions();
    }
    
    updateTimerDisplay();
    updatePlayersGrid();
}

function getGameStatusText() {
    switch (gameState.gamePhase) {
        case 'preparation': 
            return '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞—É–Ω–¥—É';
        case 'revelation': 
            const currentPlayer = gameState.players.find(p => p.id === gameState.currentTurnPlayer);
            if (currentPlayer) {
                const isMyTurn = currentPlayer.id === gameState.playerId;
                return `–•–æ–¥ –∏–≥—Ä–æ–∫–∞: ${isMyTurn ? '–í–∞—à —Ö–æ–¥' : currentPlayer.name}`;
            }
            return '–†–∞—Å–∫—Ä—ã—Ç–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫';
        case 'discussion': 
            return '–§–∞–∑–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è';
        case 'voting': 
            return '–§–∞–∑–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è';
        case 'results': 
            return '–ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ —Ä–∞—É–Ω–¥–∞';
        case 'finished': 
            return '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
        default: 
            return '–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...';
    }
}

function getPhaseDisplayText() {
    switch (gameState.gamePhase) {
        case 'preparation': return '–ü–û–î–ì–û–¢–û–í–ö–ê';
        case 'revelation': return '–†–ê–°–ö–†–´–¢–ò–ï';
        case 'discussion': return '–û–ë–°–£–ñ–î–ï–ù–ò–ï';
        case 'voting': return '–ì–û–õ–û–°–û–í–ê–ù–ò–ï';
        case 'results': return '–†–ï–ó–£–õ–¨–¢–ê–¢–´';
        default: return '–û–ñ–ò–î–ê–ù–ò–ï';
    }
}

function updateGameActions() {
    const gameActionsElement = document.getElementById('gameActions');
    const roundActionsElement = document.getElementById('roundActions');
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–æ–π –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
    if (roundActionsElement) {
        if (gameState.gamePhase === 'preparation' && gameState.isHost) {
            roundActionsElement.style.display = 'block';
        } else {
            roundActionsElement.style.display = 'none';
        }
    }
    
    // –£–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤–Ω–∏–∑—É (–ë–ï–ó –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞)
    if (gameState.gamePhase === 'voting') {
        const alivePlayers = gameState.players.filter(p => p.isAlive);
        const votedPlayers = alivePlayers.filter(p => p.hasVoted);
        
        gameActionsElement.innerHTML = `
            <div class="vote-progress">
                <span id="voteProgress">–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: ${votedPlayers.length}/${alivePlayers.length}</span>
            </div>
        `;
    } else {
        gameActionsElement.innerHTML = `
            <button id="skipPhaseBtn" onclick="voteToSkip()" class="action-btn" disabled>‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–∑—É</button>
            <button id="showActionCardsBtn" onclick="showActionCard()" class="action-btn" disabled>üÉè –ö–∞—Ä—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π</button>
        `;
    }
}

function updateTimerDisplay() {
    const timerDisplay = document.getElementById('timerDisplay');
    if (timerDisplay) {
        if (gameState.timeLeft > 0) {
            const minutes = Math.floor(gameState.timeLeft / 60);
            const seconds = gameState.timeLeft % 60;
            timerDisplay.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
        } else {
            timerDisplay.textContent = '0:00';
        }
    }
}

function updatePlayersGrid() {
    const playersGrid = document.getElementById('playersGrid');
    if (!playersGrid) return;
    
    playersGrid.innerHTML = '';
    playersGrid.className = 'players-grid';
    
    const playerCount = gameState.players.length;
    playersGrid.classList.add(`players-${playerCount}`);
    
    gameState.players.forEach(player => {
        if (player.characteristics) {
            const playerCard = createPlayerCard(player);
            playersGrid.appendChild(playerCard);
        }
    });
}

function getPlayerDisplayName(player, isCurrentPlayer) {
    // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞
    return player.name;
}

function createPlayerCard(player) {
    const card = document.createElement('div');
    const isCurrentPlayer = player.id === gameState.playerId;
    const isCurrentTurn = player.id === gameState.currentTurnPlayer;
    
    card.className = `player-card ${player.isAlive ? '' : 'eliminated'} ${isCurrentPlayer ? 'current-player' : ''} ${isCurrentTurn ? 'current-turn' : ''}`;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ—Ä—è–¥–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å –¥–≤—É–º—è —Ñ–∞–∫—Ç–∞–º–∏ –≤–Ω–∏–∑—É
    const characteristicOrder = ['profession', 'health', 'hobby', 'phobia', 'baggage', 'fact1', 'fact2'];
    
    card.innerHTML = `
        <div class="player-header">
            <div class="player-info">
                <div class="player-avatar-container">
                    <div class="player-avatar ${player.isAlive ? '' : 'eliminated-avatar'}">
                        ${player.name.charAt(0).toUpperCase()}
                    </div>
                </div>
                <div>
                    <div class="player-name ${player.isAlive ? '' : 'eliminated-name'}">
                        ${player.name}${player.isHost ? ' üëë' : ''}
                    </div>
                    ${isCurrentPlayer ? '<div class="player-status current">–í–´</div>' : ''}
                    ${isCurrentTurn ? '<div class="player-status turn">–í–∞—à —Ö–æ–¥!</div>' : ''}
                </div>
            </div>
        </div>
        
        <div class="characteristics">
            ${characteristicOrder.map(key => {
                if (!player.characteristics[key]) return '';
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ª–æ–≥–∏–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                const isRevealed = player.revealedCharacteristics && player.revealedCharacteristics.includes(key);
                const isOwnCard = isCurrentPlayer;
                const canReveal = isCurrentTurn && !isRevealed && gameState.gamePhase === 'revelation';
                
                return `<div class="characteristic ${isRevealed ? 'revealed' : (isOwnCard ? 'own-hidden' : 'hidden')} ${canReveal ? 'clickable' : ''}" 
                    ${canReveal ? `onclick="confirmRevealCharacteristic('${key}')"` : ''}>
                    <span class="characteristic-name">${translateCharacteristic(key)}:</span>
                    <span class="characteristic-value ${isOwnCard && !isRevealed ? 'own-characteristic' : ''}">
                        ${isRevealed ? player.characteristics[key] : (isOwnCard ? player.characteristics[key] : '???')}
                    </span>
                    ${canReveal ? '<div class="reveal-hint">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è</div>' : ''}
                </div>`;
            }).join('')}
        </div>
        
        <div class="player-actions">
            ${gameState.gamePhase === 'voting' && !isCurrentPlayer && player.isAlive && !player.hasVoted ? 
                `<div class="vote-section">
                    <button class="vote-player-btn ${gameState.myVote === player.id ? 'voted' : ''}" onclick="voteForPlayer('${player.id}')">
                        ${gameState.myVote === player.id ? '‚úÖ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–æ' : 'üìã –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å'}
                    </button>
                    <div class="voters-list">
                        –ì–æ–ª–æ—Å–æ–≤: ${player.votes || 0}
                    </div>
                </div>` : ''
            }
        </div>
    `;
    
    return card;
}

function translateCharacteristic(key) {
    const translations = {
        profession: '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è',
        health: '–ó–¥–æ—Ä–æ–≤—å–µ',
        hobby: '–•–æ–±–±–∏',
        phobia: '–§–æ–±–∏—è',
        baggage: '–ë–∞–≥–∞–∂',
        fact1: '–§–∞–∫—Ç 1',
        fact2: '–§–∞–∫—Ç 2'
    };
    return translations[key] || key;
}

// –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
function confirmRevealCharacteristic(characteristic) {
    const player = gameState.players.find(p => p.id === gameState.playerId);
    if (!player || !player.characteristics) return;
    
    const characteristicName = translateCharacteristic(characteristic);
    const characteristicValue = player.characteristics[characteristic];
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    document.getElementById('confirmCharacteristicName').textContent = characteristicName;
    document.getElementById('confirmCharacteristicValue').textContent = characteristicValue;
    document.getElementById('confirmRevealModal').style.display = 'flex';
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
    window.characteristicToReveal = characteristic;
}

function confirmReveal() {
    if (window.characteristicToReveal) {
        socket.emit('reveal-characteristic', { characteristic: window.characteristicToReveal });
        document.getElementById('confirmRevealModal').style.display = 'none';
        window.characteristicToReveal = null;
    }
}

function cancelReveal() {
    document.getElementById('confirmRevealModal').style.display = 'none';
    window.characteristicToReveal = null;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
document.addEventListener('DOMContentLoaded', function() {
    const playerNameInput = document.getElementById('playerNameInput');
    if (playerNameInput) {
        playerNameInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                joinGame();
            }
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –∏–≥—Ä–æ–∫–∞
function voteForPlayer(playerId) {
    if (gameState.gamePhase !== 'voting') {
        showNotification('–û—à–∏–±–∫–∞', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
        return;
    }
    
    if (gameState.myVote) {
        showNotification('–û—à–∏–±–∫–∞', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!');
        return;
    }
    
    gameState.myVote = playerId;
    socket.emit('vote-player', { targetId: playerId });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    updatePlayersGrid();
}

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
function voteToSkip() {
    showNotification('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–∞–∑—ã –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
}

function showActionCard() {
    showNotification('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ö–∞—Ä—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã');
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
function closeCharacteristicModal() {
    document.getElementById('characteristicModal').style.display = 'none';
}

function closeNotificationModal() {
    document.getElementById('notificationModal').style.display = 'none';
}

function showNotification(title, message) {
    document.getElementById('notificationTitle').textContent = title;
    document.getElementById('notificationMessage').textContent = message;
    document.getElementById('notificationModal').style.display = 'flex';
}

console.log('üéÆ Bunker Game Client Loaded');