console.log('üéÆ Bunker Game Client Loading...');

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
    playerId: null,
    playerName: '',
    isHost: false,
    players: [],
    gamePhase: 'main',
    serverGameState: 'lobby',
    currentRound: 1,
    timeLeft: 0,
    votingResults: {},
    myVote: null,
    timer: null,
    maxPlayers: 8,
    currentTurnPlayer: null,
    currentJustifyingPlayer: null,
    canChangeVote: {},
    hasChangedVote: false,
    cardsRevealedThisRound: 0,
    requiredCardsThisRound: 1,
    skipDiscussionVotes: 0,
    mySkipVote: false,
    startRoundVotes: 0,
    myStartRoundVote: false,
    roomCode: null,
    roomLink: null
};

// Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
const socket = io({
    transports: ['websocket', 'polling'],
    timeout: 10000,
    reconnection: true,
    reconnectionAttempts: 10,
    reconnectionDelay: 1000
});

// === –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–ú–ù–ê–¢–ê–ú–ò ===

function createGame() {
    console.log('üÜï Creating new game');
    
    const nameInput = document.getElementById('playerNameInput');
    const playerName = nameInput.value.trim();
    
    if (!playerName) {
        showNotification('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è!');
        return;
    }
    
    if (playerName.length < 2 || playerName.length > 20) {
        showNotification('–û—à–∏–±–∫–∞', '–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤!');
        return;
    }
    
    if (!socket.connected) {
        showNotification('–û—à–∏–±–∫–∞', '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        return;
    }
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    const createBtn = document.getElementById('createGameBtn');
    if (createBtn) {
        createBtn.disabled = true;
        createBtn.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã...';
    }
    
    socket.emit('create-room', { playerName: playerName });
}

function joinGame() {
    console.log('üö™ Joining existing game');
    
    const nameInput = document.getElementById('playerNameInput');
    const roomCodeInput = document.getElementById('roomCodeInput');
    
    const playerName = nameInput.value.trim();
    const roomCode = roomCodeInput.value.trim().toUpperCase();
    
    if (!playerName) {
        showNotification('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è!');
        return;
    }
    
    if (playerName.length < 2 || playerName.length > 20) {
        showNotification('–û—à–∏–±–∫–∞', '–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤!');
        return;
    }
    
    if (!roomCode || roomCode.length !== 6) {
        showNotification('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã (6 —Å–∏–º–≤–æ–ª–æ–≤)!');
        return;
    }
    
    if (!socket.connected) {
        showNotification('–û—à–∏–±–∫–∞', '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        return;
    }
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    const joinBtn = document.getElementById('joinGameBtn');
    if (joinBtn) {
        joinBtn.disabled = true;
        joinBtn.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
    }
    
    socket.emit('join-room', { 
        playerName: playerName,
        roomCode: roomCode 
    });
}

function leaveRoom() {
    console.log('üö™ Leaving room');
    
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É?')) {
        socket.emit('leave-room');
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        gameState.roomCode = null;
        gameState.roomLink = null;
        gameState.players = [];
        gameState.isHost = false;
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        showMainScreen();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º URL
        window.history.pushState({}, '', '/');
    }
}

function copyRoomCode() {
    if (gameState.roomCode) {
        navigator.clipboard.writeText(gameState.roomCode).then(() => {
            showNotification('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ', '–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        }).catch(() => {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            const textArea = document.createElement('textarea');
            textArea.value = gameState.roomCode;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            showNotification('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ', '–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
        });
    }
}

function copyRoomLink() {
    if (gameState.roomLink) {
        navigator.clipboard.writeText(gameState.roomLink).then(() => {
            showNotification('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ', '–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–º–Ω–∞—Ç—É —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        }).catch(() => {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            const textArea = document.createElement('textarea');
            textArea.value = gameState.roomLink;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            showNotification('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ', '–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
        });
    }
}

// === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô SOCKET.IO ===

socket.on('connect', function() {
    console.log('üåê Connected to server');
    console.log('üîó Socket ID:', socket.id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    const path = window.location.pathname;
    const roomCodeFromUrl = path.substring(1); // –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–ª–µ—à
    
    if (roomCodeFromUrl && roomCodeFromUrl.length === 6) {
        // –ï—Å–ª–∏ –≤ URL –µ—Å—Ç—å –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∫–æ–¥–æ–º
        showMainScreen();
        const roomCodeInput = document.getElementById('roomCodeInput');
        if (roomCodeInput) {
            roomCodeInput.value = roomCodeFromUrl.toUpperCase();
        }
    } else {
        showMainScreen();
    }
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
    const createBtn = document.getElementById('createGameBtn');
    const joinBtn = document.getElementById('joinGameBtn');
    
    if (createBtn && createBtn.disabled) {
        createBtn.disabled = false;
        createBtn.textContent = 'üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É';
    }
    
    if (joinBtn && joinBtn.disabled) {
        joinBtn.disabled = false;
        joinBtn.textContent = 'üö™ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è';
    }
});

socket.on('connect_error', function(error) {
    console.error('‚ùå Connection error:', error);
    showNotification('–û—à–∏–±–∫–∞', '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
});

socket.on('disconnect', function(reason) {
    console.log('‚ùå Disconnected from server:', reason);
    showNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ', '–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
});

socket.on('error', function(errorMessage) {
    console.error('‚ùå Server error:', errorMessage);
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    const createBtn = document.getElementById('createGameBtn');
    const joinBtn = document.getElementById('joinGameBtn');
    
    if (createBtn) {
        createBtn.disabled = false;
        createBtn.textContent = 'üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É';
    }
    
    if (joinBtn) {
        joinBtn.disabled = false;
        joinBtn.textContent = 'üö™ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è';
    }
    
    showNotification('–û—à–∏–±–∫–∞', errorMessage);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–æ–º–Ω–∞—Ç
socket.on('room-created', function(data) {
    console.log('‚úÖ Room created:', data);
    
    gameState.playerId = data.playerId;
    gameState.playerName = data.playerName;
    gameState.isHost = true;
    gameState.roomCode = data.roomCode;
    gameState.roomLink = data.roomLink;
    gameState.maxPlayers = data.maxPlayers;
    gameState.players = data.players;
    gameState.gamePhase = 'lobby';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º URL
    window.history.pushState({}, '', `/${data.roomCode}`);
    
    showLobbyScreen();
});

socket.on('room-joined', function(data) {
    console.log('‚úÖ Room joined:', data);
    
    gameState.playerId = data.playerId;
    gameState.playerName = data.playerName;
    gameState.isHost = data.isHost;
    gameState.roomCode = data.roomCode;
    gameState.roomLink = data.roomLink;
    gameState.maxPlayers = data.maxPlayers;
    gameState.players = data.players;
    gameState.gamePhase = 'lobby';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º URL –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
    if (window.location.pathname !== `/${data.roomCode}`) {
        window.history.pushState({}, '', `/${data.roomCode}`);
    }
    
    showLobbyScreen();
});

socket.on('player-joined', function(data) {
    console.log('üëã Player joined:', data);
    gameState.players = data.players;
    gameState.maxPlayers = data.maxPlayers;
    gameState.startRoundVotes = data.startRoundVotes || 0;
    updateLobbyDisplay();
});

socket.on('player-left', function(data) {
    console.log('üëã Player left:', data);
    gameState.players = data.players;
    gameState.serverGameState = data.gameState;
    
    // –ï—Å–ª–∏ –º—ã —Å—Ç–∞–ª–∏ —Ö–æ—Å—Ç–æ–º
    if (data.newHost === gameState.playerId) {
        gameState.isHost = true;
    }
    
    updateLobbyDisplay();
});

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
// (game-started, phase-changed, characteristic-revealed, –∏ —Ç.–¥.)

// === –§–£–ù–ö–¶–ò–ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –≠–ö–†–ê–ù–û–í ===

function showScreen(screenId) {
    const screens = document.querySelectorAll('.screen');
    screens.forEach(screen => {
        screen.style.display = 'none';
    });
    
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.style.display = 'block';
    }
}

function showMainScreen() {
    console.log('üì± Showing main screen');
    showScreen('mainScreen');
    
    const nameInput = document.getElementById('playerNameInput');
    if (nameInput) {
        nameInput.focus();
    }
}

function showLobbyScreen() {
    console.log('üì± Showing lobby screen');
    showScreen('lobbyScreen');
    updateLobbyDisplay();
}

function showGameScreen() {
    console.log('üì± Showing game screen');
    showScreen('gameScreen');
    updateGameDisplay();
}

function updateLobbyDisplay() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã
    const roomCodeDisplay = document.getElementById('roomCodeDisplay');
    const roomLinkDisplay = document.getElementById('roomLinkDisplay');
    
    if (roomCodeDisplay && gameState.roomCode) {
        roomCodeDisplay.textContent = gameState.roomCode;
    }
    
    if (roomLinkDisplay && gameState.roomLink) {
        roomLinkDisplay.textContent = gameState.roomLink;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤
    const currentPlayersCount = document.getElementById('currentPlayersCount');
    const maxPlayersCount = document.getElementById('maxPlayersCount');
    const playersList = document.getElementById('playersList');
    const startGameBtn = document.getElementById('startGameBtn');
    const waitingInfo = document.getElementById('waitingInfo');
    const maxPlayersSelector = document.getElementById('maxPlayersSelector');
    
    if (currentPlayersCount) {
        currentPlayersCount.textContent = gameState.players.length;
    }
    
    if (maxPlayersCount) {
        maxPlayersCount.textContent = gameState.maxPlayers;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    if (playersList) {
        playersList.innerHTML = '';
        gameState.players.forEach(player => {
            const li = document.createElement('li');
            li.className = player.isHost ? 'host' : '';
            li.textContent = `${player.name}${player.isHost ? ' (–•–æ—Å—Ç)' : ''}`;
            playersList.appendChild(li);
        });
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    if (gameState.isHost) {
        if (startGameBtn) {
            startGameBtn.style.display = 'block';
            startGameBtn.disabled = gameState.players.length < 2;
            
            if (gameState.players.length < 2) {
                startGameBtn.textContent = '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É (–º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞)';
            } else {
                startGameBtn.textContent = '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É';
            }
        }
        if (waitingInfo) {
            waitingInfo.style.display = 'none';
        }
        if (maxPlayersSelector) {
            maxPlayersSelector.style.display = 'block';
        }
    } else {
        if (startGameBtn) {
            startGameBtn.style.display = 'none';
        }
        if (waitingInfo) {
            waitingInfo.style.display = 'block';
        }
        if (maxPlayersSelector) {
            maxPlayersSelector.style.display = 'none';
        }
    }
    
    const maxPlayersSelect = document.getElementById('maxPlayersSelect');
    if (maxPlayersSelect) {
        maxPlayersSelect.value = gameState.maxPlayers;
    }
}

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===

document.addEventListener('DOMContentLoaded', function() {
    console.log('üì± DOM loaded, initializing...');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    showMainScreen();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
    const playerNameInput = document.getElementById('playerNameInput');
    const roomCodeInput = document.getElementById('roomCodeInput');
    const createGameBtn = document.getElementById('createGameBtn');
    const joinGameBtn = document.getElementById('joinGameBtn');
    
    if (playerNameInput) {
        playerNameInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º
                const roomCode = roomCodeInput ? roomCodeInput.value.trim() : '';
                if (roomCode) {
                    joinGame();
                } else {
                    createGame();
                }
            }
        });
    }
    
    if (roomCodeInput) {
        roomCodeInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                joinGame();
            }
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
        roomCodeInput.addEventListener('input', function(e) {
            e.target.value = e.target.value.toUpperCase();
        });
    }
    
    if (createGameBtn) {
        createGameBtn.addEventListener('click', createGame);
    }
    
    if (joinGameBtn) {
        joinGameBtn.addEventListener('click', joinGame);
    }
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('modal')) {
            e.target.style.display = 'none';
        }
    });
});

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ
// (startGame, changeMaxPlayers, updateGameDisplay, –∏ —Ç.–¥.)

// === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò–ì–†–´ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===

function startGame() {
    console.log('üöÄ Start game requested');
    
    if (!gameState.isHost) {
        showNotification('–û—à–∏–±–∫–∞', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!');
        return;
    }
    
    if (gameState.players.length < 2) {
        showNotification('–û—à–∏–±–∫–∞', '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!');
        return;
    }
    
    socket.emit('start-game');
}

function changeMaxPlayers() {
    const select = document.getElementById('maxPlayersSelect');
    const newMaxPlayers = parseInt(select.value);
    
    console.log('üîß Changing max players to:', newMaxPlayers);
    socket.emit('change-max-players', { maxPlayers: newMaxPlayers });
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞)
socket.on('game-started', function(data) {
    console.log('üöÄ Game started:', data);
    gameState.players = data.players;
    gameState.serverGameState = data.gameState;
    gameState.gamePhase = data.gamePhase;
    gameState.currentRound = data.currentRound;
    gameState.timeLeft = data.timeLeft;
    gameState.startRoundVotes = 0;
    gameState.myStartRoundVote = false;
    
    if (data.story) {
        const storyText = document.getElementById('storyText');
        if (storyText) {
            storyText.textContent = data.story;
        }
    }
    
    showGameScreen();
});

socket.on('game-reset', function(data) {
    console.log('üîÑ Game reset:', data);
    gameState.players = data.players;
    gameState.serverGameState = data.gameState;
    gameState.gamePhase = 'lobby';
    gameState.currentRound = 1;
    gameState.timeLeft = 0;
    gameState.currentTurnPlayer = null;
    gameState.scenario = null;
    showLobbyScreen();
});

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ client.js

function showNotification(title, message) {
    document.getElementById('notificationTitle').textContent = title;
    document.getElementById('notificationMessage').textContent = message;
    document.getElementById('notificationModal').style.display = 'flex';
}

function closeNotificationModal() {
    document.getElementById('notificationModal').style.display = 'none';
}

console.log('üéÆ Bunker Game Client Loaded');