console.log('üéÆ Bunker Game Client Loading...');

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
    playerId: null,
    playerName: '',
    isHost: false,
    players: [],
    gamePhase: 'login',
    serverGameState: 'lobby',
    currentRound: 1,
    timeLeft: 0,
    votingResults: {},
    myVote: null,
    timer: null,
    maxPlayers: 8,
    currentTurnPlayer: null,
    currentJustifyingPlayer: null,
    canChangeVote: {},
    hasChangedVote: false,
    cardsRevealedThisRound: 0,
    requiredCardsThisRound: 1,
    skipDiscussionVotes: 0,
    mySkipVote: false,
    startRoundVotes: 0,
    myStartRoundVote: false
};

// Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
const socket = io({
    transports: ['websocket', 'polling'],
    timeout: 10000,
    reconnection: true,
    reconnectionAttempts: 10,
    reconnectionDelay: 1000
});

// –ï–î–ò–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è joinGame
function joinGame() {
    console.log('üéØ joinGame function called');
    
    const nameInput = document.getElementById('playerNameInput');
    const joinBtn = document.getElementById('joinGameBtn');
    
    if (!nameInput) {
        console.error('‚ùå Name input not found');
        return;
    }
    
    const playerName = nameInput.value.trim();
    console.log('üéØ Player name:', playerName);
    
    if (!playerName) {
        alert('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è!');
        return;
    }
    
    if (playerName.length < 2 || playerName.length > 20) {
        alert('–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤!');
        return;
    }
    
    if (!socket.connected) {
        console.error('‚ùå Socket not connected');
        alert('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        return;
    }
    
    console.log('üéØ Joining game with name:', playerName);
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    if (joinBtn) {
        joinBtn.disabled = true;
        joinBtn.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
    }
    
    socket.emit('join-game', { playerName: playerName });
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞
    setTimeout(() => {
        if (joinBtn && joinBtn.disabled) {
            joinBtn.disabled = false;
            joinBtn.textContent = '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ';
        }
    }, 5000);
}

// –ï–î–ò–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('üì± DOM loaded, initializing...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const playerNameInput = document.getElementById('playerNameInput');
    const joinGameBtn = document.getElementById('joinGameBtn');
    
    console.log('üîç Elements check:');
    console.log('- playerNameInput:', playerNameInput ? '‚úÖ' : '‚ùå');
    console.log('- joinGameBtn:', joinGameBtn ? '‚úÖ' : '‚ùå');
    
    if (!playerNameInput || !joinGameBtn) {
        console.error('‚ùå Critical elements missing!');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
    showLoginScreen();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    playerNameInput.addEventListener('keypress', function(e) {
        console.log('üéØ Key pressed:', e.key);
        if (e.key === 'Enter') {
            e.preventDefault();
            joinGame();
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    joinGameBtn.addEventListener('click', function(e) {
        e.preventDefault();
        console.log('üéØ Join button clicked');
        joinGame();
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('modal')) {
            e.target.style.display = 'none';
        }
    });
    
    console.log('‚úÖ DOM initialization complete');
});

// === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô SOCKET.IO ===

socket.on('connect', function() {
    console.log('üåê Connected to server');
    console.log('üîó Socket ID:', socket.id);
    
    showLoginScreen();
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
    const joinBtn = document.getElementById('joinGameBtn');
    if (joinBtn && joinBtn.disabled) {
        joinBtn.disabled = false;
        joinBtn.textContent = '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ';
    }
});

socket.on('connect_error', function(error) {
    console.error('‚ùå Connection error:', error);
    alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
});

socket.on('disconnect', function(reason) {
    console.log('‚ùå Disconnected from server:', reason);
    alert('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
});

socket.on('error', function(errorMessage) {
    console.error('‚ùå Server error:', errorMessage);
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    const joinBtn = document.getElementById('joinGameBtn');
    if (joinBtn) {
        joinBtn.disabled = false;
        joinBtn.textContent = '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ';
    }
    
    alert('–û—à–∏–±–∫–∞: ' + errorMessage);
});

socket.on('join-confirmed', function(data) {
    console.log('‚úÖ Join confirmed:', data);
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    const joinBtn = document.getElementById('joinGameBtn');
    if (joinBtn) {
        joinBtn.disabled = false;
        joinBtn.textContent = '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ';
    }
    
    gameState.playerId = data.playerId;
    gameState.playerName = data.playerName;
    gameState.isHost = data.isHost;
    gameState.maxPlayers = data.maxPlayers;
    gameState.startRoundVotes = data.startRoundVotes || 0;
    gameState.gamePhase = 'lobby';
    showLobbyScreen();
});

socket.on('player-joined', function(data) {
    console.log('üëã Player joined:', data);
    gameState.players = data.players;
    gameState.maxPlayers = data.maxPlayers;
    gameState.startRoundVotes = data.startRoundVotes || 0; // –î–û–ë–ê–í–õ–Ø–ï–ú
    updateLobbyDisplay();
});

socket.on('player-left', function(data) {
    console.log('üëã Player left:', data);
    gameState.players = data.players;
    gameState.serverGameState = data.gameState;
    updateLobbyDisplay();
});

socket.on('max-players-changed', function(data) {
    console.log('üîß Max players changed:', data);
    gameState.maxPlayers = data.maxPlayers;
    gameState.players = data.players;
    updateLobbyDisplay();
});

socket.on('game-started', function(data) {
    console.log('üöÄ Game started:', data);
    gameState.players = data.players;
    gameState.serverGameState = data.gameState;
    gameState.gamePhase = data.gamePhase;
    gameState.currentRound = data.currentRound;
    gameState.timeLeft = data.timeLeft;
    gameState.startRoundVotes = 0;
    gameState.myStartRoundVote = false;
    
    // –î–û–ë–ê–í–õ–Ø–ï–ú: –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã
    if (data.story) {
        const storyText = document.getElementById('storyText');
        if (storyText) {
            storyText.textContent = data.story;
        }
    }
    
    showGameScreen();
});

socket.on('game-reset', function(data) {
    console.log('üîÑ Game reset:', data);
    gameState.players = data.players;
    gameState.serverGameState = data.gameState;
    gameState.gamePhase = 'lobby';
    gameState.currentRound = 1;
    gameState.timeLeft = 0;
    gameState.currentTurnPlayer = null;
    gameState.scenario = null; // –î–û–ë–ê–í–õ–Ø–ï–ú: –û—á–∏—â–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
    showLobbyScreen();
});

socket.on('phase-changed', function(data) {
    console.log('üîÑ Phase changed:', data);
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.currentTurnPlayer = data.currentTurnPlayer || null;
    gameState.currentRound = data.currentRound || gameState.currentRound;
    
    // –î–û–ë–ê–í–õ–Ø–ï–ú: –ü–æ–ª—É—á–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–∑—ã
    if (data.scenario) {
        gameState.scenario = data.scenario;
        console.log('üé≤ Scenario received:', data.scenario.title);
    }
    
    gameState.requiredCardsThisRound = getRequiredCardsForRound(gameState.currentRound);
    
    if (data.gamePhase !== 'discussion') {
        gameState.skipDiscussionVotes = 0;
        gameState.mySkipVote = false;
    }
    
    if (data.gamePhase !== 'voting') {
        gameState.myVote = null;
        gameState.hasChangedVote = false;
    }
    
    if (data.gamePhase === 'revelation') {
        gameState.cardsRevealedThisRound = 0;
    }
    
    updateGameDisplay();
});

socket.on('characteristic-revealed', function(data) {
    console.log('üîç Characteristic revealed:', data);
    gameState.players = data.players;
    
    if (data.playerId === gameState.playerId) {
        gameState.cardsRevealedThisRound = data.cardsRevealedThisRound;
        gameState.requiredCardsThisRound = data.requiredCards;
    }
    
    updatePlayersGrid();
});

socket.on('timer-update', function(data) {
    gameState.timeLeft = data.timeLeft;
    gameState.currentTurnPlayer = data.currentTurnPlayer;
    updateTimerDisplay();
    
    if (gameState.gamePhase === 'revelation') {
        updateGameDisplay();
    }
});

socket.on('vote-update', function(data) {
    console.log('üó≥Ô∏è Vote update received:', data);
    
    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (data.players) {
        gameState.players = data.players;
    }
    if (data.votingResults) {
        gameState.votingResults = data.votingResults;
    }
    if (data.canChangeVote) {
        gameState.canChangeVote = data.canChangeVote;
    }
    
    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫—É
    setTimeout(() => {
        updatePlayersGrid();
    }, 100);
});

socket.on('justification-started', function(data) {
    console.log('‚öñÔ∏è Justification started:', data);
    gameState.currentJustifyingPlayer = data.justifyingPlayer?.id;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.gamePhase = 'justification';
    updateGameDisplay();
});

socket.on('second-voting-started', function(data) {
    console.log('üó≥Ô∏è Second voting started:', data);
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.canChangeVote = data.canChangeVote || {};
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ç–æ—Ä–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
    if (data.isSecondVoting) {
        showNotification('–í—Ç–æ—Ä–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', '–ò–≥—Ä–æ–∫–∏ –æ–ø—Ä–∞–≤–¥–∞–ª–∏—Å—å. –ì–æ–ª–æ—Å—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å—Ä–µ–¥–∏ –Ω–∏—Ö.');
    }
    
    updateGameDisplay();
});

socket.on('skip-discussion-vote-update', function(data) {
    console.log('‚è≠Ô∏è Skip discussion vote update:', data);
    gameState.skipDiscussionVotes = data.votes;
    gameState.mySkipVote = data.hasVoted;
    
    // –û–ë–ù–û–í–õ–Ø–ï–ú –∫–Ω–æ–ø–∫—É –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
    updateRoundActions();
});

socket.on('discussion-skipped', function(data) {
    console.log('‚è≠Ô∏è Discussion skipped:', data);
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.skipDiscussionVotes = 0;
    gameState.mySkipVote = false;
    updateGameDisplay();
});

socket.on('round-results', function(data) {
    console.log('üìä Round results:', data);
    gameState.players = data.players;
    gameState.votingResults = data.votingResults;
    updateGameDisplay();
    
    // –û–ë–ù–û–í–õ–Ø–ï–ú: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    if (data.eliminatedPlayers && data.eliminatedPlayers.length > 0) {
        if (data.eliminatedPlayers.length === 1) {
            showNotification('–ò–≥—Ä–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω', `${data.eliminatedPlayers[0]} –ø–æ–∫–∏–¥–∞–µ—Ç –±—É–Ω–∫–µ—Ä`);
        } else {
            showNotification('–ò–≥—Ä–æ–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã', `${data.eliminatedPlayers.join(', ')} –ø–æ–∫–∏–¥–∞—é—Ç –±—É–Ω–∫–µ—Ä`);
        }
    } else if (data.resultMessage) {
        // –ù–û–í–û–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∏—á—å–∏
        if (data.willEliminateTopVotersNextRound) {
            showNotification('‚ö†Ô∏è –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥', data.resultMessage);
        } else {
            showNotification('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞', data.resultMessage);
        }
    } else {
        showNotification('–ù–∏—á—å—è', '–ù–∏–∫—Ç–æ –Ω–µ –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ');
    }
});

socket.on('new-round', function(data) {
    console.log('üîÑ New round:', data);
    gameState.currentRound = data.currentRound;
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.startRoundVotes = 0;
    gameState.myStartRoundVote = false;
    
    // –ù–û–í–û–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —Ä–∞—É–Ω–¥–µ
    if (data.willEliminateTopVotersThisRound) {
        showNotification('‚ö†Ô∏è –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥', '–í —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ –±—É–¥—É—Ç –∏—Å–∫–ª—é—á–µ–Ω—ã 2 –∏–≥—Ä–æ–∫–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ –≥–æ–ª–æ—Å–∞–º–∏!');
    }
    
    updateGameDisplay();
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –Ω–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞
socket.on('start-round-vote-update', function(data) {
    console.log('üéØ Start round vote update:', data);
    gameState.startRoundVotes = data.votes;
    gameState.myStartRoundVote = data.hasVoted;
    updateRoundActions();
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–∞—Ä—Ç –¥–µ–π—Å—Ç–≤–∏–π
socket.on('action-card-used', function(data) {
    console.log('‚ú® Action card used:', data);
    gameState.players = data.players;
    
    updatePlayersGrid();
    
    const message = data.targetId 
        ? `${data.playerName} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–∞—Ä—Ç—É "${data.cardName}"`
        : `${data.playerName} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–∞—Ä—Ç—É "${data.cardName}"`;
    
    showNotification('–ö–∞—Ä—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è', message);
});

socket.on('detective-result', function(data) {
    console.log('üîç Detective result:', data);
    
    const message = `–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ ${data.targetName}:\n${translateCharacteristic(data.characteristic)}: ${data.value}`;
    showNotification('–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ç–∏–≤–∞', message);
});

// === –§–£–ù–ö–¶–ò–ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –≠–ö–†–ê–ù–û–í ===

function showScreen(screenId) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    const screens = document.querySelectorAll('.screen');
    screens.forEach(screen => {
        screen.style.display = 'none';
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.style.display = 'block';
    }
}

function showLoginScreen() {
    console.log('üì± Showing login screen');
    showScreen('loginScreen');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    const nameInput = document.getElementById('playerNameInput');
    if (nameInput) {
        nameInput.focus();
    }
}

function showLobbyScreen() {
    console.log('üì± Showing lobby screen');
    showScreen('lobbyScreen');
    updateLobbyDisplay();
}

function showGameScreen() {
    console.log('üì± Showing game screen');
    console.log('üéÆ Game state:', {
        phase: gameState.gamePhase,
        players: gameState.players.length,
        playerId: gameState.playerId
    });
    
    showScreen('gameScreen');
    updateGameDisplay();
}

function showResultsScreen() {
    console.log('üì± Showing results screen');
    showScreen('resultsScreen');
}

// === –§–£–ù–ö–¶–ò–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø –õ–û–ë–ë–ò ===

function updateLobbyDisplay() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤
    const currentPlayersCount = document.getElementById('currentPlayersCount');
    const maxPlayersCount = document.getElementById('maxPlayersCount');
    const playersList = document.getElementById('playersList');
    const startGameBtn = document.getElementById('startGameBtn');
    const waitingInfo = document.getElementById('waitingInfo');
    const maxPlayersSelector = document.getElementById('maxPlayersSelector');
    
    if (currentPlayersCount) {
        currentPlayersCount.textContent = gameState.players.length;
    }
    
    if (maxPlayersCount) {
        maxPlayersCount.textContent = gameState.maxPlayers;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    if (playersList) {
        playersList.innerHTML = '';
        gameState.players.forEach(player => {
            const li = document.createElement('li');
            li.className = player.isHost ? 'host' : '';
            li.textContent = `${player.name}${player.isHost ? ' (–•–æ—Å—Ç)' : ''}`;
            playersList.appendChild(li);
        });
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    if (gameState.isHost) {
        if (startGameBtn) {
            startGameBtn.style.display = 'block';
            startGameBtn.disabled = gameState.players.length < 2;
            
            // –û–ë–ù–û–í–õ–Ø–ï–ú —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            if (gameState.players.length < 2) {
                startGameBtn.textContent = '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É (–º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞)';
            } else {
                startGameBtn.textContent = '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É';
            }
        }
        if (waitingInfo) {
            waitingInfo.style.display = 'none';
        }
        if (maxPlayersSelector) {
            maxPlayersSelector.style.display = 'block';
        }
    } else {
        if (startGameBtn) {
            startGameBtn.style.display = 'none';
        }
        if (waitingInfo) {
            waitingInfo.style.display = 'block';
        }
        if (maxPlayersSelector) {
            maxPlayersSelector.style.display = 'none';
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
    const maxPlayersSelect = document.getElementById('maxPlayersSelect');
    if (maxPlayersSelect) {
        maxPlayersSelect.value = gameState.maxPlayers;
    }
}

// === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò–ì–†–´ ===

function joinGame() {
    console.log('üéØ joinGame function called');
    
    const nameInput = document.getElementById('playerNameInput');
    if (!nameInput) {
        console.error('‚ùå Name input not found');
        return;
    }
    
    const playerName = nameInput.value.trim();
    console.log('üéØ Player name:', playerName);
    
    if (!playerName) {
        showNotification('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è!');
        return;
    }
    
    if (playerName.length < 2 || playerName.length > 20) {
        showNotification('–û—à–∏–±–∫–∞', '–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤!');
        return;
    }
    
    if (!socket.connected) {
        console.error('‚ùå Socket not connected');
        showNotification('–û—à–∏–±–∫–∞', '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        return;
    }
    
    console.log('üéØ Joining game with name:', playerName);
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    const joinBtn = document.getElementById('joinGameBtn');
    if (joinBtn) {
        joinBtn.disabled = true;
        joinBtn.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
    }
    
    socket.emit('join-game', { playerName: playerName });
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞
    setTimeout(() => {
        if (joinBtn && joinBtn.disabled) {
            joinBtn.disabled = false;
            joinBtn.textContent = '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ';
        }
    }, 5000);
}

function startRound() {
    if (gameState.myStartRoundVote) {
        showNotification('–ì–æ–ª–æ—Å —É–∂–µ —É—á—Ç–µ–Ω', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –Ω–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞');
        return;
    }
    
    console.log('üéØ Voting to start round');
    socket.emit('start-round');
}

// –î–û–ë–ê–í–õ–Ø–ï–ú –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é startGame
function startGame() {
    console.log('üöÄ Start game requested');
    
    if (!gameState.isHost) {
        showNotification('–û—à–∏–±–∫–∞', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!');
        return;
    }
    
    if (gameState.players.length < 2) {
        showNotification('–û—à–∏–±–∫–∞', '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!');
        return;
    }
    
    socket.emit('start-game');
}

function changeMaxPlayers() {
    const select = document.getElementById('maxPlayersSelect');
    const newMaxPlayers = parseInt(select.value);
    
    console.log('üîß Changing max players to:', newMaxPlayers);
    socket.emit('change-max-players', { maxPlayers: newMaxPlayers });
}

// === –§–£–ù–ö–¶–ò–ò –ò–ì–†–û–í–û–ì–û –ü–†–û–¶–ï–°–°–ê ===

function getRequiredCardsForRound(round) {
    if (round === 1) {
        return 2; // –ü—Ä–æ—Ñ–µ—Å—Å–∏—è + 1 –∫–∞—Ä—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä
    } else {
        return 1; // 1 –∫–∞—Ä—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä
    }
}

// –û–ë–ù–û–í–õ–Ø–ï–ú —Ñ—É–Ω–∫—Ü–∏—é updateGameDisplay
function updateGameDisplay() {
    console.log('üéÆ Updating game display. Phase:', gameState.gamePhase, 'Players:', gameState.players.length);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—É–Ω–¥–µ
    const currentRoundElement = document.getElementById('currentRound');
    const gameStatusElement = document.getElementById('gameStatus');
    const phaseDisplayElement = document.getElementById('phaseDisplay');
    
    if (currentRoundElement) {
        currentRoundElement.textContent = gameState.currentRound;
    }
    
    if (gameStatusElement) {
        gameStatusElement.textContent = getGameStatusText();
    }
    
    if (phaseDisplayElement) {
        phaseDisplayElement.textContent = getPhaseDisplayText();
    }
    
   ;
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    updateRoundActions();
    updatePlayersGrid();
    updateTimerDisplay();
    
    console.log('‚úÖ Game display updated');
}

// –ò–°–ü–†–ê–í–õ–Ø–ï–ú —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
function updateRoundActions() {
    console.log('üéØ Updating round actions. Phase:', gameState.gamePhase, 'My ID:', gameState.playerId);
    
    const roundActions = document.getElementById('roundActions');
    const startRoundBtn = document.getElementById('startRoundBtn');
    const skipDiscussionBtn = document.getElementById('skipDiscussionBtn');
    const finishJustificationBtn = document.getElementById('finishJustificationBtn');
    const surrenderBtn = document.getElementById('surrenderBtn');
    
    if (!roundActions) {
        console.error('‚ùå roundActions element not found');
        return;
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (startRoundBtn) startRoundBtn.style.display = 'none';
    if (skipDiscussionBtn) skipDiscussionBtn.style.display = 'none';
    if (finishJustificationBtn) finishJustificationBtn.style.display = 'none';
    if (surrenderBtn) surrenderBtn.style.display = 'none';
    
    const isMyTurn = gameState.currentTurnPlayer === gameState.playerId;
    const isMyJustification = gameState.currentJustifyingPlayer === gameState.playerId;
    const alivePlayers = gameState.players.filter(p => p.isAlive);
    const amAlive = alivePlayers.some(p => p.id === gameState.playerId);
    
    let hasVisibleButtons = false;
    
    console.log('üéØ Phase check:', {
        phase: gameState.gamePhase,
        amAlive: amAlive,
        playerId: gameState.playerId,
        alivePlayers: alivePlayers.length
    });
    
    switch (gameState.gamePhase) {
        case 'preparation':
            // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Å–µ–º –∂–∏–≤—ã–º –∏–≥—Ä–æ–∫–∞–º
            if (startRoundBtn && amAlive) {
                startRoundBtn.style.display = 'block';
                hasVisibleButtons = true;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–æ–ª–æ—Å–∞—Ö
                const requiredVotes = 2;
                const currentVotes = gameState.startRoundVotes || 0;
                
                if (gameState.myStartRoundVote) {
                    startRoundBtn.textContent = `üéØ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ (${currentVotes}/${requiredVotes})`;
                    startRoundBtn.disabled = true;
                    startRoundBtn.classList.add('voted-skip');
                } else {
                    startRoundBtn.textContent = `üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥ (${currentVotes}/${requiredVotes})`;
                    startRoundBtn.disabled = false;
                    startRoundBtn.classList.remove('voted-skip');
                }
                
                console.log('‚úÖ Start round button shown');
            }
            break;
            
        case 'discussion':
            if (skipDiscussionBtn && amAlive) {
                skipDiscussionBtn.style.display = 'block';
                hasVisibleButtons = true;
                
                const skipVotesCount = document.getElementById('skipVotesCount');
                if (skipVotesCount) {
                    skipVotesCount.textContent = gameState.skipDiscussionVotes || 0;
                }
                
                if (gameState.mySkipVote) {
                    skipDiscussionBtn.classList.add('voted-skip');
                    skipDiscussionBtn.disabled = true;
                } else {
                    skipDiscussionBtn.classList.remove('voted-skip');
                    skipDiscussionBtn.disabled = false;
                }
            }
            break;
            
        case 'justification':
            if (isMyJustification) {
                if (finishJustificationBtn) {
                    finishJustificationBtn.style.display = 'block';
                    hasVisibleButtons = true;
                }
                if (surrenderBtn) {
                    surrenderBtn.style.display = 'block';
                    hasVisibleButtons = true;
                }
            }
            break;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
    roundActions.style.display = hasVisibleButtons ? 'flex' : 'none';
    
    console.log('üéØ Round actions updated. Visible:', hasVisibleButtons);
}

function getGameStatusText() {
    // –î–û–ë–ê–í–õ–Ø–ï–ú –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    const isSpecialRound = gameState.players.some(p => p.willEliminateTopVotersThisRound);
    const specialPrefix = isSpecialRound ? '‚ö†Ô∏è –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –†–ê–£–ù–î: ' : '';
    
    switch (gameState.gamePhase) {
        case 'preparation': 
            return specialPrefix + '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞—É–Ω–¥—É';
        case 'revelation': 
            const currentPlayer = gameState.players.find(p => p.id === gameState.currentTurnPlayer);
            if (currentPlayer) {
                const isMyTurn = currentPlayer.id === gameState.playerId;
                const requiredCards = getRequiredCardsForRound(gameState.currentRound);
                const revealedCards = currentPlayer.cardsRevealedThisRound || 0;
                
                if (isMyTurn) {
                    if (gameState.currentRound === 1) {
                        if (revealedCards === 0) {
                            return specialPrefix + '–í–∞—à —Ö–æ–¥: –†–∞—Å–∫—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é';
                        } else if (revealedCards === 1) {
                            return specialPrefix + '–í–∞—à —Ö–æ–¥: –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É';
                        } else {
                            return specialPrefix + '–í–∞—à —Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω';
                        }
                    } else {
                        if (revealedCards === 0) {
                            return specialPrefix + '–í–∞—à —Ö–æ–¥: –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É';
                        } else {
                            return specialPrefix + '–í–∞—à —Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω';
                        }
                    }
                } else {
                    return specialPrefix + `–•–æ–¥ –∏–≥—Ä–æ–∫–∞: ${currentPlayer.name}`;
                }
            }
            return specialPrefix + '–†–∞—Å–∫—Ä—ã—Ç–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫';
        case 'discussion': 
            return specialPrefix + '–§–∞–∑–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è';
        case 'voting': 
            const justificationQueue = gameState.players.filter(p => p.id === gameState.currentJustifyingPlayer);
            if (justificationQueue.length > 0) {
                return specialPrefix + '–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ';
            }
            return specialPrefix + '–§–∞–∑–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è';
        case 'justification':
            const justifyingPlayer = gameState.players.find(p => p.id === gameState.currentJustifyingPlayer);
            if (justifyingPlayer) {
                const isMyJustification = justifyingPlayer.id === gameState.playerId;
                return specialPrefix + `–û–ø—Ä–∞–≤–¥–∞–Ω–∏–µ: ${isMyJustification ? '–í–∞—à —á–µ—Ä–µ–¥' : justifyingPlayer.name}`;
            }
            return specialPrefix + '–§–∞–∑–∞ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è';
        case 'results': 
            return specialPrefix + '–ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ —Ä–∞—É–Ω–¥–∞';
        case 'finished': 
            return '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
        default: 
            return '–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...';
    }
}

function getPhaseDisplayText() {
    const statusText = getGameStatusText();
    
    if (gameState.gamePhase === 'revelation' && gameState.currentTurnPlayer === gameState.playerId) {
        return `${statusText}`;
    }
    
    return statusText;
}

function updateTimerDisplay() {
    const timerElement = document.getElementById('timerDisplay');
    if (timerElement && gameState.timeLeft >= 0) {
        const minutes = Math.floor(gameState.timeLeft / 60);
        const seconds = gameState.timeLeft % 60;
        timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }
}

// –ò–°–ü–†–ê–í–õ–Ø–ï–ú —Ñ—É–Ω–∫—Ü–∏—é updatePlayersGrid
function updatePlayersGrid() {
    console.log('üéÆ Updating players grid. Players:', gameState.players.length);
    
    const playersGrid = document.getElementById('playersGrid');
    
    if (!playersGrid) {
        console.error('‚ùå playersGrid element not found');
        return;
    }

    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–≥—Ä–æ–∫–∏
    if (!gameState.players || gameState.players.length === 0) {
        console.log('‚ö†Ô∏è No players to display');
        playersGrid.innerHTML = '<div style="color: #ecf0f1; text-align: center; padding: 20px;">–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';
        playersGrid.style.display = 'grid'; // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: grid –≤–º–µ—Å—Ç–æ block
        return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ª–∏–¥–µ—Ä–æ–≤
    let maxVotes = 0;
    if (gameState.gamePhase === 'voting' || gameState.gamePhase === 'justification' || gameState.gamePhase === 'results') {
        const alivePlayers = gameState.players.filter(p => p.isAlive);
        maxVotes = Math.max(...alivePlayers.map(p => p.votes || 0));
    }
    
    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏ —Å—Ç–∏–ª–∏
    playersGrid.className = `players-grid players-${gameState.players.length}`;
    playersGrid.style.display = 'grid';
    playersGrid.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∏–ª–µ–π
    
    gameState.players.forEach(player => {
        const playerCard = createPlayerCard(player);
        
        // –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
        if (player.isAlive && (player.votes || 0) === maxVotes && maxVotes > 0) {
            playerCard.classList.add('most-voted');
        }
        
        playersGrid.appendChild(playerCard);
    });
    
    console.log('‚úÖ Players grid updated:', gameState.players.length, 'players');
}

// –ò–°–ü–†–ê–í–õ–Ø–ï–ú —Ñ—É–Ω–∫—Ü–∏—é getVotersForPlayer
function getVotersForPlayer(playerId) {
    if (!gameState.votingResults || !gameState.votingResults[playerId]) {
        return [];
    }
    
    const voterIds = gameState.votingResults[playerId];
    const voterNames = [];
    
    voterIds.forEach(voterId => {
        const voter = gameState.players.find(p => p.id === voterId);
        if (voter) {
            voterNames.push(voter.name);
        }
    });
    
    return voterNames;
}

// –ò–°–ü–†–ê–í–õ–Ø–ï–ú –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
socket.on('vote-update', function(data) {
    console.log('üó≥Ô∏è Vote update received:', data);
    
    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (data.players) {
        gameState.players = data.players;
    }
    if (data.votingResults) {
        gameState.votingResults = data.votingResults;
    }
    if (data.canChangeVote) {
        gameState.canChangeVote = data.canChangeVote;
    }
    
    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫—É
    setTimeout(() => {
        updatePlayersGrid();
    }, 100);
});

// –ò–°–ü–†–ê–í–õ–Ø–ï–ú —Ñ—É–Ω–∫—Ü–∏—é voteForPlayer
function voteForPlayer(playerId) {
    console.log('üó≥Ô∏è Voting for player:', playerId);
    
    if (gameState.gamePhase !== 'voting') {
        showNotification('–û—à–∏–±–∫–∞', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
        return;
    }
    
    const me = gameState.players.find(p => p.id === gameState.playerId);
    if (!me || !me.isAlive) {
        showNotification('–û—à–∏–±–∫–∞', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
        return;
    }
    
    if (me.hasVoted && !gameState.canChangeVote[gameState.playerId]) {
        showNotification('–û—à–∏–±–∫–∞', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!');
        return;
    }
    
    console.log('üó≥Ô∏è Sending vote to server');
    
    if (me.hasVoted && gameState.canChangeVote[gameState.playerId]) {
        // –°–º–µ–Ω–∞ –≥–æ–ª–æ—Å–∞
        socket.emit('change-vote', { targetId: playerId });
        gameState.hasChangedVote = true;
    } else {
        // –ü–µ—Ä–≤–∏—á–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        socket.emit('vote-player', { targetId: playerId });
    }
    
    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ù–µ –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ - –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
}

// === –§–£–ù–ö–¶–ò–ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –≠–ö–†–ê–ù–û–í ===

function showScreen(screenId) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    const screens = document.querySelectorAll('.screen');
    screens.forEach(screen => {
        screen.style.display = 'none';
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.style.display = 'block';
    }
}

function showLoginScreen() {
    console.log('üì± Showing login screen');
    showScreen('loginScreen');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    const nameInput = document.getElementById('playerNameInput');
    if (nameInput) {
        nameInput.focus();
    }
}

function showLobbyScreen() {
    console.log('üì± Showing lobby screen');
    showScreen('lobbyScreen');
    updateLobbyDisplay();
}

function showGameScreen() {
    console.log('üì± Showing game screen');
    console.log('üéÆ Game state:', {
        phase: gameState.gamePhase,
        players: gameState.players.length,
        playerId: gameState.playerId
    });
    
    showScreen('gameScreen');
    updateGameDisplay();
}

function showResultsScreen() {
    console.log('üì± Showing results screen');
    showScreen('resultsScreen');
}

// === –§–£–ù–ö–¶–ò–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø –õ–û–ë–ë–ò ===

function updateLobbyDisplay() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤
    const currentPlayersCount = document.getElementById('currentPlayersCount');
    const maxPlayersCount = document.getElementById('maxPlayersCount');
    const playersList = document.getElementById('playersList');
    const startGameBtn = document.getElementById('startGameBtn');
    const waitingInfo = document.getElementById('waitingInfo');
    const maxPlayersSelector = document.getElementById('maxPlayersSelector');
    
    if (currentPlayersCount) {
        currentPlayersCount.textContent = gameState.players.length;
    }
    
    if (maxPlayersCount) {
        maxPlayersCount.textContent = gameState.maxPlayers;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    if (playersList) {
        playersList.innerHTML = '';
        gameState.players.forEach(player => {
            const li = document.createElement('li');
            li.className = player.isHost ? 'host' : '';
            li.textContent = `${player.name}${player.isHost ? ' (–•–æ—Å—Ç)' : ''}`;
            playersList.appendChild(li);
        });
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    if (gameState.isHost) {
        if (startGameBtn) {
            startGameBtn.style.display = 'block';
            startGameBtn.disabled = gameState.players.length < 2;
            
            // –û–ë–ù–û–í–õ–Ø–ï–ú —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            if (gameState.players.length < 2) {
                startGameBtn.textContent = '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É (–º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞)';
            } else {
                startGameBtn.textContent = '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É';
            }
        }
        if (waitingInfo) {
            waitingInfo.style.display = 'none';
        }
        if (maxPlayersSelector) {
            maxPlayersSelector.style.display = 'block';
        }
    } else {
        if (startGameBtn) {
            startGameBtn.style.display = 'none';
        }
        if (waitingInfo) {
            waitingInfo.style.display = 'block';
        }
        if (maxPlayersSelector) {
            maxPlayersSelector.style.display = 'none';
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
    const maxPlayersSelect = document.getElementById('maxPlayersSelect');
    if (maxPlayersSelect) {
        maxPlayersSelect.value = gameState.maxPlayers;
    }
}

// === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò–ì–†–´ ===

function joinGame() {
    console.log('üéØ joinGame function called');
    
    const nameInput = document.getElementById('playerNameInput');
    if (!nameInput) {
        console.error('‚ùå Name input not found');
        return;
    }
    
    const playerName = nameInput.value.trim();
    console.log('üéØ Player name:', playerName);
    
    if (!playerName) {
        showNotification('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è!');
        return;
    }
    
    if (playerName.length < 2 || playerName.length > 20) {
        showNotification('–û—à–∏–±–∫–∞', '–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤!');
        return;
    }
    
    if (!socket.connected) {
        console.error('‚ùå Socket not connected');
        showNotification('–û—à–∏–±–∫–∞', '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        return;
    }
    
    console.log('üéØ Joining game with name:', playerName);
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    const joinBtn = document.getElementById('joinGameBtn');
    if (joinBtn) {
        joinBtn.disabled = true;
        joinBtn.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
    }
    
    socket.emit('join-game', { playerName: playerName });
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞
    setTimeout(() => {
        if (joinBtn && joinBtn.disabled) {
            joinBtn.disabled = false;
            joinBtn.textContent = '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ';
        }
    }, 5000);
}

function startRound() {
    if (gameState.myStartRoundVote) {
        showNotification('–ì–æ–ª–æ—Å —É–∂–µ —É—á—Ç–µ–Ω', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –Ω–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞');
        return;
    }
    
    console.log('üéØ Voting to start round');
    socket.emit('start-round');
}

// –î–û–ë–ê–í–õ–Ø–ï–ú –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é startGame
function startGame() {
    console.log('üöÄ Start game requested');
    
    if (!gameState.isHost) {
        showNotification('–û—à–∏–±–∫–∞', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!');
        return;
    }
    
    if (gameState.players.length < 2) {
        showNotification('–û—à–∏–±–∫–∞', '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!');
        return;
    }
    
    socket.emit('start-game');
}

function changeMaxPlayers() {
    const select = document.getElementById('maxPlayersSelect');
    const newMaxPlayers = parseInt(select.value);
    
    console.log('üîß Changing max players to:', newMaxPlayers);
    socket.emit('change-max-players', { maxPlayers: newMaxPlayers });
}

// === –§–£–ù–ö–¶–ò–ò –ò–ì–†–û–í–û–ì–û –ü–†–û–¶–ï–°–°–ê ===

function getRequiredCardsForRound(round) {
    if (round === 1) {
        return 2; // –ü—Ä–æ—Ñ–µ—Å—Å–∏—è + 1 –∫–∞—Ä—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä
    } else {
        return 1; // 1 –∫–∞—Ä—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä
    }
}

// –û–ë–ù–û–í–õ–Ø–ï–ú —Ñ—É–Ω–∫—Ü–∏—é updateGameDisplay
function updateGameDisplay() {
    console.log('üéÆ Updating game display. Phase:', gameState.gamePhase, 'Players:', gameState.players.length);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—É–Ω–¥–µ
    const currentRoundElement = document.getElementById('currentRound');
    const gameStatusElement = document.getElementById('gameStatus');
    const phaseDisplayElement = document.getElementById('phaseDisplay');
    
    if (currentRoundElement) {
        currentRoundElement.textContent = gameState.currentRound;
    }
    
    if (gameStatusElement) {
        gameStatusElement.textContent = getGameStatusText();
    }
    
    if (phaseDisplayElement) {
        phaseDisplayElement.textContent = getPhaseDisplayText();
    }
    
   ;
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    updateRoundActions();
    updatePlayersGrid();
    updateTimerDisplay();
    
    console.log('‚úÖ Game display updated');
}

// –ò–°–ü–†–ê–í–õ–Ø–ï–ú —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
function updateRoundActions() {
    console.log('üéØ Updating round actions. Phase:', gameState.gamePhase, 'My ID:', gameState.playerId);
    
    const roundActions = document.getElementById('roundActions');
    const startRoundBtn = document.getElementById('startRoundBtn');
    const skipDiscussionBtn = document.getElementById('skipDiscussionBtn');
    const finishJustificationBtn = document.getElementById('finishJustificationBtn');
    const surrenderBtn = document.getElementById('surrenderBtn');
    
    if (!roundActions) {
        console.error('‚ùå roundActions element not found');
        return;
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (startRoundBtn) startRoundBtn.style.display = 'none';
    if (skipDiscussionBtn) skipDiscussionBtn.style.display = 'none';
    if (finishJustificationBtn) finishJustificationBtn.style.display = 'none';
    if (surrenderBtn) surrenderBtn.style.display = 'none';
    
    const isMyTurn = gameState.currentTurnPlayer === gameState.playerId;
    const isMyJustification = gameState.currentJustifyingPlayer === gameState.playerId;
    const alivePlayers = gameState.players.filter(p => p.isAlive);
    const amAlive = alivePlayers.some(p => p.id === gameState.playerId);
    
    let hasVisibleButtons = false;
    
    console.log('üéØ Phase check:', {
        phase: gameState.gamePhase,
        amAlive: amAlive,
        playerId: gameState.playerId,
        alivePlayers: alivePlayers.length
    });
    
    switch (gameState.gamePhase) {
        case 'preparation':
            // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Å–µ–º –∂–∏–≤—ã–º –∏–≥—Ä–æ–∫–∞–º
            if (startRoundBtn && amAlive) {
                startRoundBtn.style.display = 'block';
                hasVisibleButtons = true;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–æ–ª–æ—Å–∞—Ö
                const requiredVotes = 2;
                const currentVotes = gameState.startRoundVotes || 0;
                
                if (gameState.myStartRoundVote) {
                    startRoundBtn.textContent = `üéØ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ (${currentVotes}/${requiredVotes})`;
                    startRoundBtn.disabled = true;
                    startRoundBtn.classList.add('voted-skip');
                } else {
                    startRoundBtn.textContent = `üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥ (${currentVotes}/${requiredVotes})`;
                    startRoundBtn.disabled = false;
                    startRoundBtn.classList.remove('voted-skip');
                }
                
                console.log('‚úÖ Start round button shown');
            }
            break;
            
        case 'discussion':
            if (skipDiscussionBtn && amAlive) {
                skipDiscussionBtn.style.display = 'block';
                hasVisibleButtons = true;
                
                const skipVotesCount = document.getElementById('skipVotesCount');
                if (skipVotesCount) {
                    skipVotesCount.textContent = gameState.skipDiscussionVotes || 0;
                }
                
                if (gameState.mySkipVote) {
                    skipDiscussionBtn.classList.add('voted-skip');
                    skipDiscussionBtn.disabled = true;
                } else {
                    skipDiscussionBtn.classList.remove('voted-skip');
                    skipDiscussionBtn.disabled = false;
                }
            }
            break;
            
        case 'justification':
            if (isMyJustification) {
                if (finishJustificationBtn) {
                    finishJustificationBtn.style.display = 'block';
                    hasVisibleButtons = true;
                }
                if (surrenderBtn) {
                    surrenderBtn.style.display = 'block';
                    hasVisibleButtons = true;
                }
            }
            break;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
    roundActions.style.display = hasVisibleButtons ? 'flex' : 'none';
    
    console.log('üéØ Round actions updated. Visible:', hasVisibleButtons);
}

function getGameStatusText() {
    // –î–û–ë–ê–í–õ–Ø–ï–ú –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    const isSpecialRound = gameState.players.some(p => p.willEliminateTopVotersThisRound);
    const specialPrefix = isSpecialRound ? '‚ö†Ô∏è –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –†–ê–£–ù–î: ' : '';
    
    switch (gameState.gamePhase) {
        case 'preparation': 
            return specialPrefix + '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞—É–Ω–¥—É';
        case 'revelation': 
            const currentPlayer = gameState.players.find(p => p.id === gameState.currentTurnPlayer);
            if (currentPlayer) {
                const isMyTurn = currentPlayer.id === gameState.playerId;
                const requiredCards = getRequiredCardsForRound(gameState.currentRound);
                const revealedCards = currentPlayer.cardsRevealedThisRound || 0;
                
                if (isMyTurn) {
                    if (gameState.currentRound === 1) {
                        if (revealedCards === 0) {
                            return specialPrefix + '–í–∞—à —Ö–æ–¥: –†–∞—Å–∫—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é';
                        } else if (revealedCards === 1) {
                            return specialPrefix + '–í–∞—à —Ö–æ–¥: –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É';
                        } else {
                            return specialPrefix + '–í–∞—à —Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω';
                        }
                    } else {
                        if (revealedCards === 0) {
                            return specialPrefix + '–í–∞—à —Ö–æ–¥: –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É';
                        } else {
                            return specialPrefix + '–í–∞—à —Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω';
                        }
                    }
                } else {
                    return specialPrefix + `–•–æ–¥ –∏–≥—Ä–æ–∫–∞: ${currentPlayer.name}`;
                }
            }
            return specialPrefix + '–†–∞—Å–∫—Ä—ã—Ç–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫';
        case 'discussion': 
            return specialPrefix + '–§–∞–∑–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è';
        case 'voting': 
            const justificationQueue = gameState.players.filter(p => p.id === gameState.currentJustifyingPlayer);
            if (justificationQueue.length > 0) {
                return specialPrefix + '–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ';
            }
            return specialPrefix + '–§–∞–∑–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è';
        case 'justification':
            const justifyingPlayer = gameState.players.find(p => p.id === gameState.currentJustifyingPlayer);
            if (justifyingPlayer) {
                const isMyJustification = justifyingPlayer.id === gameState.playerId;
                return specialPrefix + `–û–ø—Ä–∞–≤–¥–∞–Ω–∏–µ: ${isMyJustification ? '–í–∞—à —á–µ—Ä–µ–¥' : justifyingPlayer.name}`;
            }
            return specialPrefix + '–§–∞–∑–∞ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è';
        case 'results': 
            return specialPrefix + '–ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ —Ä–∞—É–Ω–¥–∞';
        case 'finished': 
            return '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
        default: 
            return '–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...';
    }
}

function getPhaseDisplayText() {
    const statusText = getGameStatusText();
    
    if (gameState.gamePhase === 'revelation' && gameState.currentTurnPlayer === gameState.playerId) {
        return `${statusText}`;
    }
    
    return statusText;
}

function updateTimerDisplay() {
    const timerElement = document.getElementById('timerDisplay');
    if (timerElement && gameState.timeLeft >= 0) {
        const minutes = Math.floor(gameState.timeLeft / 60);
        const seconds = gameState.timeLeft % 60;
        timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }
}

// –ò–°–ü–†–ê–í–õ–Ø–ï–ú —Ñ—É–Ω–∫—Ü–∏—é updatePlayersGrid
function updatePlayersGrid() {
    console.log('üéÆ Updating players grid. Players:', gameState.players.length);
    
    const playersGrid = document.getElementById('playersGrid');
    
    if (!playersGrid) {
        console.error('‚ùå playersGrid element not found');
        return;
    }

    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–≥—Ä–æ–∫–∏
    if (!gameState.players || gameState.players.length === 0) {
        console.log('‚ö†Ô∏è No players to display');
        playersGrid.innerHTML = '<div style="color: #ecf0f1; text-align: center; padding: 20px;">–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';
        playersGrid.style.display = 'grid'; // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: grid –≤–º–µ—Å—Ç–æ block
        return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ª–∏–¥–µ—Ä–æ–≤
    let maxVotes = 0;
    if (gameState.gamePhase === 'voting' || gameState.gamePhase === 'justification' || gameState.gamePhase === 'results') {
        const alivePlayers = gameState.players.filter(p => p.isAlive);
        maxVotes = Math.max(...alivePlayers.map(p => p.votes || 0));
    }
    
    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏ —Å—Ç–∏–ª–∏
    playersGrid.className = `players-grid players-${gameState.players.length}`;
    playersGrid.style.display = 'grid';
    playersGrid.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∏–ª–µ–π
    
    gameState.players.forEach(player => {
        const playerCard = createPlayerCard(player);
        
        // –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
        if (player.isAlive && (player.votes || 0) === maxVotes && maxVotes > 0) {
            playerCard.classList.add('most-voted');
        }
        
        playersGrid.appendChild(playerCard);
    });
    
    console.log('‚úÖ Players grid updated:', gameState.players.length, 'players');
}

// –ò–°–ü–†–ê–í–õ–Ø–ï–ú —Ñ—É–Ω–∫—Ü–∏—é getVotersForPlayer
function getVotersForPlayer(playerId) {
    if (!gameState.votingResults || !gameState.votingResults[playerId]) {
        return [];
    }
    
    const voterIds = gameState.votingResults[playerId];
    const voterNames = [];
    
    voterIds.forEach(voterId => {
        const voter = gameState.players.find(p => p.id === voterId);
        if (voter) {
            voterNames.push(voter.name);
        }
    });
    
    return voterNames;
}

// –ò–°–ü–†–ê–í–õ–Ø–ï–ú –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
socket.on('vote-update', function(data) {
    console.log('üó≥Ô∏è Vote update received:', data);
    
    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (data.players) {
        gameState.players = data.players;
    }
    if (data.votingResults) {
        gameState.votingResults = data.votingResults;
    }
    if (data.canChangeVote) {
        gameState.canChangeVote = data.canChangeVote;
    }
    
    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫—É
    setTimeout(() => {
        updatePlayersGrid();
    }, 100);
});

// –ò–°–ü–†–ê–í–õ–Ø–ï–ú —Ñ—É–Ω–∫—Ü–∏—é voteForPlayer
function voteForPlayer(playerId) {
    console.log('üó≥Ô∏è Voting for player:', playerId);
    
    if (gameState.gamePhase !== 'voting') {
        showNotification('–û—à–∏–±–∫–∞', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
        return;
    }
    
    const me = gameState.players.find(p => p.id === gameState.playerId);
    if (!me || !me.isAlive) {
        showNotification('–û—à–∏–±–∫–∞', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
        return;
    }
    
    if (me.hasVoted && !gameState.canChangeVote[gameState.playerId]) {
        showNotification('–û—à–∏–±–∫–∞', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!');
        return;
    }
    
    console.log('üó≥Ô∏è Sending vote to server');
    
    if (me.hasVoted && gameState.canChangeVote[gameState.playerId]) {
        // –°–º–µ–Ω–∞ –≥–æ–ª–æ—Å–∞
        socket.emit('change-vote', { targetId: playerId });
        gameState.hasChangedVote = true;
    } else {
        // –ü–µ—Ä–≤–∏—á–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        socket.emit('vote-player', { targetId: playerId });
    }
    
    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ù–µ –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ - –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
}