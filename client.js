console.log('üéÆ Bunker Game Client Loading...');

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
    playerId: null,
    playerName: '',
    isHost: false,
    players: [],
    gamePhase: 'login',
    serverGameState: 'lobby',
    currentRound: 1,
    timeLeft: 0,
    votingResults: {},
    myVote: null,
    timer: null,
    maxPlayers: 8,
    currentTurnPlayer: null,
    currentJustifyingPlayer: null,
    canChangeVote: {},
    hasChangedVote: false,
    cardsRevealedThisRound: 0,
    requiredCardsThisRound: 1,
    skipDiscussionVotes: 0,
    mySkipVote: false,
    startRoundVotes: 0,
    myStartRoundVote: false
};

// Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
const socket = io({
    transports: ['websocket', 'polling'],
    timeout: 10000,
    reconnection: true,
    reconnectionAttempts: 10,
    reconnectionDelay: 1000
});

// –ï–î–ò–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è joinGame
function joinGame() {
    console.log('üéØ joinGame function called');
    
    const nameInput = document.getElementById('playerNameInput');
    const joinBtn = document.getElementById('joinGameBtn');
    
    if (!nameInput) {
        console.error('‚ùå Name input not found');
        return;
    }
    
    const playerName = nameInput.value.trim();
    console.log('üéØ Player name:', playerName);
    
    if (!playerName) {
        alert('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è!');
        return;
    }
    
    if (playerName.length < 2 || playerName.length > 20) {
        alert('–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤!');
        return;
    }
    
    if (!socket.connected) {
        console.error('‚ùå Socket not connected');
        alert('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        return;
    }
    
    console.log('üéØ Joining game with name:', playerName);
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    if (joinBtn) {
        joinBtn.disabled = true;
        joinBtn.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
    }
    
    socket.emit('join-game', { playerName: playerName });
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞
    setTimeout(() => {
        if (joinBtn && joinBtn.disabled) {
            joinBtn.disabled = false;
            joinBtn.textContent = '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ';
        }
    }, 5000);
}

// –ï–î–ò–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('üì± DOM loaded, initializing...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const playerNameInput = document.getElementById('playerNameInput');
    const joinGameBtn = document.getElementById('joinGameBtn');
    
    console.log('üîç Elements check:');
    console.log('- playerNameInput:', playerNameInput ? '‚úÖ' : '‚ùå');
    console.log('- joinGameBtn:', joinGameBtn ? '‚úÖ' : '‚ùå');
    
    if (!playerNameInput || !joinGameBtn) {
        console.error('‚ùå Critical elements missing!');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
    showLoginScreen();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    playerNameInput.addEventListener('keypress', function(e) {
        console.log('üéØ Key pressed:', e.key);
        if (e.key === 'Enter') {
            e.preventDefault();
            joinGame();
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    joinGameBtn.addEventListener('click', function(e) {
        e.preventDefault();
        console.log('üéØ Join button clicked');
        joinGame();
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('modal')) {
            e.target.style.display = 'none';
        }
    });
    
    console.log('‚úÖ DOM initialization complete');
});

// === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô SOCKET.IO ===

socket.on('connect', function() {
    console.log('üåê Connected to server');
    console.log('üîó Socket ID:', socket.id);
    
    showLoginScreen();
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
    const joinBtn = document.getElementById('joinGameBtn');
    if (joinBtn && joinBtn.disabled) {
        joinBtn.disabled = false;
        joinBtn.textContent = '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ';
    }
});

socket.on('connect_error', function(error) {
    console.error('‚ùå Connection error:', error);
    alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
});

socket.on('disconnect', function(reason) {
    console.log('‚ùå Disconnected from server:', reason);
    alert('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
});

socket.on('error', function(errorMessage) {
    console.error('‚ùå Server error:', errorMessage);
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    const joinBtn = document.getElementById('joinGameBtn');
    if (joinBtn) {
        joinBtn.disabled = false;
        joinBtn.textContent = '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ';
    }
    
    alert('–û—à–∏–±–∫–∞: ' + errorMessage);
});

socket.on('join-confirmed', function(data) {
    console.log('‚úÖ Join confirmed:', data);
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    const joinBtn = document.getElementById('joinGameBtn');
    if (joinBtn) {
        joinBtn.disabled = false;
        joinBtn.textContent = '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ';
    }
    
    gameState.playerId = data.playerId;
    gameState.playerName = data.playerName;
    gameState.isHost = data.isHost;
    gameState.maxPlayers = data.maxPlayers;
    gameState.startRoundVotes = data.startRoundVotes || 0;
    gameState.gamePhase = 'lobby';
    showLobbyScreen();
});

socket.on('player-joined', function(data) {
    console.log('üëã Player joined:', data);
    gameState.players = data.players;
    gameState.maxPlayers = data.maxPlayers;
    gameState.startRoundVotes = data.startRoundVotes || 0; // –î–û–ë–ê–í–õ–Ø–ï–ú
    updateLobbyDisplay();
});

socket.on('player-left', function(data) {
    console.log('üëã Player left:', data);
    gameState.players = data.players;
    gameState.serverGameState = data.gameState;
    updateLobbyDisplay();
});

socket.on('max-players-changed', function(data) {
    console.log('üîß Max players changed:', data);
    gameState.maxPlayers = data.maxPlayers;
    gameState.players = data.players;
    updateLobbyDisplay();
});

socket.on('game-started', function(data) {
    console.log('üöÄ Game started:', data);
    gameState.players = data.players;
    gameState.serverGameState = data.gameState;
    gameState.gamePhase = data.gamePhase;
    gameState.currentRound = data.currentRound;
    gameState.timeLeft = data.timeLeft;
    gameState.startRoundVotes = 0;
    gameState.myStartRoundVote = false;
    // gameState.scenario = data.scenario; // –£–ë–ò–†–ê–ï–ú - —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–∏–¥–µ—Ç –ø–æ–∑–∂–µ
    showGameScreen();
});

socket.on('game-reset', function(data) {
    console.log('üîÑ Game reset:', data);
    gameState.players = data.players;
    gameState.serverGameState = data.gameState;
    gameState.gamePhase = 'lobby';
    gameState.currentRound = 1;
    gameState.timeLeft = 0;
    gameState.currentTurnPlayer = null;
    showLobbyScreen();
});

socket.on('phase-changed', function(data) {
    console.log('üîÑ Phase changed:', data);
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.currentTurnPlayer = data.currentTurnPlayer || null;
    gameState.currentRound = data.currentRound || gameState.currentRound;
    
    // –î–û–ë–ê–í–õ–Ø–ï–ú: –ü–æ–ª—É—á–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–∑—ã
    if (data.scenario) {
        gameState.scenario = data.scenario;
        console.log('üé≤ Scenario received:', data.scenario.title);
    }
    
    gameState.requiredCardsThisRound = getRequiredCardsForRound(gameState.currentRound);
    
    if (data.gamePhase !== 'discussion') {
        gameState.skipDiscussionVotes = 0;
        gameState.mySkipVote = false;
    }
    
    if (data.gamePhase !== 'voting') {
        gameState.myVote = null;
        gameState.hasChangedVote = false;
    }
    
    if (data.gamePhase === 'revelation') {
        gameState.cardsRevealedThisRound = 0;
    }
    
    updateGameDisplay();
});

socket.on('characteristic-revealed', function(data) {
    console.log('üîç Characteristic revealed:', data);
    gameState.players = data.players;
    
    if (data.playerId === gameState.playerId) {
        gameState.cardsRevealedThisRound = data.cardsRevealedThisRound;
        gameState.requiredCardsThisRound = data.requiredCards;
    }
    
    updatePlayersGrid();
});

socket.on('timer-update', function(data) {
    gameState.timeLeft = data.timeLeft;
    gameState.currentTurnPlayer = data.currentTurnPlayer;
    updateTimerDisplay();
    
    if (gameState.gamePhase === 'revelation') {
        updateGameDisplay();
    }
});

socket.on('vote-update', function(data) {
    console.log('üó≥Ô∏è Vote update:', data);
    gameState.players = data.players;
    gameState.votingResults = data.votingResults;
    gameState.canChangeVote = data.canChangeVote || {};
    updatePlayersGrid();
});

socket.on('justification-started', function(data) {
    console.log('‚öñÔ∏è Justification started:', data);
    gameState.currentJustifyingPlayer = data.justifyingPlayer?.id;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.gamePhase = 'justification';
    updateGameDisplay();
});

socket.on('second-voting-started', function(data) {
    console.log('üó≥Ô∏è Second voting started:', data);
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.canChangeVote = data.canChangeVote || {};
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ç–æ—Ä–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
    if (data.isSecondVoting) {
        showNotification('–í—Ç–æ—Ä–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', '–ò–≥—Ä–æ–∫–∏ –æ–ø—Ä–∞–≤–¥–∞–ª–∏—Å—å. –ì–æ–ª–æ—Å—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å—Ä–µ–¥–∏ –Ω–∏—Ö.');
    }
    
    updateGameDisplay();
});

socket.on('skip-discussion-vote-update', function(data) {
    console.log('‚è≠Ô∏è Skip discussion vote update:', data);
    gameState.skipDiscussionVotes = data.votes;
    gameState.mySkipVote = data.hasVoted;
    
    // –û–ë–ù–û–í–õ–Ø–ï–ú –∫–Ω–æ–ø–∫—É –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
    updateRoundActions();
});

socket.on('discussion-skipped', function(data) {
    console.log('‚è≠Ô∏è Discussion skipped:', data);
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.skipDiscussionVotes = 0;
    gameState.mySkipVote = false;
    updateGameDisplay();
});

socket.on('round-results', function(data) {
    console.log('üìä Round results:', data);
    gameState.players = data.players;
    gameState.votingResults = data.votingResults;
    updateGameDisplay();
    
    if (data.eliminatedPlayer) {
        showNotification('–ò–≥—Ä–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω', `${data.eliminatedPlayer} –ø–æ–∫–∏–¥–∞–µ—Ç –±—É–Ω–∫–µ—Ä`);
    } else {
        showNotification('–ù–∏—á—å—è', '–ù–∏–∫—Ç–æ –Ω–µ –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ');
    }
});

socket.on('new-round', function(data) {
    console.log('üîÑ New round:', data);
    gameState.currentRound = data.currentRound;
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.startRoundVotes = 0;      // –î–û–ë–ê–í–õ–Ø–ï–ú: —Å–±—Ä–æ—Å –≥–æ–ª–æ—Å–æ–≤
    gameState.myStartRoundVote = false; // –î–û–ë–ê–í–õ–Ø–ï–ú: —Å–±—Ä–æ—Å –º–æ–µ–≥–æ –≥–æ–ª–æ—Å–∞
    updateGameDisplay();
});

socket.on('game-ended', function(data) {
    console.log('üèÅ Game ended:', data);
    gameState.players = data.players;
    gameState.gamePhase = 'finished';
    updateGameDisplay();
    
    const winners = data.winners.map(p => p.name).join(', ');
    showNotification('–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', `–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: ${winners}`);
});

socket.on('player-surrendered', function(data) {
    console.log('üè≥Ô∏è Player surrendered:', data);
    gameState.players = data.players;
    updatePlayersGrid();
    
    const isMe = data.surrenderedPlayer === gameState.playerName;
    const message = isMe ? '–í—ã —Å–¥–∞–ª–∏—Å—å –∏ –ø–æ–∫–∏–Ω—É–ª–∏ –∏–≥—Ä—É.' : `${data.surrenderedPlayer} —Å–¥–∞–ª—Å—è –∏ –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É.`;
    
    showNotification('–ò–≥—Ä–æ–∫ —Å–¥–∞–ª—Å—è', message);
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –Ω–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞
socket.on('start-round-vote-update', function(data) {
    console.log('üéØ Start round vote update:', data);
    gameState.startRoundVotes = data.votes;
    gameState.myStartRoundVote = data.hasVoted;
    updateRoundActions();
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–∞—Ä—Ç –¥–µ–π—Å—Ç–≤–∏–π
socket.on('action-card-used', function(data) {
    console.log('‚ú® Action card used:', data);
    gameState.players = data.players;
    
    updatePlayersGrid();
    
    const message = data.targetId 
        ? `${data.playerName} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–∞—Ä—Ç—É "${data.cardName}"`
        : `${data.playerName} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–∞—Ä—Ç—É "${data.cardName}"`;
    
    showNotification('–ö–∞—Ä—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è', message);
});

socket.on('detective-result', function(data) {
    console.log('üîç Detective result:', data);
    
    const message = `–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ ${data.targetName}:\n${translateCharacteristic(data.characteristic)}: ${data.value}`;
    showNotification('–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ç–∏–≤–∞', message);
});

// === –§–£–ù–ö–¶–ò–ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –≠–ö–†–ê–ù–û–í ===

function showScreen(screenId) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    const screens = document.querySelectorAll('.screen');
    screens.forEach(screen => {
        screen.style.display = 'none';
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.style.display = 'block';
    }
}

function showLoginScreen() {
    console.log('üì± Showing login screen');
    showScreen('loginScreen');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    const nameInput = document.getElementById('playerNameInput');
    if (nameInput) {
        nameInput.focus();
    }
}

function showLobbyScreen() {
    console.log('üì± Showing lobby screen');
    showScreen('lobbyScreen');
    updateLobbyDisplay();
}

function showGameScreen() {
    console.log('üì± Showing game screen');
    console.log('üéÆ Game state:', {
        phase: gameState.gamePhase,
        players: gameState.players.length,
        playerId: gameState.playerId
    });
    
    showScreen('gameScreen');
    updateGameDisplay();
}

function showResultsScreen() {
    console.log('üì± Showing results screen');
    showScreen('resultsScreen');
}

// === –§–£–ù–ö–¶–ò–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø –õ–û–ë–ë–ò ===

function updateLobbyDisplay() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤
    const currentPlayersCount = document.getElementById('currentPlayersCount');
    const maxPlayersCount = document.getElementById('maxPlayersCount');
    const playersList = document.getElementById('playersList');
    const startGameBtn = document.getElementById('startGameBtn');
    const waitingInfo = document.getElementById('waitingInfo');
    const maxPlayersSelector = document.getElementById('maxPlayersSelector');
    
    if (currentPlayersCount) {
        currentPlayersCount.textContent = gameState.players.length;
    }
    
    if (maxPlayersCount) {
        maxPlayersCount.textContent = gameState.maxPlayers;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    if (playersList) {
        playersList.innerHTML = '';
        gameState.players.forEach(player => {
            const li = document.createElement('li');
            li.className = player.isHost ? 'host' : '';
            li.textContent = `${player.name}${player.isHost ? ' (–•–æ—Å—Ç)' : ''}`;
            playersList.appendChild(li);
        });
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    if (gameState.isHost) {
        if (startGameBtn) {
            startGameBtn.style.display = 'block';
            startGameBtn.disabled = gameState.players.length < 2;
            
            // –û–ë–ù–û–í–õ–Ø–ï–ú —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            if (gameState.players.length < 2) {
                startGameBtn.textContent = '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É (–º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞)';
            } else {
                startGameBtn.textContent = '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É';
            }
        }
        if (waitingInfo) {
            waitingInfo.style.display = 'none';
        }
        if (maxPlayersSelector) {
            maxPlayersSelector.style.display = 'block';
        }
    } else {
        if (startGameBtn) {
            startGameBtn.style.display = 'none';
        }
        if (waitingInfo) {
            waitingInfo.style.display = 'block';
        }
        if (maxPlayersSelector) {
            maxPlayersSelector.style.display = 'none';
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
    const maxPlayersSelect = document.getElementById('maxPlayersSelect');
    if (maxPlayersSelect) {
        maxPlayersSelect.value = gameState.maxPlayers;
    }
}

// === –§–£–ù–ö–¶–ò–ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –≠–ö–†–ê–ù–û–í ===

function showScreen(screenId) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    const screens = document.querySelectorAll('.screen');
    screens.forEach(screen => {
        screen.style.display = 'none';
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.style.display = 'block';
    }
}

function showLoginScreen() {
    console.log('üì± Showing login screen');
    showScreen('loginScreen');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    const nameInput = document.getElementById('playerNameInput');
    if (nameInput) {
        nameInput.focus();
    }
}

function showLobbyScreen() {
    console.log('üì± Showing lobby screen');
    showScreen('lobbyScreen');
    updateLobbyDisplay();
}

function showGameScreen() {
    console.log('üì± Showing game screen');
    console.log('üéÆ Game state:', {
        phase: gameState.gamePhase,
        players: gameState.players.length,
        playerId: gameState.playerId
    });
    
    showScreen('gameScreen');
    updateGameDisplay();
}

function showResultsScreen() {
    console.log('üì± Showing results screen');
    showScreen('resultsScreen');
}

// === –§–£–ù–ö–¶–ò–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø –õ–û–ë–ë–ò ===

function updateLobbyDisplay() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤
    const currentPlayersCount = document.getElementById('currentPlayersCount');
    const maxPlayersCount = document.getElementById('maxPlayersCount');
    const playersList = document.getElementById('playersList');
    const startGameBtn = document.getElementById('startGameBtn');
    const waitingInfo = document.getElementById('waitingInfo');
    const maxPlayersSelector = document.getElementById('maxPlayersSelector');
    
    if (currentPlayersCount) {
        currentPlayersCount.textContent = gameState.players.length;
    }
    
    if (maxPlayersCount) {
        maxPlayersCount.textContent = gameState.maxPlayers;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    if (playersList) {
        playersList.innerHTML = '';
        gameState.players.forEach(player => {
            const li = document.createElement('li');
            li.className = player.isHost ? 'host' : '';
            li.textContent = `${player.name}${player.isHost ? ' (–•–æ—Å—Ç)' : ''}`;
            playersList.appendChild(li);
        });
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    if (gameState.isHost) {
        if (startGameBtn) {
            startGameBtn.style.display = 'block';
            startGameBtn.disabled = gameState.players.length < 2;
            
            // –û–ë–ù–û–í–õ–Ø–ï–ú —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            if (gameState.players.length < 2) {
                startGameBtn.textContent = '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É (–º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞)';
            } else {
                startGameBtn.textContent = '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É';
            }
        }
        if (waitingInfo) {
            waitingInfo.style.display = 'none';
        }
        if (maxPlayersSelector) {
            maxPlayersSelector.style.display = 'block';
        }
    } else {
        if (startGameBtn) {
            startGameBtn.style.display = 'none';
        }
        if (waitingInfo) {
            waitingInfo.style.display = 'block';
        }
        if (maxPlayersSelector) {
            maxPlayersSelector.style.display = 'none';
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
    const maxPlayersSelect = document.getElementById('maxPlayersSelect');
    if (maxPlayersSelect) {
        maxPlayersSelect.value = gameState.maxPlayers;
    }
}

// === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò–ì–†–´ ===

function joinGame() {
    console.log('üéØ joinGame function called');
    
    const nameInput = document.getElementById('playerNameInput');
    if (!nameInput) {
        console.error('‚ùå Name input not found');
        return;
    }
    
    const playerName = nameInput.value.trim();
    console.log('üéØ Player name:', playerName);
    
    if (!playerName) {
        showNotification('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è!');
        return;
    }
    
    if (playerName.length < 2 || playerName.length > 20) {
        showNotification('–û—à–∏–±–∫–∞', '–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤!');
        return;
    }
    
    if (!socket.connected) {
        console.error('‚ùå Socket not connected');
        showNotification('–û—à–∏–±–∫–∞', '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        return;
    }
    
    console.log('üéØ Joining game with name:', playerName);
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    const joinBtn = document.getElementById('joinGameBtn');
    if (joinBtn) {
        joinBtn.disabled = true;
        joinBtn.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
    }
    
    socket.emit('join-game', { playerName: playerName });
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞
    setTimeout(() => {
        if (joinBtn && joinBtn.disabled) {
            joinBtn.disabled = false;
            joinBtn.textContent = '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ';
        }
    }, 5000);
}

function startGame() {
    console.log('üöÄ Starting game...');
    socket.emit('start-game');
    // –í –Ω–∞—á–∞–ª–µ client.js (–∏–ª–∏ –≤–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞) –¥–æ–±–∞–≤—å—Ç–µ –º–∞—Å—Å–∏–≤ –∏—Å—Ç–æ—Ä–∏–π
const stories = [
  {
    title: '–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–π —Ä–∞–¥–∏–æ–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫',
    description: '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ –æ–±–ª–æ–º–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ —Ä–∞–¥–∏–æ–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞, –ø–æ –ª–µ–≥–µ–Ω–¥–µ –ø–µ—Ä–µ–¥–∞–≤—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª –≤—ã–∂–∏–≤—à–∏—Ö –ø–µ—Ä–µ–¥ –±–æ–ª—å—à–∏–º —Å–æ–±—ã—Ç–∏–µ–º‚Ä¶'
  },
  {
    title: '–¢–∞–π–Ω–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è',
    description: '–ì–¥–µ-—Ç–æ –ø–æ–¥ –±—É–Ω–∫–µ—Ä–æ–º —Å–∫—Ä—ã—Ç–∞ –∑–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è. –ì–æ–≤–æ—Ä—è—Ç, —Ç–∞–º –æ—Å—Ç–∞–ª–∏—Å—å –æ–±—Ä–∞–∑—Ü—ã –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –≤–∏—Ä—É—Å–∞‚Ä¶'
  },
  {
    title: '–ü—Ä–∏–≤–µ—Ç –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ',
    description: '–í –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ —Å—Ç–∞—Ä—É—é –∫–∞—Å—Å–µ—Ç—É —Å –∑–∞–ø–∏—Å—å—é. –ù–∞ –Ω–µ–π ‚Äî –≥–æ–ª–æ—Å–∞ –¥–∞–≤–Ω–æ —É–º–µ—Ä—à–∏—Ö‚Ä¶'
  },
  // ‚Ä¶–¥–æ–±–∞–≤—å—Ç–µ —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ —Å–≤–æ–∏—Ö –∏—Å—Ç–æ—Ä–∏–π
];

// –í —Ñ—É–Ω–∫—Ü–∏–∏ startGame() (–∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ‚Äú–ù–∞—á–∞—Ç—å –∏–≥—Ä—É‚Äù)
function startGame() {
  // 1) –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
  const idx = Math.floor(Math.random() * stories.length);
  const story = stories[idx];

  // 2) –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∏–≥—Ä—ã
  document.getElementById('loginScreen').style.display = 'none';
  document.getElementById('lobbyScreen').style.display = 'none';
  document.getElementById('gameScreen').style.display = 'flex';

  // 3) –û–±–Ω–æ–≤–ª—è–µ–º DOM-–±–ª–æ–∫ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
  document.getElementById('storyTitle').textContent = story.title;
  document.getElementById('storyDescription').textContent = story.description;

  // 4) –û—Å—Ç–∞–ª—å–Ω–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã‚Ä¶
  // initPlayers(), setupTimer(), socket.emit('startGame') –∏ —Ç.–¥.
}
}

function startRound() {
    if (gameState.myStartRoundVote) {
        showNotification('–ì–æ–ª–æ—Å —É–∂–µ —É—á—Ç–µ–Ω', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –Ω–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞');
        return;
    }
    
    console.log('üéØ Voting to start round');
    socket.emit('start-round');
}

function changeMaxPlayers() {
    const select = document.getElementById('maxPlayersSelect');
    const newMaxPlayers = parseInt(select.value);
    
    console.log('üîß Changing max players to:', newMaxPlayers);
    socket.emit('change-max-players', { maxPlayers: newMaxPlayers });
}

// === –§–£–ù–ö–¶–ò–ò –ò–ì–†–û–í–û–ì–û –ü–†–û–¶–ï–°–°–ê ===

function getRequiredCardsForRound(round) {
    if (round === 1) {
        return 2; // –ü—Ä–æ—Ñ–µ—Å—Å–∏—è + 1 –∫–∞—Ä—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä
    } else {
        return 1; // 1 –∫–∞—Ä—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
function updateStoryDisplay() {
    const storyText = document.getElementById('storyText');
    
    if (!storyText) return;
    
    // –ü–æ–∫–∞ –∏—Å—Ç–æ—Ä–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    if (!gameState.scenario) {
        storyText.textContent = '–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...';
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
    storyText.textContent = gameState.scenario.description || '–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...';
}

// –û–ë–ù–û–í–õ–Ø–ï–ú —Ñ—É–Ω–∫—Ü–∏—é updateGameDisplay
function updateGameDisplay() {
    console.log('üéÆ Updating game display. Phase:', gameState.gamePhase, 'Players:', gameState.players.length);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—É–Ω–¥–µ
    const currentRoundElement = document.getElementById('currentRound');
    const gameStatusElement = document.getElementById('gameStatus');
    const phaseDisplayElement = document.getElementById('phaseDisplay');
    
    if (currentRoundElement) {
        currentRoundElement.textContent = gameState.currentRound;
    }
    
    if (gameStatusElement) {
        gameStatusElement.textContent = getGameStatusText();
    }
    
    if (phaseDisplayElement) {
        phaseDisplayElement.textContent = getPhaseDisplayText();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    updateStoryDisplay();
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    updateRoundActions();
    updatePlayersGrid();
    updateTimerDisplay();
    
    console.log('‚úÖ Game display updated');
}

// –ò–°–ü–†–ê–í–õ–Ø–ï–ú —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
function updateRoundActions() {
    console.log('üéØ Updating round actions. Phase:', gameState.gamePhase, 'My ID:', gameState.playerId);
    
    const roundActions = document.getElementById('roundActions');
    const startRoundBtn = document.getElementById('startRoundBtn');
    const skipDiscussionBtn = document.getElementById('skipDiscussionBtn');
    const finishJustificationBtn = document.getElementById('finishJustificationBtn');
    const surrenderBtn = document.getElementById('surrenderBtn');
    
    if (!roundActions) {
        console.error('‚ùå roundActions element not found');
        return;
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (startRoundBtn) startRoundBtn.style.display = 'none';
    if (skipDiscussionBtn) skipDiscussionBtn.style.display = 'none';
    if (finishJustificationBtn) finishJustificationBtn.style.display = 'none';
    if (surrenderBtn) surrenderBtn.style.display = 'none';
    
    const isMyTurn = gameState.currentTurnPlayer === gameState.playerId;
    const isMyJustification = gameState.currentJustifyingPlayer === gameState.playerId;
    const alivePlayers = gameState.players.filter(p => p.isAlive);
    const amAlive = alivePlayers.some(p => p.id === gameState.playerId);
    
    let hasVisibleButtons = false;
    
    console.log('üéØ Phase check:', {
        phase: gameState.gamePhase,
        amAlive: amAlive,
        playerId: gameState.playerId,
        alivePlayers: alivePlayers.length
    });
    
    switch (gameState.gamePhase) {
        case 'preparation':
            // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Å–µ–º –∂–∏–≤—ã–º –∏–≥—Ä–æ–∫–∞–º
            if (startRoundBtn && amAlive) {
                startRoundBtn.style.display = 'block';
                hasVisibleButtons = true;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–æ–ª–æ—Å–∞—Ö
                const requiredVotes = 2;
                const currentVotes = gameState.startRoundVotes || 0;
                
                if (gameState.myStartRoundVote) {
                    startRoundBtn.textContent = `üéØ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ (${currentVotes}/${requiredVotes})`;
                    startRoundBtn.disabled = true;
                    startRoundBtn.classList.add('voted-skip');
                } else {
                    startRoundBtn.textContent = `üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥ (${currentVotes}/${requiredVotes})`;
                    startRoundBtn.disabled = false;
                    startRoundBtn.classList.remove('voted-skip');
                }
                
                console.log('‚úÖ Start round button shown');
            }
            break;
            
        case 'discussion':
            if (skipDiscussionBtn && amAlive) {
                skipDiscussionBtn.style.display = 'block';
                hasVisibleButtons = true;
                
                const skipVotesCount = document.getElementById('skipVotesCount');
                if (skipVotesCount) {
                    skipVotesCount.textContent = gameState.skipDiscussionVotes || 0;
                }
                
                if (gameState.mySkipVote) {
                    skipDiscussionBtn.classList.add('voted-skip');
                    skipDiscussionBtn.disabled = true;
                } else {
                    skipDiscussionBtn.classList.remove('voted-skip');
                    skipDiscussionBtn.disabled = false;
                }
            }
            break;
            
        case 'justification':
            if (isMyJustification) {
                if (finishJustificationBtn) {
                    finishJustificationBtn.style.display = 'block';
                    hasVisibleButtons = true;
                }
                if (surrenderBtn) {
                    surrenderBtn.style.display = 'block';
                    hasVisibleButtons = true;
                }
            }
            break;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
    roundActions.style.display = hasVisibleButtons ? 'flex' : 'none';
    
    console.log('üéØ Round actions updated. Visible:', hasVisibleButtons);
}

function getGameStatusText() {
    switch (gameState.gamePhase) {
        case 'preparation': 
            return '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞—É–Ω–¥—É';
        case 'revelation': 
            const currentPlayer = gameState.players.find(p => p.id === gameState.currentTurnPlayer);
            if (currentPlayer) {
                const isMyTurn = currentPlayer.id === gameState.playerId;
                const requiredCards = getRequiredCardsForRound(gameState.currentRound);
                const revealedCards = currentPlayer.cardsRevealedThisRound || 0;
                
                if (isMyTurn) {
                    if (gameState.currentRound === 1) {
                        if (revealedCards === 0) {
                            return '–í–∞—à —Ö–æ–¥: –†–∞—Å–∫—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é';
                        } else if (revealedCards === 1) {
                            return '–í–∞—à —Ö–æ–¥: –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É';
                        } else {
                            return '–í–∞—à —Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω';
                        }
                    } else {
                        if (revealedCards === 0) {
                            return '–í–∞—à —Ö–æ–¥: –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É';
                        } else {
                            return '–í–∞—à —Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω';
                        }
                    }
                } else {
                    return `–•–æ–¥ –∏–≥—Ä–æ–∫–∞: ${currentPlayer.name}`;
                }
            }
            return '–†–∞—Å–∫—Ä—ã—Ç–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫';
        case 'discussion': 
            return '–§–∞–∑–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è';
        case 'voting': 
            // –î–û–ë–ê–í–õ–Ø–ï–ú –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
            const justificationQueue = gameState.players.filter(p => p.id === gameState.currentJustifyingPlayer);
            if (justificationQueue.length > 0) {
                return '–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ';
            }
            return '–§–∞–∑–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è';
        case 'justification':
            const justifyingPlayer = gameState.players.find(p => p.id === gameState.currentJustifyingPlayer);
            if (justifyingPlayer) {
                const isMyJustification = justifyingPlayer.id === gameState.playerId;
                return `–û–ø—Ä–∞–≤–¥–∞–Ω–∏–µ: ${isMyJustification ? '–í–∞—à —á–µ—Ä–µ–¥' : justifyingPlayer.name}`;
            }
            return '–§–∞–∑–∞ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è';
        case 'results': 
            return '–ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ —Ä–∞—É–Ω–¥–∞';
        case 'finished': 
            return '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
        default: 
            return '–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...';
    }
}

function getPhaseDisplayText() {
    const statusText = getGameStatusText();
    
    if (gameState.gamePhase === 'revelation' && gameState.currentTurnPlayer === gameState.playerId) {
        return `${statusText}`;
    }
    
    return statusText;
}

function updateTimerDisplay() {
    const timerElement = document.getElementById('timerDisplay');
    if (timerElement && gameState.timeLeft >= 0) {
        const minutes = Math.floor(gameState.timeLeft / 60);
        const seconds = gameState.timeLeft % 60;
        timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }
}

function updatePlayersGrid() {
    console.log('üéÆ Updating players grid. Players:', gameState.players.length);
    
    const playersGrid = document.getElementById('playersGrid');
    
    if (!playersGrid) {
        console.error('‚ùå playersGrid element not found');
        return;
    }

    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–≥—Ä–æ–∫–∏
    if (!gameState.players || gameState.players.length === 0) {
        console.log('‚ö†Ô∏è No players to display');
        playersGrid.innerHTML = '<div style="color: #ecf0f1; text-align: center; padding: 20px;">–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';
        playersGrid.style.display = 'block'; // –î–û–ë–ê–í–õ–Ø–ï–ú: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º
        return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ª–∏–¥–µ—Ä–æ–≤
    let maxVotes = 0;
    if (gameState.gamePhase === 'voting' || gameState.gamePhase === 'justification' || gameState.gamePhase === 'results') {
        const alivePlayers = gameState.players.filter(p => p.isAlive);
        maxVotes = Math.max(...alivePlayers.map(p => p.votes || 0));
    }
    
    playersGrid.innerHTML = '';
    playersGrid.className = `players-grid players-${gameState.players.length}`;
    playersGrid.style.display = 'grid'; // –î–û–ë–ê–í–õ–Ø–ï–ú: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º display
    
    gameState.players.forEach(player => {
        const playerCard = createPlayerCard(player);
        
        // –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
        if (player.isAlive && (player.votes || 0) === maxVotes && maxVotes > 0) {
            playerCard.classList.add('most-voted');
        }
        
        playersGrid.appendChild(playerCard);
    });
    
    console.log('‚úÖ Players grid updated:', gameState.players.length, 'players');
}

function createPlayerCard(player) {
    const card = document.createElement('div');
    const isCurrentPlayer = player.id === gameState.playerId;
    const isCurrentTurn = player.id === gameState.currentTurnPlayer;
    const isJustifying = player.id === gameState.currentJustifyingPlayer;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    const hasDoubleVote = player.activeEffects && player.activeEffects.doubleVote;
    
    card.className = `player-card ${player.isAlive ? '' : 'eliminated'} ${isCurrentPlayer ? 'current-player' : ''} ${isCurrentTurn ? 'current-turn' : ''} ${isJustifying ? 'justifying' : ''} ${hasDoubleVote ? 'double-vote' : ''}`;
    
    const characteristicOrder = ['profession', 'health', 'hobby', 'phobia', 'baggage', 'fact1', 'fact2'];
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    let turnInfo = '';
    if (isCurrentTurn && gameState.gamePhase === 'revelation' && isCurrentPlayer) {
        const requiredCards = getRequiredCardsForRound(gameState.currentRound);
        const revealedCards = player.cardsRevealedThisRound || 0;
        
        if (gameState.currentRound === 1) {
            if (revealedCards === 0) {
                turnInfo = '<div class="turn-info">üìã –†–∞—Å–∫—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é</div>';
            } else if (revealedCards === 1) {
                turnInfo = '<div class="turn-info">üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É</div>';
            }
        } else {
            if (revealedCards === 0) {
                turnInfo = '<div class="turn-info">üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É</div>';
            }
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
    let votingInfo = '';
    if (gameState.gamePhase === 'voting' || gameState.gamePhase === 'justification' || gameState.gamePhase === 'results') {
        const votesForPlayer = player.votes || 0;
        if (votesForPlayer > 0) {
            const votersForThisPlayer = getVotersForPlayer(player.id);
            votingInfo = `
                <div class="voting-info">
                    <div class="votes-count">–ì–æ–ª–æ—Å–æ–≤: ${votesForPlayer}</div>
                    ${votersForThisPlayer.length > 0 ? `

                        <div class="voters-list">
                            –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏: ${votersForThisPlayer.join(', ')}
                        </div>
                    ` : ''}
                </div>
            `;
        } else if (player.isAlive) {
            votingInfo = '<div class="voting-info"><div class="votes-count">–ì–æ–ª–æ—Å–æ–≤: 0</div></div>';
        }
        
        if (player.isAlive && player.hasVoted && player.votedFor) {
            const votedForPlayer = gameState.players.find(p => p.id === player.votedFor);
            if (votedForPlayer) {
                votingInfo += `
                    <div class="voted-for-info">
                        ${isCurrentPlayer ? '–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏' : player.name + ' –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª'} –∑–∞: 
                        <strong class="voted-target">${votedForPlayer.name}</strong>
                    </div>
                `;
            }
        } else if (player.isAlive && gameState.gamePhase === 'voting') {
            votingInfo += `
                <div class="voted-for-info not-voted">
                    ${isCurrentPlayer ? '–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏' : player.name + ' –µ—â–µ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª'}
                </div>
            `;
        }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–∞—Ä—Ç—ã –¥–µ–π—Å—Ç–≤–∏—è –ë–ï–ó –°–û–î–ï–†–ñ–ò–ú–û–ì–û
    let actionCardIndicator = '';
    if (player.actionCards && player.actionCards.length > 0) {
        const actionCard = player.actionCards[0];
        const canUse = actionCard.usesLeft > 0;
        const isOwner = isCurrentPlayer;
        
        const indicatorClass = `action-card-indicator ${!canUse ? 'used' : ''} ${!isOwner ? 'not-owner' : ''}`;
        const clickHandler = isOwner && canUse ? `onclick="showActionCard('${actionCard.id}')"` : '';
        
        // –£–ë–ò–†–ê–ï–ú –ò–ö–û–ù–ö–£ - –ø—Ä–æ—Å—Ç–æ –ø—É—Å—Ç–æ–π –∫—Ä—É–∂–æ–∫
        actionCardIndicator = `
            <div class="${indicatorClass}" ${clickHandler} title="${actionCard.name}">
            </div>
        `;
    }
    
    card.innerHTML = `
        <div class="player-header">
            <div class="player-info">
                <div class="player-avatar-container">
                    <div class="player-avatar ${player.isAlive ? '' : 'eliminated-avatar'}">
                        ${player.name.charAt(0).toUpperCase()}
                    </div>
                    ${actionCardIndicator}
                    ${hasDoubleVote ? '<div class="double-vote-indicator">üó≥Ô∏è√ó2</div>' : ''}
                </div>
                <div>
                    <div class="player-name ${player.isAlive ? '' : 'eliminated-name'}">
                        ${player.name}${player.isHost ? ' üëë' : ''}
                    </div>
                    ${isCurrentPlayer ? '<div class="player-status current">–í–´</div>' : ''}
                    ${isCurrentTurn ? '<div class="player-status turn">–í–∞—à —Ö–æ–¥!</div>' : ''}
                    ${isJustifying ? '<div class="player-status justifying">üé§ –û–ø—Ä–∞–≤–¥—ã–≤–∞–µ—Ç—Å—è</div>' : ''}
                    ${turnInfo}
                    ${votingInfo}
                </div>
            </div>
        </div>
        
        <div class="characteristics">
            ${characteristicOrder.map(key => {
                if (!player.characteristics || !player.characteristics[key]) return '';
                
                const isRevealed = player.revealedCharacteristics && player.revealedCharacteristics.includes(key);
                const isOwnCard = isCurrentPlayer;
                
                let canReveal = false;
                if (isCurrentPlayer && isCurrentTurn && !isRevealed && gameState.gamePhase === 'revelation') {
                    const requiredCards = getRequiredCardsForRound(gameState.currentRound);
                    const revealedCards = player.cardsRevealedThisRound || 0;
                    
                    if (revealedCards < requiredCards) {
                        if (gameState.currentRound === 1) {
                            if (revealedCards === 0 && key === 'profession') {
                                canReveal = true;
                            } else if (revealedCards === 1 && key !== 'profession') {
                                canReveal = true;
                            }
                        } else {
                            canReveal = true;
                        }
                    }
                }
                
                return `<div class="characteristic ${isRevealed ? 'revealed' : (isOwnCard ? 'own-hidden' : 'hidden')} ${canReveal ? 'clickable' : ''}" 
                    ${canReveal ? `onclick="confirmRevealCharacteristic('${key}')"` : ''}>
                    <span class="characteristic-name">${translateCharacteristic(key)}:</span>
                    <span class="characteristic-value ${isOwnCard && !isRevealed ? 'own-characteristic' : ''}">
                        ${isRevealed ? player.characteristics[key] : (isOwnCard ? player.characteristics[key] : '???')}
                    </span>
                </div>`;}
            ).join('')}
        </div>
        
        <div class="player-actions">
            ${gameState.gamePhase === 'voting' && !isCurrentPlayer && player.isAlive ? 
                getVotingButtons(player) : ''
            }
        </div>
    `;
    
    return card;
}

// –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–ê–†–¢ –î–ï–ô–°–¢–í–ò–ô
function showActionCard(cardId) {
    const me = gameState.players.find(p => p.id === gameState.playerId);
    if (!me || !me.actionCards) return;
    
    const actionCard = me.actionCards.find(card => card.id === parseInt(cardId));
    if (!actionCard) return;
    
    // –í –ú–û–î–ê–õ–¨–ù–û–ú –û–ö–ù–ï –ü–û–ö–ê–ó–´–í–ê–ï–ú –ò–ö–û–ù–ö–£
    document.getElementById('actionCardName').textContent = `${actionCard.icon || '‚ú®'} ${actionCard.name}`;
    document.getElementById('actionCardDescription').textContent = actionCard.description;
    
    const usesElement = document.getElementById('actionCardUses');
    const useButton = document.getElementById('useActionCardBtn');
    
    if (actionCard.usesLeft > 0) {
        usesElement.textContent = `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: ${actionCard.usesLeft}`;
        usesElement.className = 'action-card-uses';
        useButton.disabled = false;
        useButton.style.display = 'inline-block';
    } else {
        usesElement.textContent = '–ö–∞—Ä—Ç–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞';
        usesElement.className = 'action-card-uses no-uses';
        useButton.disabled = true;
        useButton.style.display = 'none';
    }
    
    window.currentActionCard = actionCard;
    document.getElementById('actionCardModal').style.display = 'flex';
}

function closeActionCardModal() {
    document.getElementById('actionCardModal').style.display = 'none';
    window.currentActionCard = null;
}

function useActionCard() {
    if (!window.currentActionCard) return;
    
    const card = window.currentActionCard;
    let targetId = null;
    
    // –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–∞—Ä—Ç –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å
    if (['investigative', 'protective', 'disruptive'].includes(card.type)) {
        const alivePlayers = gameState.players.filter(p => p.isAlive);
        const targetName = prompt(`–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –∫–∞—Ä—Ç—ã "${card.name}":\n` + 
            alivePlayers.map((p, i) => `${i + 1}. ${p.name}`).join('\n'));
        
        if (!targetName) return;
        
        const targetIndex = parseInt(targetName) - 1;
        if (targetIndex >= 0 && targetIndex < alivePlayers.length) {
            targetId = alivePlayers[targetIndex].id;
        } else {
            showNotification('–û—à–∏–±–∫–∞', '–ù–µ–≤–µ—Ä–Ω–æ –≤—ã–±—Ä–∞–Ω–∞ —Ü–µ–ª—å');
            return;
        }
    }
    
    console.log('‚ú® Using action card:', card.name, 'Target:', targetId);
    socket.emit('use-action-card', { 
        cardId: card.id, 
        targetId: targetId 
    });
    
    closeActionCardModal();
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤, –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
function getVotersForPlayer(playerId) {
    if (!gameState.votingResults || !gameState.votingResults[playerId]) {
        return [];
    }
    
    return gameState.votingResults[playerId].map(voterId => {
        const voter = gameState.players.find(p => p.id === voterId);
        return voter ? voter.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    });
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
function confirmRevealCharacteristic(characteristic) {
    const me = gameState.players.find(p => p.id === gameState.playerId);
    if (!me || !me.characteristics || !me.characteristics[characteristic]) {
        return;
    }
    
    document.getElementById('confirmCharacteristicName').textContent = translateCharacteristic(characteristic);
    document.getElementById('confirmCharacteristicValue').textContent = me.characteristics[characteristic];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    const requiredCards = getRequiredCardsForRound(gameState.currentRound);
    const revealedCards = me.cardsRevealedThisRound || 0;
    const progressElement = document.getElementById('revealProgress');
    
    if (progressElement) {
        progressElement.textContent = `–ö–∞—Ä—Ç —Ä–∞—Å–∫—Ä—ã—Ç–æ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ: ${revealedCards}/${requiredCards}`;
    }
    
    window.currentCharacteristic = characteristic;
    document.getElementById('confirmRevealModal').style.display = 'flex';
}

function confirmReveal() {
    if (window.currentCharacteristic) {
        socket.emit('reveal-characteristic', { characteristic: window.currentCharacteristic });
        document.getElementById('confirmRevealModal').style.display = 'none';
        window.currentCharacteristic = null;
    }
}

function cancelReveal() {
    document.getElementById('confirmRevealModal').style.display = 'none';
    window.currentCharacteristic = null;
}

function voteForPlayer(playerId) {
    console.log('üó≥Ô∏è Voting for player:', playerId);
    
    if (gameState.gamePhase !== 'voting') {
        showNotification('–û—à–∏–±–∫–∞', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
        return;
    }
    
    const me = gameState.players.find(p => p.id === gameState.playerId);
    if (!me || !me.isAlive) {
        showNotification('–û—à–∏–±–∫–∞', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
        return;
    }
    
    if (me.hasVoted && !gameState.canChangeVote[gameState.playerId]) {
        showNotification('–û—à–∏–±–∫–∞', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!');
        return;
    }
    
    if (me.hasVoted && gameState.canChangeVote[gameState.playerId]) {
        // –°–º–µ–Ω–∞ –≥–æ–ª–æ—Å–∞
        socket.emit('change-vote', { targetId: playerId });
        gameState.hasChangedVote = true;
    } else {
        // –ü–µ—Ä–≤–∏—á–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        socket.emit('vote-player', { targetId: playerId });
    }
}

function voteToSkipDiscussion() {
    console.log('‚è≠Ô∏è Voting to skip discussion');
    socket.emit('vote-skip-discussion');
}

function finishJustification() {
    console.log('‚úÖ Finishing justification');
    socket.emit('finish-justification');
}

function surrender() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å—Å—è? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        console.log('üè≥Ô∏è Surrendering');
        socket.emit('surrender');
    }
}

function translateCharacteristic(key) {
    const translations = {
        'profession': '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è',
        'health': '–ó–¥–æ—Ä–æ–≤—å–µ', 
        'hobby': '–•–æ–±–±–∏',
        'phobia': '–§–æ–±–∏—è',
        'baggage': '–ë–∞–≥–∞–∂',
        'fact1': '–§–∞–∫—Ç 1',
        'fact2': '–§–∞–∫—Ç 2'
    };
    return translations[key] || key;
}

function getVotingButtons(player) {
    const me = gameState.players.find(p => p.id === gameState.playerId);
    if (!me || !me.isAlive) return '';
    
    const hasVoted = me.hasVoted;
    const votedFor = me.votedFor;
    const canChange = gameState.canChangeVote[gameState.playerId] && !gameState.hasChangedVote;
    
    let buttonText = '–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å';
    let buttonClass = 'vote-player-btn';
    let isDisabled = false;
    
    if (hasVoted) {
        if (votedFor === player.id) {
            if (canChange) {
                buttonText = '–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å';
                buttonClass = 'vote-player-btn change-vote';
                isDisabled = false;
            } else {
                buttonText = '‚úÖ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–æ';
                buttonClass = 'vote-player-btn voted';
                isDisabled = true;
            }
        } else {
            if (canChange) {
                buttonText = '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞ —ç—Ç–æ–≥–æ';
                buttonClass = 'vote-player-btn change-vote';
                isDisabled = false;
            } else {
                buttonText = '–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å';
                buttonClass = 'vote-player-btn';
                isDisabled = true;
            }
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –≥–æ–ª–æ—Å–∞—Ö –≤ –∫–Ω–æ–ø–∫—É
    const currentVotes = player.votes || 0;
    if (currentVotes > 0) {
        buttonText += ` (${currentVotes})`;
    }
    
    return `
        <div class="vote-section">
            <button class="${buttonClass}" 
                    onclick="voteForPlayer('${player.id}')" 
                    ${isDisabled ? 'disabled' : ''}>
                ${buttonText}
            </button>
        </div>
    `;
}

function showNotification(title, message) {
    document.getElementById('notificationTitle').textContent = title;
    document.getElementById('notificationMessage').textContent = message;
    document.getElementById('notificationModal').style.display = 'flex';
}

function closeNotificationModal() {
    document.getElementById('notificationModal').style.display = 'none';
}

function showConnectionError(message) {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    let errorElement = document.getElementById('connectionError');
    if (!errorElement) {
        errorElement = document.createElement('div');
        errorElement.id = 'connectionError';
        errorElement.className = 'connection-error';
        errorElement.innerHTML = `
            <div class="error-content">
                <h3>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h3>
                <p id="errorMessage">${message}</p>
                <button class="room-btn" onclick="location.reload()">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</button>
            </div>
        `;
        document.body.appendChild(errorElement);
    } else {
        document.getElementById('errorMessage').textContent = message;
        errorElement.style.display = 'flex';
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º socket.on('error') –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∫–∞—Ä—Ç –¥–µ–π—Å—Ç–≤–∏–π
socket.on('error', function(errorMessage) {
    console.error('‚ùå Server error:', errorMessage);
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    const joinBtn = document.getElementById('joinGameBtn');
    if (joinBtn) {
        joinBtn.disabled = false;
        joinBtn.textContent = '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ';
    }
    
    showNotification('–û—à–∏–±–∫–∞', errorMessage);
});

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===

document.addEventListener('DOMContentLoaded', function() {
    console.log('üì± DOM loaded, initializing...');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    showLoginScreen();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    const playerNameInput = document.getElementById('playerNameInput');
    if (playerNameInput) {
        playerNameInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                joinGame();
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const joinGameBtn = document.getElementById('joinGameBtn');
    if (joinGameBtn) {
        joinGameBtn.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('üéØ Join button clicked');
            joinGame();
        });
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('modal')) {
            e.target.style.display = 'none';
        }
    });
});

// –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é joinGame
function joinGame() {
    console.log('üéØ joinGame function called');
    
    const nameInput = document.getElementById('playerNameInput');
    if (!nameInput) {
        console.error('‚ùå Name input not found');
        return;
    }
    
    const playerName = nameInput.value.trim();
    console.log('üéØ Player name:', playerName);
    
    if (!playerName) {
        showNotification('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è!');
        return;
    }
    
    if (playerName.length < 2 || playerName.length > 20) {
        showNotification('–û—à–∏–±–∫–∞', '–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤!');
        return;
    }
    
    if (!socket.connected) {
        console.error('‚ùå Socket not connected');
        showNotification('–û—à–∏–±–∫–∞', '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        return;
    }
    
    console.log('üéØ Joining game with name:', playerName);
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    const joinBtn = document.getElementById('joinGameBtn');
    if (joinBtn) {
        joinBtn.disabled = true;
        joinBtn.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
    }
    
    socket.emit('join-game', { playerName: playerName });
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞
    setTimeout(() => {
        if (joinBtn && joinBtn.disabled) {
            joinBtn.disabled = false;
            joinBtn.textContent = '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ';
        }
    }, 5000);
}

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('üì± DOM loaded, initializing...');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    showLoginScreen();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    const playerNameInput = document.getElementById('playerNameInput');
    if (playerNameInput) {
        playerNameInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                joinGame();
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const joinGameBtn = document.getElementById('joinGameBtn');
    if (joinGameBtn) {
        joinGameBtn.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('üéØ Join button clicked');
            joinGame();
        });
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('modal')) {
            e.target.style.display = 'none';
        }
    });
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function voteForPlayer(playerId) {
    console.log('üó≥Ô∏è Voting for player:', playerId);
    
    if (gameState.gamePhase !== 'voting') {
        showNotification('–û—à–∏–±–∫–∞', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
        return;
    }
    
    const me = gameState.players.find(p => p.id === gameState.playerId);
    if (!me || !me.isAlive) {
        showNotification('–û—à–∏–±–∫–∞', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
        return;
    }
    
    if (me.hasVoted && !gameState.canChangeVote[gameState.playerId]) {
        showNotification('–û—à–∏–±–∫–∞', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!');
        return;
    }
    
    if (me.hasVoted && gameState.canChangeVote[gameState.playerId]) {
        socket.emit('change-vote', { targetId: playerId });
        gameState.hasChangedVote = true;
    } else {
        socket.emit('vote-player', { targetId: playerId });
    }
}

// –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã
function translateCharacteristic(key) {
    const translations = {
        'profession': '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è',
        'health': '–ó–¥–æ—Ä–æ–≤—å–µ', 
        'hobby': '–•–æ–±–±–∏',
        'phobia': '–§–æ–±–∏—è',
        'baggage': '–ë–∞–≥–∞–∂',
        'fact1': '–§–∞–∫—Ç 1',
        'fact2': '–§–∞–∫—Ç 2'
    };
    return translations[key] || key;
}

console.log('üéÆ Bunker Game Client Loaded');