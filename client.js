console.log('üéÆ Bunker Game Client Loading...');

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
    playerId: null,
    playerName: '',
    isHost: false,
    players: [],
    gamePhase: 'login',
    serverGameState: 'lobby',
    currentRound: 1,
    timeLeft: 0,
    votingResults: {},
    myVote: null,
    timer: null,
    maxPlayers: 8,
    currentTurnPlayer: null,
    currentJustifyingPlayer: null,
    canChangeVote: {},
    hasChangedVote: false,
    cardsRevealedThisRound: 0,
    requiredCardsThisRound: 1,
    skipDiscussionVotes: 0,
    mySkipVote: false,
    startRoundVotes: 0,      // –î–û–ë–ê–í–õ–Ø–ï–ú: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∑–∞ –Ω–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞
    myStartRoundVote: false  // –î–û–ë–ê–í–õ–Ø–ï–ú: –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —è –∑–∞ –Ω–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞
};

// Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
const socket = io({
    transports: ['websocket', 'polling'], // –î–æ–±–∞–≤–ª—è–µ–º fallback —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
    timeout: 10000, // –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 10 —Å–µ–∫—É–Ω–¥
    reconnection: true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    reconnectionAttempts: 10, // –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫
    reconnectionDelay: 1000 // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
});

// === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô SOCKET.IO ===

socket.on('connect', function() {
    console.log('üåê Connected to server');
    console.log('üîó Socket ID:', socket.id);
    
    // –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
    showLoginScreen();
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Ç–µ—Ä–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    const connectionError = document.getElementById('connectionError');
    if (connectionError) {
        connectionError.style.display = 'none';
    }
});

socket.on('connect_error', function(error) {
    console.error('‚ùå Connection error:', error);
    showConnectionError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
});

socket.on('disconnect', function(reason) {
    console.log('‚ùå Disconnected from server:', reason);
    showConnectionError('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
});

socket.on('reconnect', function(attemptNumber) {
    console.log('üîÑ Reconnected after', attemptNumber, 'attempts');
    showNotification('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
});

socket.on('reconnect_error', function(error) {
    console.error('‚ùå Reconnection error:', error);
    showConnectionError('–ù–µ —É–¥–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
});

socket.on('room-state', function(data) {
    console.log('üè† Room state received:', data);
    gameState.players = data.players || [];
    gameState.serverGameState = data.gameState || 'lobby';
    gameState.gamePhase = data.gamePhase || 'waiting';
    gameState.currentRound = data.currentRound || 1;
    gameState.timeLeft = data.timeLeft || 0;
    gameState.currentTurnPlayer = data.currentTurnPlayer || null;
    gameState.maxPlayers = data.maxPlayers || 8;
    gameState.startRoundVotes = data.startRoundVotes || [];
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    if (data.story) {
        gameState.currentStory = data.story;
        updateStoryDisplay(data.story);
    } else {
        gameState.currentStory = null;
        hideStoryPanel();
    }
    
    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
    if (gameState.playerId) {
        if (gameState.serverGameState === 'lobby') {
            hideStoryPanel(); // –í –ª–æ–±–±–∏ –∏—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω—É–∂–Ω–∞
            showLobbyScreen();
        } else if (gameState.serverGameState === 'playing') {
            showGameScreen();
        }
    } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç playerId - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
        showLoginScreen();
    }
});

socket.on('join-confirmed', function(data) {
    console.log('‚úÖ Join confirmed:', data);
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    const joinBtn = document.getElementById('joinGameBtn');
    if (joinBtn) {
        joinBtn.disabled = false;
        joinBtn.textContent = '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ';
    }
    
    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    gameState.playerId = data.playerId;
    gameState.playerName = data.playerName;
    gameState.isHost = data.isHost;
    gameState.maxPlayers = data.maxPlayers;
    gameState.startRoundVotes = data.startRoundVotes || [];
    gameState.serverGameState = 'lobby';
    gameState.gamePhase = 'waiting';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–±–±–∏
    showLobbyScreen();
});

socket.on('player-joined', function(data) {
    console.log('üëã Player joined:', data);
    gameState.players = data.players;
    gameState.maxPlayers = data.maxPlayers;
    gameState.startRoundVotes = data.startRoundVotes || [];
    gameState.serverGameState = data.gameState || 'lobby'; // –î–û–ë–ê–í–õ–Ø–ï–ú
    
    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–±–±–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –≤ –ª–æ–±–±–∏
    if (gameState.serverGameState === 'lobby') {
        updateLobbyDisplay();
    }
});

socket.on('player-left', function(data) {
    console.log('üëã Player left:', data);
    gameState.players = data.players;
    gameState.serverGameState = data.gameState || 'lobby'; // –î–û–ë–ê–í–õ–Ø–ï–ú
    
    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–±–±–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –≤ –ª–æ–±–±–∏
    if (gameState.serverGameState === 'lobby') {
        updateLobbyDisplay();
    }
});

socket.on('max-players-changed', function(data) {
    console.log('üîß Max players changed:', data);
    gameState.maxPlayers = data.maxPlayers;
    gameState.players = data.players;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–±–±–∏ –µ—Å–ª–∏ –º—ã –≤ –ª–æ–±–±–∏
    if (gameState.serverGameState === 'lobby') {
        updateLobbyDisplay();
    }
});

socket.on('game-started', function(data) {
    console.log('üöÄ Game started:', data);
    gameState.players = data.players;
    gameState.serverGameState = data.gameState;
    gameState.gamePhase = data.gamePhase;
    gameState.currentRound = data.currentRound;
    gameState.timeLeft = data.timeLeft;
    gameState.startRoundVotes = 0;      // –î–û–ë–ê–í–õ–Ø–ï–ú: —Å–±—Ä–æ—Å –≥–æ–ª–æ—Å–æ–≤
    gameState.myStartRoundVote = false; // –î–û–ë–ê–í–õ–Ø–ï–ú: —Å–±—Ä–æ—Å –º–æ–µ–≥–æ –≥–æ–ª–æ—Å–∞
    
    // –î–û–ë–ê–í–õ–Ø–ï–ú: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    if (data.story) {
        gameState.currentStory = data.story;
        updateStoryDisplay(data.story);
        showStoryPanel();
    }
    
    showGameScreen();
});

socket.on('game-reset', function(data) {
    console.log('üîÑ Game reset:', data);
    gameState.players = data.players;
    gameState.serverGameState = 'lobby'; // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–±–±–∏
    gameState.gamePhase = 'waiting';     // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
    gameState.currentRound = 1;
    gameState.timeLeft = 0;
    gameState.currentTurnPlayer = null;
    gameState.currentStory = null;
    gameState.startRoundVotes = [];
    gameState.myStartRoundVote = false;
    
    hideStoryPanel(); // –°–∫—Ä—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ —Å–±—Ä–æ—Å–µ
    showLobbyScreen(); // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–±–±–∏
});

socket.on('phase-changed', function(data) {
    console.log('üîÑ Phase changed:', data);
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.currentTurnPlayer = data.currentTurnPlayer || null;
    gameState.currentRound = data.currentRound || gameState.currentRound;
    
    gameState.requiredCardsThisRound = getRequiredCardsForRound(gameState.currentRound);
    
    if (data.gamePhase !== 'discussion') {
        gameState.skipDiscussionVotes = 0;
        gameState.mySkipVote = false;
    }
    
    if (data.gamePhase !== 'voting') {
        gameState.myVote = null;
        gameState.hasChangedVote = false;
    }
    
    if (data.gamePhase === 'revelation') {
        gameState.cardsRevealedThisRound = 0;
    }
    
    updateGameDisplay();
});

socket.on('characteristic-revealed', function(data) {
    console.log('üîç Characteristic revealed:', data);
    gameState.players = data.players;
    
    if (data.playerId === gameState.playerId) {
        gameState.cardsRevealedThisRound = data.cardsRevealedThisRound;
        gameState.requiredCardsThisRound = data.requiredCards;
    }
    
    updatePlayersGrid();
});

socket.on('timer-update', function(data) {
    gameState.timeLeft = data.timeLeft;
    gameState.currentTurnPlayer = data.currentTurnPlayer;
    updateTimerDisplay();
    
    if (gameState.gamePhase === 'revelation') {
        updateGameDisplay();
    }
});

socket.on('vote-update', function(data) {
    console.log('üó≥Ô∏è Vote update:', data);
    gameState.players = data.players;
    gameState.votingResults = data.votingResults;
    gameState.canChangeVote = data.canChangeVote || {};
    updatePlayersGrid();
});

socket.on('justification-started', function(data) {
    console.log('‚öñÔ∏è Justification started:', data);
    gameState.currentJustifyingPlayer = data.justifyingPlayer?.id;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.gamePhase = 'justification';
    updateGameDisplay();
});

socket.on('second-voting-started', function(data) {
    console.log('üó≥Ô∏è Second voting started:', data);
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.canChangeVote = data.canChangeVote || {};
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ç–æ—Ä–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
    if (data.isSecondVoting) {
        showNotification('–í—Ç–æ—Ä–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', '–ò–≥—Ä–æ–∫–∏ –æ–ø—Ä–∞–≤–¥–∞–ª–∏—Å—å. –ì–æ–ª–æ—Å—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å—Ä–µ–¥–∏ –Ω–∏—Ö.');
    }
    
    updateGameDisplay();
});

socket.on('skip-discussion-vote-update', function(data) {
    console.log('‚è≠Ô∏è Skip discussion vote update:', data);
    gameState.skipDiscussionVotes = data.votes;
    gameState.mySkipVote = data.hasVoted;
    
    // –û–ë–ù–û–í–õ–Ø–ï–ú –∫–Ω–æ–ø–∫—É –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
    updateRoundActions();
});

socket.on('discussion-skipped', function(data) {
    console.log('‚è≠Ô∏è Discussion skipped:', data);
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.skipDiscussionVotes = 0;
    gameState.mySkipVote = false;
    updateGameDisplay();
});

socket.on('round-results', function(data) {
    console.log('üìä Round results:', data);
    gameState.players = data.players;
    gameState.votingResults = data.votingResults;
    updateGameDisplay();
    
    if (data.eliminatedPlayer) {
        showNotification('–ò–≥—Ä–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω', `${data.eliminatedPlayer} –ø–æ–∫–∏–¥–∞–µ—Ç –±—É–Ω–∫–µ—Ä`);
    } else {
        showNotification('–ù–∏—á—å—è', '–ù–∏–∫—Ç–æ –Ω–µ –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ');
    }
});

socket.on('new-round', function(data) {
    console.log('üîÑ New round:', data);
    gameState.currentRound = data.currentRound;
    gameState.gamePhase = data.gamePhase;
    gameState.timeLeft = data.timeLeft;
    gameState.players = data.players;
    gameState.startRoundVotes = 0;      // –î–û–ë–ê–í–õ–Ø–ï–ú: —Å–±—Ä–æ—Å –≥–æ–ª–æ—Å–æ–≤
    gameState.myStartRoundVote = false; // –î–û–ë–ê–í–õ–Ø–ï–ú: —Å–±—Ä–æ—Å –º–æ–µ–≥–æ –≥–æ–ª–æ—Å–∞
    updateGameDisplay();
});

socket.on('game-ended', function(data) {
    console.log('üèÅ Game ended:', data);
    gameState.players = data.players;
    gameState.gamePhase = 'finished';
    updateGameDisplay();
    
    const winners = data.winners.map(p => p.name).join(', ');
    showNotification('–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', `–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: ${winners}`);
});

socket.on('player-surrendered', function(data) {
    console.log('üè≥Ô∏è Player surrendered:', data);
    gameState.players = data.players;
    updatePlayersGrid();
    
    const isMe = data.surrenderedPlayer === gameState.playerName;
    const message = isMe ? '–í—ã —Å–¥–∞–ª–∏—Å—å –∏ –ø–æ–∫–∏–Ω—É–ª–∏ –∏–≥—Ä—É.' : `${data.surrenderedPlayer} —Å–¥–∞–ª—Å—è –∏ –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É.`;
    
    showNotification('–ò–≥—Ä–æ–∫ —Å–¥–∞–ª—Å—è', message);
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –Ω–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞
socket.on('start-round-vote-update', function(data) {
    console.log('üéØ Start round vote update:', data);
    gameState.startRoundVotes = data.votes;
    gameState.myStartRoundVote = data.hasVoted;
    updateRoundActions();
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–∞—Ä—Ç –¥–µ–π—Å—Ç–≤–∏–π
socket.on('action-card-used', function(data) {
    console.log('‚ú® Action card used:', data);
    gameState.players = data.players;
    
    updatePlayersGrid();
    
    const message = data.targetId 
        ? `${data.playerName} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–∞—Ä—Ç—É "${data.cardName}"`
        : `${data.playerName} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–∞—Ä—Ç—É "${data.cardName}"`;
    
    showNotification('–ö–∞—Ä—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è', message);
});

socket.on('detective-result', function(data) {
    console.log('üîç Detective result:', data);
    
    const message = `–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ ${data.targetName}:\n${translateCharacteristic(data.characteristic)}: ${data.value}`;
    showNotification('–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ç–∏–≤–∞', message);
});

// === –§–£–ù–ö–¶–ò–ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –≠–ö–†–ê–ù–û–í ===

function showScreen(screenId) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    const screens = document.querySelectorAll('.screen');
    screens.forEach(screen => {
        screen.style.display = 'none';
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.style.display = 'block';
    }
}

function showLoginScreen() {
    console.log('üì± Showing login screen');
    showScreen('loginScreen');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    const nameInput = document.getElementById('playerNameInput');
    if (nameInput) {
        nameInput.focus();
    }
}

function showLobbyScreen() {
    console.log('üì± Showing lobby screen');
    showScreen('lobbyScreen');
    updateLobbyDisplay();
}

function showGameScreen() {
    console.log('üì± Showing game screen');
    showScreen('gameScreen');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (gameState.currentStory) {
        updateStoryDisplay(gameState.currentStory);
    } else {
        hideStoryPanel();
    }
    
    updateGameDisplay();
}

function showResultsScreen() {
    console.log('üì± Showing results screen');
    showScreen('resultsScreen');
}

// === –§–£–ù–ö–¶–ò–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø –õ–û–ë–ë–ò ===

function updateLobbyDisplay() {
    console.log('üè† Updating lobby display. Players:', gameState.players.length, 'Host:', gameState.isHost);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤
    const currentPlayersCount = document.getElementById('currentPlayersCount');
    const maxPlayersCount = document.getElementById('maxPlayersCount');
    const playersList = document.getElementById('playersList');
    const startGameBtn = document.getElementById('startGameBtn');
    const waitingInfo = document.getElementById('waitingInfo');
    const maxPlayersSelector = document.getElementById('maxPlayersSelector');
    
    if (currentPlayersCount) {
        currentPlayersCount.textContent = gameState.players.length;
    }
    
    if (maxPlayersCount) {
        maxPlayersCount.textContent = gameState.maxPlayers;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    if (playersList) {
        playersList.innerHTML = '';
        gameState.players.forEach(player => {
            const li = document.createElement('li');
            li.className = player.isHost ? 'host' : '';
            li.innerHTML = `
                <span class="player-name">${player.name}</span>
                ${player.isHost ? ' <span class="host-badge">üëë –•–æ—Å—Ç</span>' : ''}
                ${player.id === gameState.playerId ? ' <span class="you-badge">(–í—ã)</span>' : ''}
            `;
            playersList.appendChild(li);
        });
    }
    
    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if (gameState.isHost) {
        console.log('üéØ Player is host - showing host controls');
        
        if (startGameBtn) {
            startGameBtn.style.display = 'block';
            startGameBtn.disabled = gameState.players.length < 2;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            if (gameState.players.length < 2) {
                startGameBtn.textContent = '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É (–º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞)';
                startGameBtn.className = 'start-game-btn disabled';
            } else {
                startGameBtn.textContent = `üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É (${gameState.players.length} –∏–≥—Ä–æ–∫–æ–≤)`;
                startGameBtn.className = 'start-game-btn';
            }
        }
        
        if (waitingInfo) {
            waitingInfo.style.display = 'none';
        }
        
        if (maxPlayersSelector) {
            maxPlayersSelector.style.display = 'block';
        }
    } else {
        console.log('üë• Player is not host - showing waiting state');
        
        if (startGameBtn) {
            startGameBtn.style.display = 'none';
        }
        
        if (waitingInfo) {
            waitingInfo.style.display = 'block';
            waitingInfo.innerHTML = `
                <p>‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ—Å—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...</p>
                <p>–ò–≥—Ä–æ–∫–æ–≤ –≤ –ª–æ–±–±–∏: ${gameState.players.length}/${gameState.maxPlayers}</p>
            `;
        }
        
        if (maxPlayersSelector) {
            maxPlayersSelector.style.display = 'none';
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
    const maxPlayersSelect = document.getElementById('maxPlayersSelect');
    if (maxPlayersSelect && gameState.isHost) {
        maxPlayersSelect.value = gameState.maxPlayers;
    }
    
    console.log('‚úÖ Lobby display updated');
}

// === –§–£–ù–ö–¶–ò–ò –ò–ì–†–û–í–û–ì–û –ü–†–û–¶–ï–°–°–ê ===

function getRequiredCardsForRound(round) {
    if (round === 1) {
        return 2; // –ü—Ä–æ—Ñ–µ—Å—Å–∏—è + 1 –∫–∞—Ä—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä
    } else {
        return 1; // 1 –∫–∞—Ä—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä
    }
}

function updateGameDisplay() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—É–Ω–¥–µ
    const currentRoundElement = document.getElementById('currentRound');
    const gameStatusElement = document.getElementById('gameStatus');
    const phaseDisplayElement = document.getElementById('phaseDisplay');
    const roundActionsElement = document.getElementById('roundActions');
    
    if (currentRoundElement) {
        currentRoundElement.textContent = gameState.currentRound;
    }
    
    if (gameStatusElement) {
        gameStatusElement.textContent = getGameStatusText();
    }
    
    if (phaseDisplayElement) {
        phaseDisplayElement.textContent = getPhaseDisplayText();
    }
    
    // –û–ë–ù–û–í–õ–Ø–ï–ú –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
    updateRoundActions();
    
    updatePlayersGrid();
    updateTimerDisplay();
}

// –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
function updateRoundActions() {
    const roundActions = document.getElementById('roundActions');
    const startRoundBtn = document.getElementById('startRoundBtn');
    const skipDiscussionBtn = document.getElementById('skipDiscussionBtn');
    const finishJustificationBtn = document.getElementById('finishJustificationBtn');
    const surrenderBtn = document.getElementById('surrenderBtn');
    
    if (!roundActions) return;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (startRoundBtn) startRoundBtn.style.display = 'none';
    if (skipDiscussionBtn) skipDiscussionBtn.style.display = 'none';
    if (finishJustificationBtn) finishJustificationBtn.style.display = 'none';
    if (surrenderBtn) surrenderBtn.style.display = 'none';
    
    const isMyTurn = gameState.currentTurnPlayer === gameState.playerId;
    const isMyJustification = gameState.currentJustifyingPlayer === gameState.playerId;
    const alivePlayers = gameState.players.filter(p => p.isAlive);
    
    let hasVisibleButtons = false;
    
    switch (gameState.gamePhase) {
        case 'preparation':
            // –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Å–µ–º –∂–∏–≤—ã–º –∏–≥—Ä–æ–∫–∞–º
            if (startRoundBtn && alivePlayers.some(p => p.id === gameState.playerId)) {
                startRoundBtn.style.display = 'block';
                hasVisibleButtons = true;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–æ–ª–æ—Å–∞—Ö
                const requiredVotes = 2;
                const currentVotes = gameState.startRoundVotes || 0;
                
                if (gameState.myStartRoundVote) {
                    startRoundBtn.textContent = `üéØ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ (${currentVotes}/${requiredVotes})`;
                    startRoundBtn.disabled = true;
                    startRoundBtn.classList.add('voted-skip'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Å—Ç–∏–ª—å —á—Ç–æ –∏ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
                } else {
                    startRoundBtn.textContent = `üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥ (${currentVotes}/${requiredVotes})`;
                    startRoundBtn.disabled = false;
                    startRoundBtn.classList.remove('voted-skip');
                }
            }
            break;
            
        case 'discussion':
            if (skipDiscussionBtn && alivePlayers.some(p => p.id === gameState.playerId)) {
                skipDiscussionBtn.style.display = 'block';
                hasVisibleButtons = true;
                
                const skipVotesCount = document.getElementById('skipVotesCount');
                if (skipVotesCount) {
                    skipVotesCount.textContent = gameState.skipDiscussionVotes || 0;
                }
                
                if (gameState.mySkipVote) {
                    skipDiscussionBtn.classList.add('voted-skip');
                    skipDiscussionBtn.disabled = true;
                } else {
                    skipDiscussionBtn.classList.remove('voted-skip');
                    skipDiscussionBtn.disabled = false;
                }
            }
            break;
            
        case 'justification':
            if (isMyJustification) {
                if (finishJustificationBtn) {
                    finishJustificationBtn.style.display = 'block';
                    hasVisibleButtons = true;
                }
                if (surrenderBtn) {
                    surrenderBtn.style.display = 'block';
                    hasVisibleButtons = true;
                }
            }
            break;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
    roundActions.style.display = hasVisibleButtons ? 'flex' : 'none';
}

function getGameStatusText() {
    switch (gameState.gamePhase) {
        case 'preparation': 
            return '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞—É–Ω–¥—É';
        case 'revelation': 
            const currentPlayer = gameState.players.find(p => p.id === gameState.currentTurnPlayer);
            if (currentPlayer) {
                const isMyTurn = currentPlayer.id === gameState.playerId;
                const requiredCards = getRequiredCardsForRound(gameState.currentRound);
                const revealedCards = currentPlayer.cardsRevealedThisRound || 0;
                
                if (isMyTurn) {
                    if (gameState.currentRound === 1) {
                        if (revealedCards === 0) {
                            return '–í–∞—à —Ö–æ–¥: –†–∞—Å–∫—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é';
                        } else if (revealedCards === 1) {
                            return '–í–∞—à —Ö–æ–¥: –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É';
                        } else {
                            return '–í–∞—à —Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω';
                        }
                    } else {
                        if (revealedCards === 0) {
                            return '–í–∞—à —Ö–æ–¥: –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É';
                        } else {
                            return '–í–∞—à —Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω';
                        }
                    }
                } else {
                    return `–•–æ–¥ –∏–≥—Ä–æ–∫–∞: ${currentPlayer.name}`;
                }
            }
            return '–†–∞—Å–∫—Ä—ã—Ç–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫';
        case 'discussion': 
            return '–§–∞–∑–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è';
        case 'voting': 
            // –î–û–ë–ê–í–õ–Ø–ï–ú –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
            const justificationQueue = gameState.players.filter(p => p.id === gameState.currentJustifyingPlayer);
            if (justificationQueue.length > 0) {
                return '–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ';
            }
            return '–§–∞–∑–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è';
        case 'justification':
            const justifyingPlayer = gameState.players.find(p => p.id === gameState.currentJustifyingPlayer);
            if (justifyingPlayer) {
                const isMyJustification = justifyingPlayer.id === gameState.playerId;
                return `–û–ø—Ä–∞–≤–¥–∞–Ω–∏–µ: ${isMyJustification ? '–í–∞—à —á–µ—Ä–µ–¥' : justifyingPlayer.name}`;
            }
            return '–§–∞–∑–∞ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è';
        case 'results': 
            return '–ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ —Ä–∞—É–Ω–¥–∞';
        case 'finished': 
            return '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
        default: 
            return '–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...';
    }
}

function getPhaseDisplayText() {
    const statusText = getGameStatusText();
    
    if (gameState.gamePhase === 'revelation' && gameState.currentTurnPlayer === gameState.playerId) {
        return `${statusText}`;
    }
    
    return statusText;
}

function updateTimerDisplay() {
    const timerElement = document.getElementById('timerDisplay');
    if (timerElement && gameState.timeLeft >= 0) {
        const minutes = Math.floor(gameState.timeLeft / 60);
        const seconds = gameState.timeLeft % 60;
        timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }
}

// –ò–°–ü–†–ê–í–õ–Ø–ï–ú —Ñ—É–Ω–∫—Ü–∏—é createPlayerCard - –ª–æ–≥–∏–∫–∞ —Ü–≤–µ—Ç–æ–≤ –∫–∞—Ä—Ç –¥–µ–π—Å—Ç–≤–∏–π
function createPlayerCard(player) {
    const card = document.createElement('div');
    const isCurrentPlayer = player.id === gameState.playerId;
    const isCurrentTurn = player.id === gameState.currentTurnPlayer;
    const isJustifying = player.id === gameState.currentJustifyingPlayer;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    const hasDoubleVote = player.activeEffects && player.activeEffects.doubleVote;
    
    card.className = `player-card ${player.isAlive ? '' : 'eliminated'} ${isCurrentPlayer ? 'current-player' : ''} ${isCurrentTurn ? 'current-turn' : ''} ${isJustifying ? 'justifying' : ''} ${hasDoubleVote ? 'double-vote' : ''}`;
    
    const characteristicOrder = ['profession', 'health', 'hobby', 'phobia', 'baggage', 'fact1', 'fact2'];
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    let turnInfo = '';
    if (isCurrentTurn && gameState.gamePhase === 'revelation' && isCurrentPlayer) {
        const requiredCards = getRequiredCardsForRound(gameState.currentRound);
        const revealedCards = player.cardsRevealedThisRound || 0;
        
        if (gameState.currentRound === 1) {
            if (revealedCards === 0) {
                turnInfo = '<div class="turn-info">üìã –†–∞—Å–∫—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é</div>';
            } else if (revealedCards === 1) {
                turnInfo = '<div class="turn-info">üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É</div>';
            }
        } else {
            if (revealedCards === 0) {
                turnInfo = '<div class="turn-info">üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É</div>';
            }
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
    let votingInfo = '';
    if (gameState.gamePhase === 'voting' || gameState.gamePhase === 'justification' || gameState.gamePhase === 'results') {
        const votesForPlayer = player.votes || 0;
        if (votesForPlayer > 0) {
            const votersForThisPlayer = getVotersForPlayer(player.id);
            votingInfo = `
                <div class="voting-info">
                    <div class="votes-count">–ì–æ–ª–æ—Å–æ–≤: ${votesForPlayer}</div>
                    ${votersForThisPlayer.length > 0 ? `
                        <div class="voters-list">
                            –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏: ${votersForThisPlayer.join(', ')}
                        </div>
                    ` : ''}
                </div>
            `;
        } else if (player.isAlive) {
            votingInfo = '<div class="voting-info"><div class="votes-count">–ì–æ–ª–æ—Å–æ–≤: 0</div></div>';
        }
        
        if (player.isAlive && player.hasVoted && player.votedFor) {
            const votedForPlayer = gameState.players.find(p => p.id === player.votedFor);
            if (votedForPlayer) {
                votingInfo += `
                    <div class="voted-for-info">
                        ${isCurrentPlayer ? '–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏' : player.name + ' –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª'} –∑–∞: 
                        <strong class="voted-target">${votedForPlayer.name}</strong>
                    </div>
                `;
            }
        } else if (player.isAlive && gameState.gamePhase === 'voting') {
            votingInfo += `
                <div class="voted-for-info not-voted">
                    ${isCurrentPlayer ? '–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏' : player.name + ' –µ—â–µ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª'}
                </div>
            `;
        }
    }

    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–∞—Ä—Ç—ã –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
    let actionCardIndicator = '';
    if (player.actionCards && player.actionCards.length > 0) {
        const actionCard = player.actionCards[0];
        const canUse = actionCard.usesLeft > 0;
        const isOwner = isCurrentPlayer;
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ö–õ–ê–°–°–û–í:
        let indicatorClass = 'action-card-indicator';
        
        if (!canUse) {
            // –ö–∞—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ - —Å–µ—Ä–∞—è –¥–ª—è –≤—Å–µ—Ö
            indicatorClass += ' used';
        } else if (!isOwner) {
            // –ß—É–∂–∞—è –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ - –∑–æ–ª–æ—Ç–∞—è, –Ω–æ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è
            indicatorClass += ' not-owner';
        }
        // –°–≤–æ—è –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ - –∑–æ–ª–æ—Ç–∞—è –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è (–±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å)
        
        const clickHandler = isOwner && canUse ? `onclick="showActionCard('${actionCard.id}')"` : '';
        
        actionCardIndicator = `
            <div class="${indicatorClass}" ${clickHandler} title="${actionCard.name}">
            </div>
        `;
    }
    
    card.innerHTML = `
        <div class="player-header">
            <div class="player-info">
                <div class="player-avatar-container">
                    <div class="player-avatar ${player.isAlive ? '' : 'eliminated-avatar'}">
                        ${player.name.charAt(0).toUpperCase()}
                    </div>
                    ${actionCardIndicator}
                    ${hasDoubleVote ? '<div class="double-vote-indicator">üó≥Ô∏è√ó2</div>' : ''}
                </div>
                <div>
                    <div class="player-name ${player.isAlive ? '' : 'eliminated-name'}">
                        ${player.name}${player.isHost ? ' üëë' : ''}
                    </div>
                    ${isCurrentPlayer ? '<div class="player-status current">–í–´</div>' : ''}
                    ${isCurrentTurn ? '<div class="player-status turn">–í–∞—à —Ö–æ–¥!</div>' : ''}
                    ${isJustifying ? '<div class="player-status justifying">üé§ –û–ø—Ä–∞–≤–¥—ã–≤–∞–µ—Ç—Å—è</div>' : ''}
                    ${turnInfo}
                    ${votingInfo}
                </div>
            </div>
        </div>
        
        <div class="characteristics">
            ${characteristicOrder.map(key => {
                if (!player.characteristics || !player.characteristics[key]) return '';
                
                const isRevealed = player.revealedCharacteristics && player.revealedCharacteristics.includes(key);
                const isOwnCard = isCurrentPlayer;
                
                let canReveal = false;
                if (isCurrentPlayer && isCurrentTurn && !isRevealed && gameState.gamePhase === 'revelation') {
                    const requiredCards = getRequiredCardsForRound(gameState.currentRound);
                    const revealedCards = player.cardsRevealedThisRound || 0;
                    
                    if (revealedCards < requiredCards) {
                        if (gameState.currentRound === 1) {
                            if (revealedCards === 0 && key === 'profession') {
                                canReveal = true;
                            } else if (revealedCards === 1 && key !== 'profession') {
                                canReveal = true;
                            }
                        } else {
                            canReveal = true;
                        }
                    }
                }
                
                return `<div class="characteristic ${isRevealed ? 'revealed' : (isOwnCard ? 'own-hidden' : 'hidden')} ${canReveal ? 'clickable' : ''}" 
                    ${canReveal ? `onclick="confirmRevealCharacteristic('${key}')"` : ''}>
                    <span class="characteristic-name">${translateCharacteristic(key)}:</span>
                    <span class="characteristic-value ${isOwnCard && !isRevealed ? 'own-characteristic' : ''}">
                        ${isRevealed ? player.characteristics[key] : (isOwnCard ? player.characteristics[key] : '???')}
                    </span>
                </div>`;}
            ).join('')}
        </div>
        
        <div class="player-actions">
            ${gameState.gamePhase === 'voting' && !isCurrentPlayer && player.isAlive ? 
                getVotingButtons(player) : ''
            }
        </div>
    `;
    
    return card;
}

// –ù–ê–•–û–î–ò–ú –∏ –û–°–¢–ê–í–õ–Ø–ï–ú —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü–∏—é updatePlayersGrid
function updatePlayersGrid() {
    const playersGrid = document.getElementById('playersGrid');
    
    if (!playersGrid) {
        console.error('‚ùå playersGrid element not found');
        return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ª–∏–¥–µ—Ä–æ–≤
    let maxVotes = 0;
    if (gameState.gamePhase === 'voting' || gameState.gamePhase === 'justification' || gameState.gamePhase === 'results') {
        const alivePlayers = gameState.players.filter(p => p.isAlive);
        maxVotes = Math.max(...alivePlayers.map(p => p.votes || 0));
    }
    
    playersGrid.innerHTML = '';
    playersGrid.className = `players-grid players-${gameState.players.length}`;
    
    gameState.players.forEach(player => {
        const playerCard = createPlayerCard(player);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
        if (player.isAlive && (player.votes || 0) === maxVotes && maxVotes > 0) {
            playerCard.classList.add('most-voted');
        }
        
        playersGrid.appendChild(playerCard);
    });
    
    console.log('üéÆ Players grid updated:', gameState.players.length, 'players');
}

// –£–ë–ò–†–ê–ï–ú –î–£–ë–õ–ò–†–£–Æ–©–ò–ô–°–Ø –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ room-state - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω
socket.on('room-state', function(data) {
    console.log('üè† Room state received:', data);
    gameState.players = data.players || [];
    gameState.serverGameState = data.gameState || 'lobby';
    gameState.gamePhase = data.gamePhase || 'waiting';
    gameState.currentRound = data.currentRound || 1;
    gameState.timeLeft = data.timeLeft || 0;
    gameState.currentTurnPlayer = data.currentTurnPlayer || null;
    gameState.maxPlayers = data.maxPlayers || 8;
    gameState.startRoundVotes = data.startRoundVotes || [];
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    if (data.story) {
        gameState.currentStory = data.story;
        updateStoryDisplay(data.story);
    } else {
        gameState.currentStory = null;
        hideStoryPanel();
    }
    
    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
    if (gameState.playerId) {
        if (gameState.serverGameState === 'lobby') {
            hideStoryPanel(); // –í –ª–æ–±–±–∏ –∏—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω—É–∂–Ω–∞
            showLobbyScreen();
        } else if (gameState.serverGameState === 'playing') {
            showGameScreen();
        }
    } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç playerId - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
        showLoginScreen();
    }
});

// –ò–°–ü–†–ê–í–õ–Ø–ï–ú –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ (—Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ)
socket.on('error', function(errorMessage) {
    console.error('‚ùå Server error:', errorMessage);
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    const joinBtn = document.getElementById('joinGameBtn');
    if (joinBtn && joinBtn.textContent === '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...') {
        joinBtn.disabled = false;
        joinBtn.textContent = '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ';
    }
    
    showNotification('–û—à–∏–±–∫–∞', errorMessage);
});