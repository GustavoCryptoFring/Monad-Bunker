// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Socket.IO (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∞–¥—Ä–µ—Å)
const socket = io();

let gameState = {
    players: [],
    currentRound: 1,
    gamePhase: 'login',
    votingResults: {},
    maxRounds: 3,
    currentPlayerName: '',
    currentPlayerId: null,
    roomCode: '',
    maxPlayers: 8,
    isRoomHost: false,
    currentTurnPlayerId: null,
    timeLeft: 0,
    playersWhoVoted: [],
    skipVotes: 0,
    myCharacteristics: null,
    myActionCard: null
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
socket.on('connect', () => {
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É');
});

socket.on('connect_error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
});

socket.on('roomCreated', (data) => {
    gameState.roomCode = data.roomCode;
    gameState.currentPlayerId = data.playerId;
    gameState.isRoomHost = data.isHost;
    gameState.gamePhase = 'room-setup';
    
    document.getElementById('loginScreen').style.display = 'none';
    document.getElementById('roomSetup').style.display = 'block';
    
    updateRoomDisplay();
    
    alert(`üéâ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!\n–ö–æ–¥: ${data.roomCode}`);
});

socket.on('roomJoined', (data) => {
    gameState.roomCode = data.roomCode;
    gameState.currentPlayerId = data.playerId;
    gameState.isRoomHost = data.isHost;
    gameState.gamePhase = 'room-setup';
    
    document.getElementById('loginScreen').style.display = 'none';
    document.getElementById('roomSetup').style.display = 'block';
    
    updateRoomDisplay();
});

socket.on('roomUpdate', (data) => {
    gameState.players = data.players;
    gameState.maxPlayers = data.maxPlayers;
    updateRoomDisplay();
});

socket.on('gameStarted', (data) => {
    gameState.gamePhase = 'playing';
    gameState.currentRound = data.gameState.currentRound;
    
    document.getElementById('roomSetup').style.display = 'none';
    document.getElementById('gameBoard').style.display = 'block';
    
    updateRoundInfo();
    updatePlayersDisplay();
});

socket.on('playerData', (data) => {
    gameState.myCharacteristics = data.characteristics;
    gameState.myActionCard = data.actionCard;
    updatePlayersDisplay();
});

socket.on('error', (data) => {
    alert(`‚ùå –û—à–∏–±–∫–∞: ${data.message}`);
});

// –§—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function createRoom() {
    const playerName = document.getElementById('playerName').value.trim();
    if (!playerName) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è!');
        return;
    }
    gameState.currentPlayerName = playerName;
    socket.emit('createRoom', { playerName });
}

function joinRoom() {
    const playerName = document.getElementById('playerName').value.trim();
    const roomCode = document.getElementById('roomCodeInput').value.trim().toUpperCase();
    
    if (!playerName) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è!');
        return;
    }
    
    if (!roomCode) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã!');
        return;
    }

    gameState.currentPlayerName = playerName;
    socket.emit('joinRoom', { roomCode, playerName });
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –≤–∞—à–µ–≥–æ script.js...
function updateRoomDisplay() {
    document.getElementById('roomCode').textContent = gameState.roomCode;
    document.getElementById('currentPlayersCount').textContent = gameState.players.length;
    document.getElementById('maxPlayersCount').textContent = gameState.maxPlayers;
    
    const playersList = document.getElementById('playersList');
    playersList.innerHTML = gameState.players.map(player => 
        `<li class="${player.isHost ? 'host' : ''}">${player.name} ${player.isHost ? '(–•–æ—Å—Ç)' : ''}</li>`
    ).join('');
    
    const startBtn = document.getElementById('startGameBtn');
    const canStart = gameState.isRoomHost && gameState.players.length >= 4;
    startBtn.disabled = !canStart;
    startBtn.textContent = gameState.players.length < 4 ? 
        `–ù–∞—á–∞—Ç—å –∏–≥—Ä—É (–º–∏–Ω–∏–º—É–º 4 –∏–≥—Ä–æ–∫–∞)` : 
        `–ù–∞—á–∞—Ç—å –∏–≥—Ä—É (${gameState.players.length}/${gameState.maxPlayers})`;
}

function copyRoomCode() {
    navigator.clipboard.writeText(gameState.roomCode).then(() => {
        alert('–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    }).catch(() => {
        const textArea = document.createElement('textarea');
        textArea.value = gameState.roomCode;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        alert('–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
    });
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.createRoom = createRoom;
window.joinRoom = joinRoom;
window.copyRoomCode = copyRoomCode;

// –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –≤–∞—à–µ–≥–æ script.js...