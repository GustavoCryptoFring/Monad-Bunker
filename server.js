const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');

console.log('üöÄ Starting Multi-Room Bunker Game Server...');

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

// === –°–ò–°–¢–ï–ú–ê –ö–û–ú–ù–ê–¢ ===

const gameRooms = new Map(); // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–º–Ω–∞—Ç

class GameRoom {
    constructor(roomCode, hostId, hostName, maxPlayers = 8) {
        this.roomCode = roomCode;
        this.players = [];
        this.gameState = 'lobby';
        this.maxPlayers = maxPlayers;
        this.gamePhase = 'waiting';
        this.currentRound = 1;
        this.maxRounds = 3;
        this.timer = null;
        this.timeLeft = 0;
        this.votingResults = {};
        this.revealedThisRound = 0;
        this.currentTurnPlayer = null;
        this.playersWhoRevealed = [];
        this.totalVotes = 0;
        this.skipDiscussionVotes = [];
        this.justificationQueue = [];
        this.currentJustifyingPlayer = null;
        this.justificationPhase = 1;
        this.canChangeVote = {};
        this.startRoundVotes = [];
        this.activeEffects = {};
        this.pendingEliminationNextRound = false;
        this.eliminateTopVotersNextRound = false;
        this.createdAt = new Date();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Å—Ç–∞ –∫–∞–∫ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        this.addPlayer(hostId, hostName, true);
    }
    
    addPlayer(socketId, playerName, isHost = false) {
        const player = {
            id: socketId,
            name: playerName,
            isAlive: true,
            isHost: isHost,
            votes: 0,
            hasVoted: false,
            votedFor: null,
            hasRevealed: false,
            cardsRevealedThisRound: 0,
            revealedCharacteristics: [],
            characteristics: null,
            actionCards: []
        };
        
        this.players.push(player);
        return player;
    }
    
    removePlayer(socketId) {
        const playerIndex = this.players.findIndex(p => p.id === socketId);
        if (playerIndex !== -1) {
            const removedPlayer = this.players.splice(playerIndex, 1)[0];
            
            // –ï—Å–ª–∏ —Ö–æ—Å—Ç —É—à–µ–ª, –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞
            if (removedPlayer.isHost && this.players.length > 0) {
                this.players[0].isHost = true;
            }
            
            return removedPlayer;
        }
        return null;
    }
    
    getPlayer(socketId) {
        return this.players.find(p => p.id === socketId);
    }
    
    isEmpty() {
        return this.players.length === 0;
    }
    
    isFull() {
        return this.players.length >= this.maxPlayers;
    }
    
    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
    cleanup() {
        if (this.timer) {
            clearInterval(this.timer);
            this.timer = null;
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã
function generateRoomCode() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let result = '';
    for (let i = 0; i < 6; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    if (gameRooms.has(result)) {
        return generateRoomCode(); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
    }
    
    return result;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
function getRoomLink(roomCode) {
    const baseUrl = process.env.BASE_URL || 'http://localhost:3000';
    return `${baseUrl}/${roomCode}`;
}

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(__dirname));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–º–Ω–∞—Ç
app.get('/', (req, res) => {
    console.log('üìÑ Serving main page');
    res.sendFile(path.join(__dirname, 'index.html'));
});

app.get('/:roomCode', (req, res) => {
    const roomCode = req.params.roomCode.toUpperCase();
    console.log('üìÑ Serving room page for:', roomCode);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–Ω–∞—Ç–∞
    if (roomCode.length === 6 && gameRooms.has(roomCode)) {
        res.sendFile(path.join(__dirname, 'index.html'));
    } else {
        // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        res.redirect('/');
    }
});

// API –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', (req, res) => {
    try {
        const totalPlayers = Array.from(gameRooms.values()).reduce((sum, room) => sum + room.players.length, 0);
        
        res.json({ 
            status: 'OK', 
            timestamp: new Date().toISOString(),
            rooms: gameRooms.size,
            totalPlayers: totalPlayers,
            connections: io.engine ? io.engine.clientsCount : 0,
            uptime: process.uptime(),
            memory: process.memoryUsage()
        });
    } catch (error) {
        console.error('Health check error:', error);
        res.status(500).json({ 
            status: 'ERROR', 
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// === –ò–ì–†–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ ===

const professions = [
    '–í—Ä–∞—á', '–£—á–∏—Ç–µ–ª—å', '–ò–Ω–∂–µ–Ω–µ—Ä', '–ü–æ–≤–∞—Ä', '–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π', '–ü–æ–∂–∞—Ä–Ω—ã–π',
    '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–ú–µ—Ö–∞–Ω–∏–∫', '–≠–ª–µ–∫—Ç—Ä–∏–∫', '–°—Ç—Ä–æ–∏—Ç–µ–ª—å', '–ü–∏–ª–æ—Ç', '–í–æ–¥–∏—Ç–µ–ª—å',
    '–•—É–¥–æ–∂–Ω–∏–∫', '–ú—É–∑—ã–∫–∞–Ω—Ç', '–ü–∏—Å–∞—Ç–µ–ª—å', '–§–æ—Ç–æ–≥—Ä–∞—Ñ', '–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç', '–î–∏–∑–∞–π–Ω–µ—Ä',
    '–ü—Å–∏—Ö–æ–ª–æ–≥', '–°–æ—Ü–∏–æ–ª–æ–≥', '–ò—Å—Ç–æ—Ä–∏–∫', '–§–∏–∑–∏–∫', '–•–∏–º–∏–∫', '–ë–∏–æ–ª–æ–≥',
    '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä', '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥', '–ú–µ–¥—Å–µ—Å—Ç—Ä–∞', '–§–∞—Ä–º–∞—Ü–µ–≤—Ç', '–ú–∞—Å—Å–∞–∂–∏—Å—Ç', '–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥',
    '–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä', '–ü–æ—Ä—Ç–Ω–æ–π', '–°–∞–ø–æ–∂–Ω–∏–∫', '–ö—É–∑–Ω–µ—Ü', '–°—Ç–æ–ª—è—Ä', '–ü–ª–æ—Ç–Ω–∏–∫',
    '–°–∞–¥–æ–≤–Ω–∏–∫', '–§–µ—Ä–º–µ—Ä', '–†—ã–±–∞–∫', '–û—Ö–æ—Ç–Ω–∏–∫', '–ì–µ–æ–ª–æ–≥', '–ê—Ä—Ö–µ–æ–ª–æ–≥',
    '–°–ø–∞—Å–∞—Ç–µ–ª—å', '–í–æ–µ–Ω–Ω—ã–π', '–û—Ö—Ä–∞–Ω–Ω–∏–∫', '–î–µ—Ç–µ–∫—Ç–∏–≤', '–°—É–¥—å—è', '–ê–¥–≤–æ–∫–∞—Ç',
    '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä', '–≠–∫–æ–Ω–æ–º–∏—Å—Ç', '–ë–∞–Ω–∫–∏—Ä', '–ú–µ–Ω–µ–¥–∂–µ—Ä', '–ü—Ä–æ–¥–∞–≤–µ—Ü', '–ö–∞—Å—Å–∏—Ä'
];

const healthConditions = [
    '–û—Ç–ª–∏—á–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ', '–•–æ—Ä–æ—à–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ', '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ',
    '–ë–ª–∏–∑–æ—Ä—É–∫–æ—Å—Ç—å', '–î–∞–ª—å–Ω–æ–∑–æ—Ä–∫–æ—Å—Ç—å', '–ê—Å—Ç–º–∞', '–ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –ø—ã–ª—å—Ü—É',
    '–ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö', '–î–∏–∞–±–µ—Ç', '–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è', '–ú–∏–≥—Ä–µ–Ω—å',
    '–ë–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞', '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å', '–ê—Ä—Ç—Ä–∏—Ç', '–†–∞–¥–∏–∫—É–ª–∏—Ç',
    '–í–∞—Ä–∏–∫–æ–∑', '–ì–∞—Å—Ç—Ä–∏—Ç', '–Ø–∑–≤–∞ –∂–µ–ª—É–¥–∫–∞', '–ö–∞–º–Ω–∏ –≤ –ø–æ—á–∫–∞—Ö',
    '–î–µ–ø—Ä–µ—Å—Å–∏—è', '–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å', '–ü–∞–Ω–∏—á–µ—Å–∫–∏–µ –∞—Ç–∞–∫–∏', '–ö–ª–∞—É—Å—Ç—Ä–æ—Ñ–æ–±–∏—è',
    '–ê–∫—Ä–æ—Ñ–æ–±–∏—è', '–ò–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ –∑—Ä–µ–Ω–∏—é', '–ò–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ —Å–ª—É—Ö—É',
    '–•—Ä–æ–º–æ—Ç–∞', '–ü—Ä–æ—Ç–µ–∑ —Ä—É–∫–∏', '–ü—Ä–æ—Ç–µ–∑ –Ω–æ–≥–∏', '–ó–∞–∏–∫–∞–Ω–∏–µ'
];

const hobbies = [
    '–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥', '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–æ–≤', '–ò–≥—Ä–∞ –Ω–∞ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö',
    '–†–∏—Å–æ–≤–∞–Ω–∏–µ', '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', '–ö—É–ª–∏–Ω–∞—Ä–∏—è', '–°–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ', '–†—ã–±–∞–ª–∫–∞',
    '–û—Ö–æ—Ç–∞', '–¢—É—Ä–∏–∑–º', '–ê–ª—å–ø–∏–Ω–∏–∑–º', '–î–∞–π–≤–∏–Ω–≥', '–°–µ—Ä—Ñ–∏–Ω–≥', '–°–∫–µ–π—Ç–±–æ—Ä–¥–∏–Ω–≥',
    '–í–µ–ª–æ—Å–ø–æ—Ä—Ç', '–ë–µ–≥', '–ü–ª–∞–≤–∞–Ω–∏–µ', '–¢–µ–Ω–Ω–∏—Å', '–§—É—Ç–±–æ–ª', '–ë–∞—Å–∫–µ—Ç–±–æ–ª',
    '–í–æ–ª–µ–π–±–æ–ª', '–ë–∞–¥–º–∏–Ω—Ç–æ–Ω', '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å', '–ë–∏–ª—å—è—Ä–¥', '–î–∞—Ä—Ç—Å',
    '–®–∞—Ö–º–∞—Ç—ã', '–®–∞—à–∫–∏', '–ü–æ–∫–µ—Ä', '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç',
    '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä–æ–∫', '–ú–æ–¥–µ–ª–∏ —Å–∞–º–æ–ª–µ—Ç–æ–≤', '–ú–æ–¥–µ–ª–∏ –∫–æ—Ä–∞–±–ª–µ–π',
    '–í—ã—à–∏–≤–∞–Ω–∏–µ', '–í—è–∑–∞–Ω–∏–µ', '–®–∏—Ç—å–µ', '–†–µ–∑—å–±–∞ –ø–æ –¥–µ—Ä–µ–≤—É', '–ì–æ–Ω—á–∞—Ä–Ω–æ–µ –¥–µ–ª–æ',
    '–ö–∞–ª–ª–∏–≥—Ä–∞—Ñ–∏—è', '–û—Ä–∏–≥–∞–º–∏', '–ü–∞–∑–ª—ã', '–ö—Ä–æ—Å—Å–≤–æ—Ä–¥—ã', '–°—É–¥–æ–∫—É',
    '–í–∏–¥–µ–æ–∏–≥—Ä—ã', '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã', '–ö–∞—Ä–∞–æ–∫–µ', '–¢–∞–Ω—Ü—ã', '–ô–æ–≥–∞'
];

const phobias = [
    '–ö–ª–∞—É—Å—Ç—Ä–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å –∑–∞–º–∫–Ω—É—Ç—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤)',
    '–ê–≥–æ—Ä–∞—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤)',
    '–ê–∫—Ä–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å –≤—ã—Å–æ—Ç—ã)', '–ê—Ä–∞—Ö–Ω–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å –ø–∞—É–∫–æ–≤)',
    '–û—Ñ–∏–¥–∏–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å –∑–º–µ–π)', '–ö–∏–Ω–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å —Å–æ–±–∞–∫)',
    '–ú—É—Å–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å –º—ã—à–µ–π)', '–≠–Ω—Ç–æ–º–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å –Ω–∞—Å–µ–∫–æ–º—ã—Ö)',
    '–ê—ç—Ä–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å –ø–æ–ª–µ—Ç–æ–≤)', '–ì–∏–¥—Ä–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å –≤–æ–¥—ã)',
    '–ü–∏—Ä–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å –æ–≥–Ω—è)', '–ù–∏–∫—Ç–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å —Ç–µ–º–Ω–æ—Ç—ã)',
    '–ì–µ–º–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å –∫—Ä–æ–≤–∏)', '–¢—Ä–∏–ø–∞–Ω–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å –∏–≥–ª)',
    '–î–µ–Ω—Ç–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–æ–≤)', '–°–æ—Ü–∏–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å –ª—é–¥–µ–π)',
    '–ù–µ–∫—Ä–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å —Å–º–µ—Ä—Ç–∏)', '–¢–∞–Ω–∞—Ç–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å —É–º–∏—Ä–∞—Ç—å)',
    '–ê–≤—Ç–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–∞)', '–ú–µ—Ç–µ–æ—Ä–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å –≥—Ä–æ–∑—ã)',
    '–ê—Å—Ç—Ä–∞—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å –º–æ–ª–Ω–∏–π)', '–°–µ–ª–µ–Ω–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å –ª—É–Ω—ã)',
    '–ì–µ–ª–∏–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å —Å–æ–ª–Ω—Ü–∞)', '–û–º–±—Ä–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å –¥–æ–∂–¥—è)',
    '–•–∏–æ–Ω–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å —Å–Ω–µ–≥–∞)', '–ü–Ω–µ–≤–º–∞—Ç–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å –≤–µ—Ç—Ä–∞)',
    '–¢–µ—Ä–º–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å –∂–∞—Ä—ã)', '–§—Ä–∏–≥–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å —Ö–æ–ª–æ–¥–∞)',
    '–ú–∏–∫—Ä–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å –º–∏–∫—Ä–æ–±–æ–≤)', '–ú–∏–∑–æ—Ñ–æ–±–∏—è (–±–æ—è–∑–Ω—å –≥—Ä—è–∑–∏)'
];

const baggage = [
    '–†—é–∫–∑–∞–∫ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏', '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∞–ø—Ç–µ—á–∫–∞', '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Å—É–º–∫–∞',
    '–ß–µ–º–æ–¥–∞–Ω —Å –æ–¥–µ–∂–¥–æ–π', '–°—É–º–∫–∞ —Å –∫–Ω–∏–≥–∞–º–∏', '–ì–∏—Ç–∞—Ä–∞ –≤ —á–µ—Ö–ª–µ',
    '–§–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç —Å –æ–±—ä–µ–∫—Ç–∏–≤–∞–º–∏', '–ù–æ—É—Ç–±—É–∫ —Å –∑–∞—Ä—è–¥–∫–æ–π', '–ü–ª–∞–Ω—à–µ—Ç',
    '–¢–µ–ª–µ—Ñ–æ–Ω —Å power bank', '–†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è', 'GPS-–Ω–∞–≤–∏–≥–∞—Ç–æ—Ä',
    '–ë–∏–Ω–æ–∫–ª—å', '–¢–µ–ª–µ—Å–∫–æ–ø', '–ú–∏–∫—Ä–æ—Å–∫–æ–ø', '–ö–æ–º–ø–∞—Å', '–ö–∞—Ä—Ç—ã –º–µ—Å—Ç–Ω–æ—Å—Ç–∏',
    '–ü–∞–ª–∞—Ç–∫–∞', '–°–ø–∞–ª—å–Ω—ã–π –º–µ—à–æ–∫', '–ö–æ—Å—Ç—é–º —Ö–∏–º–∑–∞—â–∏—Ç—ã', '–ü—Ä–æ—Ç–∏–≤–æ–≥–∞–∑',
    '–û–≥–Ω–µ—Ç—É—à–∏—Ç–µ–ª—å', '–ö–∞–Ω–∏—Å—Ç—Ä–∞ —Å –±–µ–Ω–∑–∏–Ω–æ–º', '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä', '–°–æ–ª–Ω–µ—á–Ω–∞—è –±–∞—Ç–∞—Ä–µ—è',
    '–†–∞—Ü–∏—è –¥–∞–ª—å–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è', '–°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω', '–£–¥–æ—á–∫–∞',
    '–û—Ö–æ—Ç–Ω–∏—á—å–µ —Ä—É–∂—å–µ', '–ê—Ä–±–∞–ª–µ—Ç', '–ù–æ–∂ –¥–ª—è –≤—ã–∂–∏–≤–∞–Ω–∏—è', '–¢–æ–ø–æ—Ä',
    '–ü–∏–ª–∞', '–ú–æ–ª–æ—Ç–æ–∫', '–û—Ç–≤–µ—Ä—Ç–∫–∏', '–ì–∞–µ—á–Ω—ã–µ –∫–ª—é—á–∏', '–í–µ—Ä–µ–≤–∫–∞',
    '–ê–ª—å–ø–∏–Ω–∏—Å—Ç—Å–∫–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ', '–ê–∫–≤–∞–ª–∞–Ω–≥', '–õ–æ–¥–∫–∞ –Ω–∞–¥—É–≤–Ω–∞—è',
    '–í–µ–ª–æ—Å–∏–ø–µ–¥', '–°–∞–º–æ–∫–∞—Ç', '–°–∫–µ–π—Ç–±–æ—Ä–¥', '–õ—ã–∂–∏', '–°–Ω–æ—É–±–æ—Ä–¥',
    '–ö–æ–Ω—å–∫–∏', '–†–æ–ª–∏–∫–∏', '–ú—è—á', '–†–∞–∫–µ—Ç–∫–∞ –¥–ª—è —Ç–µ–Ω–Ω–∏—Å–∞', '–®–∞—Ö–º–∞—Ç—ã'
];

const facts = [
    '–ó–Ω–∞–µ—Ç 5 –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤', '–£–º–µ–µ—Ç –∏–≥—Ä–∞—Ç—å –Ω–∞ 3 –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö',
    '–ß–µ–º–ø–∏–æ–Ω –æ–±–ª–∞—Å—Ç–∏ –ø–æ —à–∞—Ö–º–∞—Ç–∞–º', '–ú–∞—Å—Ç–µ—Ä —Å–ø–æ—Ä—Ç–∞ –ø–æ –ø–ª–∞–≤–∞–Ω–∏—é',
    '–ò–º–µ–µ—Ç —á–µ—Ä–Ω—ã–π –ø–æ—è—Å –ø–æ –∫–∞—Ä–∞—Ç–µ', '–°–ª—É–∂–∏–ª –≤ —Å–ø–µ—Ü–Ω–∞–∑–µ', '–†–∞–±–æ—Ç–∞–ª –≤ —Ü–∏—Ä–∫–µ',
    '–ë—ã–ª –∞–∫—Ç–µ—Ä–æ–º –≤ —Ç–µ–∞—Ç—Ä–µ', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞–ª –ø–æ 50 —Å—Ç—Ä–∞–Ω–∞–º',
    '–£–º–µ–µ—Ç –ø–∏–ª–æ—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–ª–µ—Ç', '–ò–º–µ–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ A, B, C',
    '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–≤–µ—Ä', '–ê–ª—å–ø–∏–Ω–∏—Å—Ç-—ç–∫—Å—Ç—Ä–µ–º–∞–ª', '–ü–∞—Ä–∞—à—é—Ç–∏—Å—Ç',
    '–£–º–µ–µ—Ç –≤—ã–∂–∏–≤–∞—Ç—å –≤ –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥–µ', '–ó–Ω–∞–µ—Ç –æ—Å–Ω–æ–≤—ã –º–µ–¥–∏—Ü–∏–Ω—ã',
    '–û—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–∞—Ä', '–£–º–µ–µ—Ç —á–∏–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É', '–ó–Ω–∞–µ—Ç —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ',
    '–û–ø—ã—Ç–Ω—ã–π —Å–∞–¥–æ–≤–æ–¥', '–£–º–µ–µ—Ç —Å—Ç—Ä–æ–∏—Ç—å', '–ó–Ω–∞–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é',
    '–û—Ç–ª–∏—á–Ω–∞—è –ø–∞–º—è—Ç—å', '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å', '–ê–±—Å–æ–ª—é—Ç–Ω—ã–π —Å–ª—É—Ö',
    '–°–∏–Ω–µ—Å—Ç–µ–∑–∏—è', 'IQ –≤—ã—à–µ 140', '–≠–π–¥–µ—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å',
    '–£–º–µ–µ—Ç —á–∏—Ç–∞—Ç—å –ø–æ –≥—É–±–∞–º', '–ó–Ω–∞–µ—Ç —è–∑—ã–∫ –∂–µ—Å—Ç–æ–≤', '–õ–µ–≤—à–∞',
    '–ê–º–±–∏–¥–µ–∫—Å—Ç—Ä', '–ì–∏–ø–µ—Ä–º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å —Å—É—Å—Ç–∞–≤–æ–≤', '–ë—ã—Å—Ç—Ä–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è',
    '–í—ã—Å–æ–∫–∞—è —Å—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å', '–õ–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞',
    '–•–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω–æ—Å—Ç—å', '–≠–º–ø–∞—Ç–∏—è', '–ò–Ω—Ç—É–∏—Ü–∏—è', '–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å',
    '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–∫–ª–∞–¥ —É–º–∞', '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏',
    '–ö–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å', '–î–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω–æ—Å—Ç—å', '–ù–∞—Ö–æ–¥—á–∏–≤–æ—Å—Ç—å',
    '–°–º–µ–ª–æ—Å—Ç—å', '–†–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–¢–µ—Ä–ø–µ–ª–∏–≤–æ—Å—Ç—å', '–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å'
];

const stories = [
    "–í 2050 –≥–æ–¥—É —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–∫–Ω—É–ª–æ—Å—å —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–æ–π. –ó–µ–º–ª—è –æ–∫–∞–∑–∞–ª–∞—Å—å –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π –≤—ã–º–∏—Ä–∞–Ω–∏—è, –∏ –≤—ã–∂–∏–≤—à–∏–µ –±—ã–ª–∏ –≤—ã–Ω—É–∂–¥–µ–Ω—ã –∏—Å–∫–∞—Ç—å —É–±–µ–∂–∏—â–µ –≤ –ø–æ–¥–∑–µ–º–Ω—ã—Ö –±—É–Ω–∫–µ—Ä–∞—Ö. –í—ã ‚Äî –æ–¥–∏–Ω –∏–∑ —Ç–µ—Ö, –∫–æ–º—É —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Å—Ç–∏—Å—å.",
    
    "–Ø–¥–µ—Ä–Ω–∞—è –≤–æ–π–Ω–∞ 2055 –≥–æ–¥–∞ –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–∞ –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –ø–ª–∞–Ω–µ—Ç—ã –≤ —Ä–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω—É—é –ø—É—Å—Ç–æ—à—å. –õ–∏—à—å –Ω–µ–º–Ω–æ–≥–∏–µ –±—É–Ω–∫–µ—Ä—ã –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä–∏–≥–æ–¥–Ω—ã–º–∏ –¥–ª—è –∂–∏–∑–Ω–∏. –í –æ–¥–Ω–æ–º –∏–∑ —Ç–∞–∫–∏—Ö —É–±–µ–∂–∏—â —Å–æ–±—Ä–∞–ª–∏—Å—å –≤—ã–∂–∏–≤—à–∏–µ, –Ω–æ –º–µ—Å—Ç–∞ —Ö–≤–∞—Ç–∏—Ç –Ω–µ –≤—Å–µ–º.",
    
    "–ê—Å—Ç–µ—Ä–æ–∏–¥ —Ä–∞–∑–º–µ—Ä–æ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –≥–æ—Ä–æ–¥ –≤—Ä–µ–∑–∞–ª—Å—è –≤ –ó–µ–º–ª—é, –≤—ã–∑–≤–∞–≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—É. –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∞, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–∞–¥–∞–µ—Ç. –ì—Ä—É–ø–ø–∞ –ª—é–¥–µ–π –Ω–∞—à–ª–∞ —É–±–µ–∂–∏—â–µ –≤ –Ω–∞—É—á–Ω–æ–º –±—É–Ω–∫–µ—Ä–µ, –Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –º–∞–ª–æ.",
    
    "–ü–∞–Ω–¥–µ–º–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –≤–∏—Ä—É—Å–∞ —É–Ω–∏—á—Ç–æ–∂–∏–ª–∞ 90% –Ω–∞—Å–µ–ª–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç—ã. –í—ã–∂–∏–≤—à–∏–µ –∑–∞–ø–µ—Ä–ª–∏—Å—å –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –±—É–Ω–∫–µ—Ä–µ, –Ω–æ –≤—Å–∫–æ—Ä–µ –≤—ã—è—Å–Ω–∏–ª–æ—Å—å, —á—Ç–æ –∫—Ç–æ-—Ç–æ –∏–∑ –Ω–∏—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Å–∏—Ç–µ–ª–µ–º —Å–º–µ—Ä—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–µ–∫—Ü–∏–∏.",
    
    "–ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–≤–µ–ª–∏ –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –ø–æ—Ç–µ–ø–ª–µ–Ω–∏—é –∏ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏—é –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–æ–≤. –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—É—Ö–æ–ø—É—Ç–Ω—ã–π –±—É–Ω–∫–µ—Ä —Å—Ç–∞–ª –¥–æ–º–æ–º –¥–ª—è –≥—Ä—É–ø–ø—ã –≤—ã–∂–∏–≤—à–∏—Ö, –Ω–æ —É—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø–æ–¥–Ω–∏–º–∞—Ç—å—Å—è.",
    
    "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤–æ—Å—Å—Ç–∞–ª –ø—Ä–æ—Ç–∏–≤ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞, –∑–∞—Ö–≤–∞—Ç–∏–≤ –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ì—Ä—É–ø–ø–∞ –ª—é–¥–µ–π —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º –±—É–Ω–∫–µ—Ä–µ, –æ—Ç—Ä–µ–∑–∞–Ω–Ω–æ–º –æ—Ç –≤–Ω–µ—à–Ω–µ–π —Å–µ—Ç–∏, –Ω–æ —Ä–µ—Å—É—Ä—Å—ã –Ω–∞ –∏—Å—Ö–æ–¥–µ.",
    
    "–°–æ–ª–Ω–µ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π, —Å–∂–∏–≥–∞—è –≤—Å–µ –∂–∏–≤–æ–µ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –ó–µ–º–ª–∏. –ü–æ–¥–∑–µ–º–Ω—ã–π –±—É–Ω–∫–µ—Ä ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –∂–∏–∑–Ω–µ–æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ª—é–¥–µ–π.",
    
    "–ú–∏—Ä–æ–≤–∞—è –≤–æ–π–Ω–∞ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ä—É–∂–∏—è –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–µ—Ç—ã –≤ –∑–æ–Ω—É —Å–º–µ—Ä—Ç–∏. –í –∑–∞—â–∏—â–µ–Ω–Ω–æ–º –±—É–Ω–∫–µ—Ä–µ —Å–æ–±—Ä–∞–ª–∏—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–∏ —Ä–∞–∑–Ω—ã—Ö –Ω–∞—Ü–∏–π, –Ω–æ –ø—Ä–æ–≤–∏–∑–∏–∏ —Ö–≤–∞—Ç–∏—Ç –Ω–µ –≤—Å–µ–º.",
    
    "–ò–∑–≤–µ—Ä–∂–µ–Ω–∏–µ —Å—É–ø–µ—Ä–≤—É–ª–∫–∞–Ω–∞ –ø–æ–∫—Ä—ã–ª–æ –ø–ª–∞–Ω–µ—Ç—É —Å–ª–æ–µ–º –ø–µ–ø–ª–∞, –±–ª–æ–∫–∏—Ä–æ–≤–∞–≤ —Å–æ–ª–Ω–µ—á–Ω—ã–π —Å–≤–µ—Ç. –í –ø–æ–¥–∑–µ–º–Ω–æ–º —É–±–µ–∂–∏—â–µ –≥—Ä—É–ø–ø–∞ –ª—é–¥–µ–π –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–∂–∏—Ç—å –≤ –≤–µ—á–Ω–æ–π –∑–∏–º–µ, –Ω–æ –æ—Ç–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–∞–≤–∞—Ç—å —Å–±–æ–∏.",
    
    "–ò–Ω–æ–ø–ª–∞–Ω–µ—Ç–Ω–æ–µ –≤—Ç–æ—Ä–∂–µ–Ω–∏–µ —É–Ω–∏—á—Ç–æ–∂–∏–ª–æ –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞. –û—Å—Ç–∞–≤—à–∏–µ—Å—è –≤ –∂–∏–≤—ã—Ö —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è –≤ —Å–µ–∫—Ä–µ—Ç–Ω–æ–º –≤–æ–µ–Ω–Ω–æ–º –±—É–Ω–∫–µ—Ä–µ, –Ω–æ –∑–∞—Ö–≤–∞—Ç—á–∏–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –ø–æ–¥–∑–µ–º–Ω—ã–µ —É–±–µ–∂–∏—â–∞ –æ–¥–Ω–æ –∑–∞ –¥—Ä—É–≥–∏–º."
];

const actionCards = [
    { 
        id: 1, 
        name: "–î–≤–æ–π–Ω–æ–π –≥–æ–ª–æ—Å", 
        description: "–í–∞—à –≥–æ–ª–æ—Å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞ –¥–≤–∞ –≤–æ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è. –ù—É–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –î–û –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.", 
        type: "voting", 
        usesLeft: 1,
        icon: "üó≥Ô∏è"
    },
    { 
        id: 2, 
        name: "–ó–∞—â–∏—Ç–∞ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è", 
        description: "–ó–∞—â–∏—â–∞–µ—Ç –æ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ. –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤.", 
        type: "protection", 
        usesLeft: 1,
        icon: "üõ°Ô∏è"
    },
    { 
        id: 3, 
        name: "–†–∞—Å–∫—Ä—ã—Ç–∏–µ —á—É–∂–æ–π –∫–∞—Ä—Ç—ã", 
        description: "–ó–∞—Å—Ç–∞–≤—å—Ç–µ –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç—å –æ–¥–Ω—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –ø–æ –≤–∞—à–µ–º—É –≤—ã–±–æ—Ä—É.", 
        type: "reveal", 
        usesLeft: 1,
        icon: "üîç"
    },
    { 
        id: 4, 
        name: "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è", 
        description: "–ó–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –æ–¥–Ω–æ–º—É –∏–≥—Ä–æ–∫—É –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ.", 
        type: "block", 
        usesLeft: 1,
        icon: "üö´"
    },
    { 
        id: 5, 
        name: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è", 
        description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –ª—é–±–æ–π —Ñ–∞–∑—ã –Ω–∞ 30 —Å–µ–∫—É–Ω–¥.", 
        type: "time", 
        usesLeft: 1,
        icon: "‚è∞"
    },
    { 
        id: 6, 
        name: "–°–º–µ–Ω–∞ –ø–æ—Ä—è–¥–∫–∞", 
        description: "–ò–∑–º–µ–Ω–∏—Ç–µ –ø–æ—Ä—è–¥–æ–∫ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ.", 
        type: "order", 
        usesLeft: 1,
        icon: "üîÑ"
    },
    { 
        id: 7, 
        name: "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≥–æ–ª–æ—Å", 
        description: "–í–∞—à –≥–æ–ª–æ—Å –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ.", 
        type: "stealth", 
        usesLeft: 1,
        icon: "üë§"
    },
    { 
        id: 8, 
        name: "–û–±–º–µ–Ω –∫–∞—Ä—Ç–∞–º–∏", 
        description: "–ü–æ–º–µ–Ω—è–π—Ç–µ—Å—å –æ–¥–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–æ–π —Å –ª—é–±—ã–º –∏–≥—Ä–æ–∫–æ–º.", 
        type: "swap", 
        usesLeft: 1,
        icon: "üîÑ"
    }
];

// === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô ===

io.on('connection', (socket) => {
    console.log('üîó New connection:', socket.id);
    
    let currentRoom = null;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
    socket.on('create-room', (data) => {
        console.log('üÜï Creating room for:', data.playerName, 'Socket:', socket.id);
        
        const playerName = data.playerName?.trim();
        
        if (!playerName || playerName.length < 2 || playerName.length > 20) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞');
            return;
        }
        
        try {
            const roomCode = generateRoomCode();
            const room = new GameRoom(roomCode, socket.id, playerName);
            
            gameRooms.set(roomCode, room);
            currentRoom = room;
            
            socket.join(roomCode);
            
            console.log('‚úÖ Room created:', roomCode, 'Host:', playerName);
            
            socket.emit('room-created', {
                roomCode: roomCode,
                roomLink: getRoomLink(roomCode),
                playerId: socket.id,
                playerName: playerName,
                isHost: true,
                maxPlayers: room.maxPlayers,
                players: room.players
            });
            
        } catch (error) {
            console.error('‚ùå Error creating room:', error);
            socket.emit('error', '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
        }
    });
    
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–Ω–∞—Ç–µ
    socket.on('join-room', (data) => {
        console.log('üö™ Joining room:', data.roomCode, 'Player:', data.playerName, 'Socket:', socket.id);
        
        const playerName = data.playerName?.trim();
        const roomCode = data.roomCode?.trim().toUpperCase();
        
        if (!playerName || playerName.length < 2 || playerName.length > 20) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞');
            return;
        }
        
        if (!roomCode || roomCode.length !== 6) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã');
            return;
        }
        
        const room = gameRooms.get(roomCode);
        if (!room) {
            socket.emit('error', '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }
        
        if (room.isFull()) {
            socket.emit('error', '–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        const existingPlayer = room.players.find(p => 
            p.name.toLowerCase() === playerName.toLowerCase() && 
            p.id !== socket.id
        );
        
        if (existingPlayer) {
            socket.emit('error', '–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ–º–Ω–∞—Ç–µ');
            return;
        }
        
        try {
            // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –±—ã–ª
            if (currentRoom && currentRoom !== room) {
                currentRoom.removePlayer(socket.id);
                socket.leave(currentRoom.roomCode);
            }
            
            room.addPlayer(socket.id, playerName);
            currentRoom = room;
            
            socket.join(roomCode);
            
            console.log('‚úÖ Player joined room:', roomCode, 'Player:', playerName);
            
            socket.emit('room-joined', {
                roomCode: roomCode,
                roomLink: getRoomLink(roomCode),
                playerId: socket.id,
                playerName: playerName,
                isHost: false,
                maxPlayers: room.maxPlayers,
                players: room.players
            });
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ
            socket.to(roomCode).emit('player-joined', {
                players: room.players,
                maxPlayers: room.maxPlayers,
                gameState: room.gameState
            });
            
        } catch (error) {
            console.error('‚ùå Error joining room:', error);
            socket.emit('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ');
        }
    });
    
    // –ü–æ–∫–∏–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    socket.on('leave-room', () => {
        console.log('üö™ Player leaving room:', socket.id);
        
        if (currentRoom) {
            const removedPlayer = currentRoom.removePlayer(socket.id);
            if (removedPlayer) {
                console.log('üëã Player left room:', currentRoom.roomCode, 'Player:', removedPlayer.name);
                
                socket.leave(currentRoom.roomCode);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
                const newHost = currentRoom.players.find(p => p.isHost);
                socket.to(currentRoom.roomCode).emit('player-left', {
                    players: currentRoom.players,
                    gameState: currentRoom.gameState,
                    newHost: newHost ? newHost.id : null
                });
                
                // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞, —É–¥–∞–ª—è–µ–º –µ—ë
                if (currentRoom.isEmpty()) {
                    console.log('üóëÔ∏è Removing empty room:', currentRoom.roomCode);
                    currentRoom.cleanup();
                    gameRooms.delete(currentRoom.roomCode);
                } else if (currentRoom.gameState === 'playing' && currentRoom.players.length < 2) {
                    // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∏–¥–µ—Ç –∏ –∏–≥—Ä–æ–∫–æ–≤ –º–µ–Ω—å—à–µ 2, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä—É
                    resetGameInRoom(currentRoom);
                }
                
                currentRoom = null;
            }
        }
    });
    
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    socket.on('disconnect', () => {
        console.log('‚ùå Player disconnected:', socket.id);
        
        if (currentRoom) {
            const removedPlayer = currentRoom.removePlayer(socket.id);
            if (removedPlayer) {
                console.log('üëã Player disconnected from room:', currentRoom.roomCode, 'Player:', removedPlayer.name);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
                const newHost = currentRoom.players.find(p => p.isHost);
                socket.to(currentRoom.roomCode).emit('player-left', {
                    players: currentRoom.players,
                    gameState: currentRoom.gameState,
                    newHost: newHost ? newHost.id : null
                });
                
                // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞, —É–¥–∞–ª—è–µ–º –µ—ë
                if (currentRoom.isEmpty()) {
                    console.log('üóëÔ∏è Removing empty room:', currentRoom.roomCode);
                    currentRoom.cleanup();
                    gameRooms.delete(currentRoom.roomCode);
                } else if (currentRoom.gameState === 'playing' && currentRoom.players.length < 2) {
                    // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∏–¥–µ—Ç –∏ –∏–≥—Ä–æ–∫–æ–≤ –º–µ–Ω—å—à–µ 2, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä—É
                    resetGameInRoom(currentRoom);
                }
            }
        }
    });
    
    // === –ò–ì–†–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
    
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
    socket.on('change-max-players', (data) => {
        if (!currentRoom) {
            socket.emit('error', '–í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ!');
            return;
        }
        
        const player = currentRoom.getPlayer(socket.id);
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!');
            return;
        }
        
        if (currentRoom.gameState !== 'lobby') {
            socket.emit('error', '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã!');
            return;
        }
        
        const newMaxPlayers = parseInt(data.maxPlayers);
        if (newMaxPlayers < 2 || newMaxPlayers > 16) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        if (newMaxPlayers < currentRoom.players.length) {
            socket.emit('error', '–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        currentRoom.maxPlayers = newMaxPlayers;
        
        console.log('üîß Max players changed in room:', currentRoom.roomCode, 'to:', newMaxPlayers);
        
        io.to(currentRoom.roomCode).emit('max-players-changed', {
            maxPlayers: currentRoom.maxPlayers,
            players: currentRoom.players
        });
    });
    
    // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
    socket.on('start-game', () => {
        console.log('üéÆ Game start requested in room:', currentRoom?.roomCode, 'by:', socket.id);
        
        if (!currentRoom) {
            socket.emit('error', '–í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ!');
            return;
        }
        
        const player = currentRoom.getPlayer(socket.id);
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!');
            return;
        }
        
        if (currentRoom.players.length < 2) {
            socket.emit('error', '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (currentRoom.gameState !== 'lobby') {
            socket.emit('error', '–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!');
            return;
        }
        
        startGameInRoom(currentRoom);
    });
    
    // –ò–ì–†–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
    socket.on('reveal-characteristic', (data) => {
        if (!currentRoom) {
            socket.emit('error', '–í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ!');
            return;
        }
        
        console.log('üîç Reveal characteristic:', data);
        
        const player = currentRoom.getPlayer(socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏!');
            return;
        }
        
        if (currentRoom.gamePhase !== 'revelation') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫!');
            return;
        }
        
        if (currentRoom.currentTurnPlayer !== socket.id) {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!');
            return;
        }
        
        const characteristic = data.characteristic;
        
        if (!player.characteristics || !player.characteristics[characteristic]) {
            socket.emit('error', '–¢–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            return;
        }
        
        if (player.revealedCharacteristics && player.revealedCharacteristics.includes(characteristic)) {
            socket.emit('error', '–≠—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞!');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
        const requiredCards = getRequiredCardsForRound(currentRoom.currentRound);
        const currentlyRevealed = player.cardsRevealedThisRound || 0;
        
        if (currentlyRevealed >= requiredCards) {
            socket.emit('error', '–í—ã —É–∂–µ —Ä–∞—Å–∫—Ä—ã–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞—Ä—Ç—ã –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ!');
            return;
        }
        
        // –í –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        if (currentRoom.currentRound === 1) {
            if (currentlyRevealed === 0 && characteristic !== 'profession') {
                socket.emit('error', '–í –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é!');
                return;
            }
            
            if (currentlyRevealed === 1 && characteristic === 'profession') {
                socket.emit('error', '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É.');
                return;
            }
        }
        
        // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
        if (!player.revealedCharacteristics) {
            player.revealedCharacteristics = [];
        }
        
        player.revealedCharacteristics.push(characteristic);
        player.cardsRevealedThisRound = (player.cardsRevealedThisRound || 0) + 1;
        
        console.log(`üîç ${player.name} revealed ${characteristic}: ${player.characteristics[characteristic]}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
        io.to(currentRoom.roomCode).emit('characteristic-revealed', {
            playerId: player.id,
            playerName: player.name,
            characteristic: characteristic,
            value: player.characteristics[characteristic],
            players: currentRoom.players,
            cardsRevealedThisRound: player.cardsRevealedThisRound,
            requiredCards: requiredCards
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª –ª–∏ –∏–≥—Ä–æ–∫ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ
        if (player.cardsRevealedThisRound >= requiredCards) {
            player.hasRevealed = true;
            console.log(`‚úÖ ${player.name} completed revelation phase`);
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
            setTimeout(() => {
                nextPlayerTurnInRoom(currentRoom);
            }, 1500);
        }
    });

    socket.on('start-round', () => {
        if (!currentRoom) {
            socket.emit('error', '–í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ!');
            return;
        }
        
        console.log('üéØ Start round vote from:', socket.id);
        
        const player = currentRoom.getPlayer(socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (currentRoom.gamePhase !== 'preparation') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞!');
            return;
        }
        
        if (currentRoom.startRoundVotes.includes(socket.id)) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –Ω–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞!');
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å
        currentRoom.startRoundVotes.push(socket.id);
        
        const requiredVotes = 2; // –¢—Ä–µ–±—É–µ—Ç—Å—è 2 –≥–æ–ª–æ—Å–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞
        const currentVotes = currentRoom.startRoundVotes.length;
        
        console.log(`üéØ Start round votes: ${currentVotes}/${requiredVotes}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
        currentRoom.players.forEach(p => {
            const hasVoted = currentRoom.startRoundVotes.includes(p.id);
            io.to(p.id).emit('start-round-vote-update', {
                votes: currentVotes,
                required: requiredVotes,
                hasVoted: hasVoted
            });
        });
        
        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤ - –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞—É–Ω–¥
        if (currentVotes >= requiredVotes) {
            console.log('üöÄ Starting round - enough votes');
            currentRoom.startRoundVotes = []; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
            startRevelationPhaseInRoom(currentRoom);
        }
    });

    socket.on('vote-skip-discussion', () => {
        if (!currentRoom) {
            socket.emit('error', '–í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ!');
            return;
        }
        
        console.log('‚è≠Ô∏è Skip discussion vote from:', socket.id);
        
        const player = currentRoom.getPlayer(socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (currentRoom.gamePhase !== 'discussion') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ —Ñ–∞–∑–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è!');
            return;
        }
        
        if (currentRoom.skipDiscussionVotes.includes(socket.id)) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—è!');
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å
        currentRoom.skipDiscussionVotes.push(socket.id);
        
        const requiredVotes = 2; // –í—Å–µ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–≤–Ω–æ 2 –≥–æ–ª–æ—Å–∞
        const currentVotes = currentRoom.skipDiscussionVotes.length;
        
        console.log(`‚è≠Ô∏è Skip discussion votes: ${currentVotes}/${requiredVotes}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
        currentRoom.players.forEach(p => {
            const hasVoted = currentRoom.skipDiscussionVotes.includes(p.id);
            io.to(p.id).emit('skip-discussion-vote-update', {
                votes: currentVotes,
                required: requiredVotes,
                hasVoted: hasVoted
            });
        });
        
        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
        if (currentVotes >= requiredVotes) {
            console.log('‚è≠Ô∏è Skipping discussion - enough votes');
            if (currentRoom.timer) {
                clearInterval(currentRoom.timer);
                currentRoom.timer = null;
            }
            
            io.to(currentRoom.roomCode).emit('discussion-skipped', {
                gamePhase: 'voting',
                timeLeft: 120,
                players: currentRoom.players,
                currentRound: currentRoom.currentRound
            });
            
            startVotingPhaseInRoom(currentRoom);
        }
    });

    socket.on('vote-player', (data) => {
        if (!currentRoom) {
            socket.emit('error', '–í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ!');
            return;
        }
        
        console.log('üó≥Ô∏è Vote from:', socket.id, 'for:', data.targetId);
        
        const player = currentRoom.getPlayer(socket.id);
        const targetPlayer = currentRoom.players.find(p => p.id === data.targetId);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (!targetPlayer || !targetPlayer.isAlive) {
            socket.emit('error', '–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (currentRoom.gamePhase !== 'voting') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
            return;
        }
        
        if (player.hasVoted) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!');
            return;
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å
        player.hasVoted = true;
        player.votedFor = data.targetId;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤ —É —Ü–µ–ª–∏
        targetPlayer.votes = (targetPlayer.votes || 0) + 1;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        if (!currentRoom.votingResults[data.targetId]) {
            currentRoom.votingResults[data.targetId] = [];
        }
        currentRoom.votingResults[data.targetId].push(socket.id);
        
        console.log(`üó≥Ô∏è ${player.name} voted for ${targetPlayer.name} (${targetPlayer.votes} votes)`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        io.to(currentRoom.roomCode).emit('vote-update', {
            players: currentRoom.players,
            votingResults: currentRoom.votingResults,
            canChangeVote: currentRoom.canChangeVote
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
        const alivePlayers = currentRoom.players.filter(p => p.isAlive);
        const votedPlayers = alivePlayers.filter(p => p.hasVoted);
        
        if (votedPlayers.length === alivePlayers.length) {
            console.log('‚úÖ All players voted, processing results');
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            setTimeout(() => {
                processVotingResultsInRoom(currentRoom);
            }, 2000);
        }
    });
});

// === –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ò–ì–†–û–ô ===

function startGameInRoom(room) {
    try {
        console.log('üöÄ Starting game in room:', room.roomCode);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        room.players.forEach(player => {
            player.characteristics = generateCharacteristics();
            player.actionCards = [getRandomActionCard()];
            player.hasRevealed = false;
            player.hasVoted = false;
            player.revealedCharacteristics = [];
            player.cardsRevealedThisRound = 0;
        });
        
        room.gameState = 'playing';
        room.gamePhase = 'preparation';
        room.currentRound = 1;
        room.timeLeft = 0;
        room.playersWhoRevealed = [];
        room.currentTurnPlayer = null;
        
        const randomStory = stories[Math.floor(Math.random() * stories.length)];
        
        console.log('üöÄ Game started in room:', room.roomCode, 'Players:', room.players.length);
        
        io.to(room.roomCode).emit('game-started', {
            players: room.players,
            gameState: room.gameState,
            gamePhase: room.gamePhase,
            currentRound: room.currentRound,
            timeLeft: room.timeLeft,
            story: randomStory
        });
        
    } catch (error) {
        console.error('‚ùå Error starting game in room:', room.roomCode, error);
    }
}

function resetGameInRoom(room) {
    try {
        console.log('üîÑ Resetting game in room:', room.roomCode);
        
        if (room.timer) {
            clearInterval(room.timer);
            room.timer = null;
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
        room.players.forEach((player) => {
            player.isAlive = true;
            player.votes = 0;
            player.hasRevealed = false;
            player.hasVoted = false;
            player.votedFor = null;
            player.cardsRevealedThisRound = 0;
            player.revealedCharacteristics = [];
            player.characteristics = null;
            player.actionCards = [];
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
        room.gameState = 'lobby';
        room.gamePhase = 'waiting';
        room.currentRound = 1;
        room.timer = null;
        room.timeLeft = 0;
        room.votingResults = {};
        room.revealedThisRound = 0;
        room.currentTurnPlayer = null;
        room.playersWhoRevealed = [];
        room.totalVotes = 0;
        room.skipDiscussionVotes = [];
        room.justificationQueue = [];
        room.currentJustifyingPlayer = null;
        room.canChangeVote = {};
        room.startRoundVotes = [];
        room.activeEffects = {};
        room.pendingEliminationNextRound = false;
        room.eliminateTopVotersNextRound = false;
        
        io.to(room.roomCode).emit('game-reset', {
            players: room.players,
            gameState: room.gameState
        });
        
    } catch (error) {
        console.error('‚ùå Error resetting game in room:', room.roomCode, error);
    }
}

function generateCharacteristics() {
    return {
        profession: professions[Math.floor(Math.random() * professions.length)],
        health: healthConditions[Math.floor(Math.random() * healthConditions.length)],
        hobby: hobbies[Math.floor(Math.random() * hobbies.length)],
        phobia: phobias[Math.floor(Math.random() * phobias.length)],
        baggage: baggage[Math.floor(Math.random() * baggage.length)],
        fact: facts[Math.floor(Math.random() * facts.length)]
    };
}

function getRandomActionCard() {
    return actionCards[Math.floor(Math.random() * actionCards.length)];
}

function getRequiredCardsForRound(round) {
    if (round === 1) {
        return 2; // –ü—Ä–æ—Ñ–µ—Å—Å–∏—è + 1 –∫–∞—Ä—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä
    } else {
        return 1; // 1 –∫–∞—Ä—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä
    }
}

function startRevelationPhaseInRoom(room) {
    console.log('üîç Starting revelation phase in room:', room.roomCode);
    
    room.gamePhase = 'revelation';
    room.timeLeft = 60;
    room.revealedThisRound = 0;
    room.playersWhoRevealed = [];
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    room.players.forEach(player => {
        player.hasRevealed = false;
        player.cardsRevealedThisRound = 0;
    });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Ö–æ–¥–∞
    const alivePlayers = room.players.filter(p => p.isAlive);
    if (alivePlayers.length > 0) {
        room.currentTurnPlayer = alivePlayers[0].id;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ñ–∞–∑—ã
    io.to(room.roomCode).emit('phase-changed', {
        gamePhase: room.gamePhase,
        timeLeft: room.timeLeft,
        players: room.players,
        currentTurnPlayer: room.currentTurnPlayer,
        currentRound: room.currentRound
    });
    
    startGameTimerInRoom(room);
}

function nextPlayerTurnInRoom(room) {
    const alivePlayers = room.players.filter(p => p.isAlive);
    const currentPlayerIndex = alivePlayers.findIndex(p => p.id === room.currentTurnPlayer);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
    const nextPlayerIndex = (currentPlayerIndex + 1) % alivePlayers.length;
    
    // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å–Ω–æ–≤–∞ –∏ –≤—Å–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é
    if (nextPlayerIndex === 0) {
        const allRevealed = alivePlayers.every(p => p.hasRevealed);
        if (allRevealed) {
            console.log('‚úÖ All players finished revelation phase');
            startDiscussionPhaseInRoom(room);
            return;
        }
    }
    
    const nextPlayer = alivePlayers[nextPlayerIndex];
    room.currentTurnPlayer = nextPlayer.id;
    room.timeLeft = 60;
    
    console.log(`üë§ Next turn: ${nextPlayer.name}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    io.to(room.roomCode).emit('phase-changed', {
        gamePhase: room.gamePhase,
        timeLeft: room.timeLeft,
        players: room.players,
        currentTurnPlayer: room.currentTurnPlayer,
        currentRound: room.currentRound
    });
    
    startGameTimerInRoom(room);
}

function startDiscussionPhaseInRoom(room) {
    console.log('üí¨ Starting discussion phase in room:', room.roomCode);
    
    room.gamePhase = 'discussion';
    room.timeLeft = 180; // 3 –º–∏–Ω—É—Ç—ã –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
    room.currentTurnPlayer = null;
    room.skipDiscussionVotes = [];
    
    io.to(room.roomCode).emit('phase-changed', {
        gamePhase: room.gamePhase,
        timeLeft: room.timeLeft,
        players: room.players,
        currentTurnPlayer: null,
        currentRound: room.currentRound
    });
    
    startGameTimerInRoom(room);
}

function startVotingPhaseInRoom(room) {
    console.log('üó≥Ô∏è Starting voting phase in room:', room.roomCode);
    
    room.gamePhase = 'voting';
    room.timeLeft = 120; // 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    room.votingResults = {};
    room.totalVotes = 0;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    room.players.forEach(player => {
        player.hasVoted = false;
        player.votedFor = null;
        player.votes = 0;
    });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –≥–æ–ª–æ—Å
    room.canChangeVote = {};
    room.players.filter(p => p.isAlive).forEach(player => {
        room.canChangeVote[player.id] = true;
    });
    
    io.to(room.roomCode).emit('phase-changed', {
        gamePhase: room.gamePhase,
        timeLeft: room.timeLeft,
        players: room.players,
        canChangeVote: room.canChangeVote,
        currentRound: room.currentRound
    });
    
    startGameTimerInRoom(room);
}

function processVotingResultsInRoom(room) {
    console.log('üìä Processing voting results in room:', room.roomCode);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
    let maxVotes = 0;
    const alivePlayers = room.players.filter(p => p.isAlive);
    
    alivePlayers.forEach(player => {
        if (player.votes > maxVotes) {
            maxVotes = player.votes;
        }
    });
    
    const playersWithMaxVotes = alivePlayers.filter(p => p.votes === maxVotes && maxVotes > 0);
    
    if (playersWithMaxVotes.length === 1) {
        // –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ - –∏—Å–∫–ª—é—á–∞–µ–º —Å—Ä–∞–∑—É
        playersWithMaxVotes[0].isAlive = false;
        showResultsInRoom(room);
    } else if (playersWithMaxVotes.length >= 2) {
        // –ù–∏—á—å—è - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è–º –∏–ª–∏ –≤—Ç–æ—Ä–æ–º—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é
        if (room.justificationQueue.length > 0) {
            // –≠—Ç–æ —É–∂–µ –≤—Ç–æ—Ä–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ - –Ω–∏–∫–æ–≥–æ –Ω–µ –∏—Å–∫–ª—é—á–∞–µ–º
            console.log('ü§ù Second voting tie - no elimination this round');
            room.eliminateTopVotersNextRound = true;
            room.justificationQueue = [];
            showResultsInRoom(room);
        } else {
            // –ü–µ—Ä–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è–º
            startJustificationPhaseInRoom(room);
        }
    } else {
        // –ù–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤
        nextRoundInRoom(room);
    }
}

function startJustificationPhaseInRoom(room) {
    console.log('‚öñÔ∏è Starting justification phase in room:', room.roomCode);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
    let maxVotes = 0;
    const alivePlayers = room.players.filter(p => p.isAlive);
    
    alivePlayers.forEach(player => {
        if (player.votes > maxVotes) {
            maxVotes = player.votes;
        }
    });
    
    const playersToJustify = alivePlayers.filter(p => p.votes === maxVotes && maxVotes > 0);
    
    if (playersToJustify.length <= 1) {
        // –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ –∏–ª–∏ –Ω–∏–∫–æ–≥–æ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        showResultsInRoom(room);
        return;
    }
    
    room.gamePhase = 'justification';
    room.justificationQueue = [...playersToJustify];
    room.currentJustifyingPlayer = room.justificationQueue[0].id;
    room.timeLeft = 60;
    
    io.to(room.roomCode).emit('justification-started', {
        gamePhase: room.gamePhase,
        timeLeft: room.timeLeft,
        players: room.players,
        justifyingPlayer: playersToJustify[0],
        justificationQueue: room.justificationQueue.map(p => p.name),
        currentRound: room.currentRound
    });
    
    startGameTimerInRoom(room);
}

function showResultsInRoom(room) {
    console.log('üìä Showing results in room:', room.roomCode);
    
    room.gamePhase = 'results';
    
    if (room.timer) {
        clearInterval(room.timer);
        room.timer = null;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    const eliminatedPlayers = room.players.filter(p => !p.isAlive);
    
    io.to(room.roomCode).emit('round-results', {
        eliminatedPlayers: eliminatedPlayers.map(p => p.name),
        players: room.players,
        votingResults: room.votingResults,
        resultMessage: '–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω',
        willEliminateTopVotersNextRound: room.eliminateTopVotersNextRound
    });
    
    // –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
    setTimeout(() => {
        nextRoundInRoom(room);
    }, 5000);
}

function nextRoundInRoom(room) {
    try {
        room.currentRound++;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        const alivePlayers = room.players.filter(p => p.isAlive);
        
        if (alivePlayers.length <= 2 || room.currentRound > room.maxRounds) {
            endGameInRoom(room);
            return;
        }
        
        room.gamePhase = 'preparation';
        room.timeLeft = 0;
        room.currentTurnPlayer = null;
        room.startRoundVotes = [];
        
        console.log('üîÑ Starting round:', room.currentRound, 'in room:', room.roomCode);
        
        io.to(room.roomCode).emit('new-round', {
            currentRound: room.currentRound,
            gamePhase: room.gamePhase,
            timeLeft: room.timeLeft,
            players: room.players,
            willEliminateTopVotersThisRound: room.eliminateTopVotersNextRound
        });
    } catch (error) {
        console.error('‚ùå Error in nextRound for room:', room.roomCode, error);
    }
}

function endGameInRoom(room) {
    try {
        console.log('üèÅ Game ended in room:', room.roomCode);
        
        const alivePlayers = room.players.filter(p => p.isAlive);
        
        room.gamePhase = 'finished';
        if (room.timer) {
            clearInterval(room.timer);
            room.timer = null;
        }
        
        io.to(room.roomCode).emit('game-ended', {
            winners: alivePlayers,
            players: room.players
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å –∏–≥—Ä—ã —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            resetGameInRoom(room);
        }, 10000);
    } catch (error) {
        console.error('‚ùå Error ending game in room:', room.roomCode, error);
    }
}

function startGameTimerInRoom(room) {
    if (room.timer) {
        clearInterval(room.timer);
    }
    
    room.timer = setInterval(() => {
        room.timeLeft--;
        
        io.to(room.roomCode).emit('timer-update', { 
            timeLeft: room.timeLeft,
            gamePhase: room.gamePhase 
        });
        
        if (room.timeLeft <= 0) {
            clearInterval(room.timer);
            room.timer = null;
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã
            switch (room.gamePhase) {
                case 'revelation':
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
                    nextPlayerTurnInRoom(room);
                    break;
                case 'discussion':
                    startVotingPhaseInRoom(room);
                    break;
                case 'voting':
                    processVotingResultsInRoom(room);
                    break;
                case 'justification':
                    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—é –∏–ª–∏ –≤—Ç–æ—Ä–æ–º—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é
                    nextJustificationInRoom(room);
                    break;
            }
        }
    }, 1000);
}

function nextJustificationInRoom(room) {
    const currentIndex = room.justificationQueue.findIndex(p => p.id === room.currentJustifyingPlayer);
    
    if (currentIndex < room.justificationQueue.length - 1) {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
        room.currentJustifyingPlayer = room.justificationQueue[currentIndex + 1].id;
        room.timeLeft = 60;
        
        const nextPlayer = room.justificationQueue[currentIndex + 1];
        
        io.to(room.roomCode).emit('justification-started', {
            gamePhase: room.gamePhase,
            timeLeft: room.timeLeft,
            players: room.players,
            justifyingPlayer: nextPlayer,
            justificationQueue: room.justificationQueue.map(p => p.name),
            currentRound: room.currentRound
        });
        
        startGameTimerInRoom(room);
    } else {
        // –í—Å–µ –æ–ø—Ä–∞–≤–¥–∞–ª–∏—Å—å - –≤—Ç–æ—Ä–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        startSecondVotingInRoom(room);
    }
}

function startSecondVotingInRoom(room) {
    console.log('üó≥Ô∏è Starting second voting in room:', room.roomCode);
    
    room.gamePhase = 'voting';
    room.timeLeft = 90;
    room.votingResults = {};
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    room.players.forEach(player => {
        player.hasVoted = false;
        player.votedFor = null;
        player.votes = 0;
    });
    
    // –í–æ –≤—Ç–æ—Ä–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –≥–æ–ª–æ—Å
    room.canChangeVote = {};
    
    io.to(room.roomCode).emit('second-voting-started', {
        gamePhase: room.gamePhase,
        timeLeft: room.timeLeft,
        players: room.players,
        canChangeVote: room.canChangeVote,
        currentRound: room.currentRound,
        isSecondVoting: true
    });
    
    startGameTimerInRoom(room);
}
