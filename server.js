const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');

console.log('üöÄ Starting Single Room Bunker Game Server...');

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

// === –ú–ê–°–°–ò–í–´ –ö–ê–†–¢ –î–ï–ô–°–¢–í–ò–ô –ò –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò ===

const actionCards = [
    { 
        id: 1, 
        name: "–î–≤–æ–π–Ω–æ–π –≥–æ–ª–æ—Å", 
        description: "–í–∞—à –≥–æ–ª–æ—Å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞ –¥–≤–∞ –≤–æ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è. –ù—É–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –î–û –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.", 
        type: "voting", 
        usesLeft: 1,
        icon: "üó≥Ô∏è"
    },
    { 
        id: 2, 
        name: "–î–µ—Ç–µ–∫—Ç–∏–≤", 
        description: "–£–∑–Ω–∞–π—Ç–µ –æ–¥–Ω—É —Å–∫—Ä—ã—Ç—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞", 
        type: "investigative", 
        usesLeft: 1,
        icon: "üîç"
    },
    { 
        id: 3, 
        name: "–ó–∞—â–∏—Ç–Ω–∏–∫", 
        description: "–°–ø–∞—Å–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –æ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è —Å–µ–±—è)", 
        type: "protective", 
        usesLeft: 1,
        icon: "üõ°Ô∏è"
    },
    { 
        id: 4, 
        name: "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≥–æ–ª–æ—Å", 
        description: "–í–∞—à –≥–æ–ª–æ—Å –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º", 
        type: "stealth", 
        usesLeft: 1,
        icon: "üë§"
    },
    { 
        id: 5, 
        name: "–ë–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫", 
        description: "–ó–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–µ–π—Å—Ç–≤–∏—è –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞", 
        type: "disruptive", 
        usesLeft: 1,
        icon: "üö´"
    },
    { 
        id: 6, 
        name: "–õ–∏–¥–µ—Ä", 
        description: "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ñ–∞–∑—É –∏–≥—Ä—ã", 
        type: "control", 
        usesLeft: 1,
        icon: "üëë"
    }
];

const professions = [
    '–í—Ä–∞—á', '–£—á–∏—Ç–µ–ª—å', '–ò–Ω–∂–µ–Ω–µ—Ä', '–ü–æ–≤–∞—Ä', '–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π', '–ü–æ–∂–∞—Ä–Ω—ã–π',
    '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä', '–≠–ª–µ–∫—Ç—Ä–∏–∫', '–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫', '–ú–µ—Ö–∞–Ω–∏–∫',
    '–§–µ—Ä–º–µ—Ä', '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä', '–ü—Å–∏—Ö–æ–ª–æ–≥', '–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç', '–•—É–¥–æ–∂–Ω–∏–∫',
    '–ú—É–∑—ã–∫–∞–Ω—Ç', '–ê–∫—Ç–µ—Ä', '–¢–∞–Ω—Ü–æ—Ä', '–ü–∏—Å–∞—Ç–µ–ª—å', '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å',
    '–ü—Ä–æ–¥–∞–≤–µ—Ü', '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä', '–Æ—Ä–∏—Å—Ç', '–°—É–¥—å—è', '–í–æ–µ–Ω–Ω—ã–π',
    '–ü–∏–ª–æ—Ç', '–°—Ç—é–∞—Ä–¥–µ—Å—Å–∞', '–í–æ–¥–∏—Ç–µ–ª—å', '–ü–æ—á—Ç–∞–ª—å–æ–Ω', '–û—Ö—Ä–∞–Ω–Ω–∏–∫'
];

const healthConditions = [
    '–ó–¥–æ—Ä–æ–≤', '–ë–ª–∏–∑–æ—Ä—É–∫–æ—Å—Ç—å', '–ê—Å—Ç–º–∞', '–î–∏–∞–±–µ—Ç', '–ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –æ—Ä–µ—Ö–∏',
    '–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è', '–ê—Ä—Ç—Ä–∏—Ç', '–ú–∏–≥—Ä–µ–Ω—å', '–ë–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞', '–î–µ–ø—Ä–µ—Å—Å–∏—è',
    '–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å', '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Ç—Ä–∞–≤–º–∞', '–û–ø–µ—Ä–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–¥—Ü–µ', '–ü—Ä–æ—Ç–µ–∑ –Ω–æ–≥–∏',
    '–°–ª—É—Ö–æ–≤–æ–π –∞–ø–ø–∞—Ä–∞—Ç', '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è –±–æ–ª—å –≤ —Å–ø–∏–Ω–µ', '–≠–ø–∏–ª–µ–ø—Å–∏—è',
    '–ê–Ω–µ–º–∏—è', '–ü–ª–æ—Ö–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è', '–ë—ã—Å—Ç—Ä–∞—è —É—Ç–æ–º–ª—è–µ–º–æ—Å—Ç—å'
];

const hobbies = [
    '–ß—Ç–µ–Ω–∏–µ', '–°–ø–æ—Ä—Ç', '–ì–æ—Ç–æ–≤–∫–∞', '–†–∏—Å–æ–≤–∞–Ω–∏–µ', '–ú—É–∑—ã–∫–∞', '–¢–∞–Ω—Ü—ã',
    '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', '–°–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ', '–†—ã–±–∞–ª–∫–∞', '–û—Ö–æ—Ç–∞', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
    '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–í—è–∑–∞–Ω–∏–µ', '–®–∞—Ö–º–∞—Ç—ã', '–í–∏–¥–µ–æ–∏–≥—Ä—ã', '–ö–∏–Ω–æ',
    '–¢–µ–∞—Ç—Ä', '–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è', '–ì–µ–æ–ª–æ–≥–∏—è', '–ê—Ä—Ö–µ–æ–ª–æ–≥–∏—è', '–ò—Å—Ç–æ—Ä–∏—è',
    '–Ø–∑—ã–∫–∏', '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞', '–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ',
    '–°–∫–∞–ª–æ–ª–∞–∑–∞–Ω–∏–µ', '–ü–∞—Ä–∞—à—é—Ç–Ω—ã–π —Å–ø–æ—Ä—Ç', '–î–∞–π–≤–∏–Ω–≥', '–°–µ—Ä—Ñ–∏–Ω–≥', '–ô–æ–≥–∞'
];

const phobias = [
    '–ê—Ä–∞—Ö–Ω–æ—Ñ–æ–±–∏—è (–ø–∞—É–∫–∏)', '–ö–ª–∞—É—Å—Ç—Ä–æ—Ñ–æ–±–∏—è (–∑–∞–º–∫–Ω—É—Ç—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞)', 
    '–ê–∫—Ä–æ—Ñ–æ–±–∏—è (–≤—ã—Å–æ—Ç–∞)', '–ê—ç—Ä–æ—Ñ–æ–±–∏—è (–ø–æ–ª–µ—Ç—ã)', '–ê–∫–≤–∞—Ñ–æ–±–∏—è (–≤–æ–¥–∞)',
    '–°–æ—Ü–∏–æ—Ñ–æ–±–∏—è (–ª—é–¥–∏)', '–ê–≥–æ—Ä–∞—Ñ–æ–±–∏—è (–æ—Ç–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞)',
    '–ù–∏–∫—Ç–æ—Ñ–æ–±–∏—è (—Ç–µ–º–Ω–æ—Ç–∞)', '–û—Ñ–∏–¥–∏–æ—Ñ–æ–±–∏—è (–∑–º–µ–∏)', '–ö–∏–Ω–æ—Ñ–æ–±–∏—è (—Å–æ–±–∞–∫–∏)',
    '–ú–∏–∑–æ—Ñ–æ–±–∏—è (–≥—Ä—è–∑—å)', '–ì–µ–º–æ—Ñ–æ–±–∏—è (–∫—Ä–æ–≤—å)', '–¢–∞–Ω–∞—Ç–æ—Ñ–æ–±–∏—è (—Å–º–µ—Ä—Ç—å)',
    '–ê–≤—Ç–æ—Ñ–æ–±–∏—è (–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ)', '–§–æ–Ω–æ—Ñ–æ–±–∏—è (–≥—Ä–æ–º–∫–∏–µ –∑–≤—É–∫–∏)',
    '–ü–∏—Ä–æ—Ñ–æ–±–∏—è (–æ–≥–æ–Ω—å)', '–¢—Ä–∏–ø–æ—Ñ–æ–±–∏—è (–¥—ã—Ä–∫–∏)', '–≠–Ω—Ç–æ–º–æ—Ñ–æ–±–∏—è (–Ω–∞—Å–µ–∫–æ–º—ã–µ)',
    '–ú–µ—Ç–µ–æ—Ä–æ—Ñ–æ–±–∏—è (–ø–æ–≥–æ–¥–∞)', '–ö—Å–µ–Ω–æ—Ñ–æ–±–∏—è (–Ω–µ–∑–Ω–∞–∫–æ–º—Ü—ã)'
];

const baggage = [
    '–†—é–∫–∑–∞–∫ —Å –µ–¥–æ–π', '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∞–ø—Ç–µ—á–∫–∞', '–ù–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤',
    '–°–ø–∞–ª—å–Ω—ã–π –º–µ—à–æ–∫', '–ü–∞–ª–∞—Ç–∫–∞', '–§–æ–Ω–∞—Ä–∏–∫ —Å –±–∞—Ç–∞—Ä–µ–π–∫–∞–º–∏',
    '–†–∞–¥–∏–æ–ø—Ä–∏–µ–º–Ω–∏–∫', '–ö–æ–º–ø–∞—Å –∏ –∫–∞—Ä—Ç—ã', '–í–µ—Ä–µ–≤–∫–∞ 50–º', '–ù–æ–∂',
    '–ó–∞–∂–∏–≥–∞–ª–∫–∞', '–°–ø–∏—á–∫–∏ –≤–æ–¥–æ—Å—Ç–æ–π–∫–∏–µ', '–ö–æ–Ω—Å–µ—Ä–≤—ã', '–í–æ–¥–∞ 10–ª',
    '–û–¥–µ—è–ª–æ', '–ó–∞–ø–∞—Å–Ω–∞—è –æ–¥–µ–∂–¥–∞', '–ö–Ω–∏–≥–∏', '–ò–≥—Ä–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã',
    '–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', '–§–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç', '–î–æ–∫—É–º–µ–Ω—Ç—ã',
    '–î–µ–Ω—å–≥–∏', '–£–∫—Ä–∞—à–µ–Ω–∏—è', '–°–µ–º–µ–π–Ω—ã–µ —Ñ–æ—Ç–æ', '–û—Ä—É–∂–∏–µ',
    '–ê–ª–∫–æ–≥–æ–ª—å', '–°–∏–≥–∞—Ä–µ—Ç—ã', '–õ–µ–∫–∞—Ä—Å—Ç–≤–∞', '–°–µ–º–µ–Ω–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π', '–£–¥–æ—á–∫–∞'
];

const facts = [
    '–°–ª—É–∂–∏–ª –≤ –∞—Ä–º–∏–∏', '–ó–Ω–∞–µ—Ç –±–æ–µ–≤—ã–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞', '–£–º–µ–µ—Ç –≥–æ—Ç–æ–≤–∏—Ç—å',
    '–ì–æ–≤–æ—Ä–∏—Ç –Ω–∞ 3 —è–∑—ã–∫–∞—Ö', '–ò–º–µ–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞', '–£–º–µ–µ—Ç —à–∏—Ç—å',
    '–ó–Ω–∞–µ—Ç –ø–µ—Ä–≤—É—é –ø–æ–º–æ—â—å', '–£–º–µ–µ—Ç —á–∏–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É', '–•–æ—Ä–æ—à–æ —Å—Ç—Ä–µ–ª—è–µ—Ç',
    '–£–º–µ–µ—Ç –≤—ã–∂–∏–≤–∞—Ç—å –≤ –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥–µ', '–ó–Ω–∞–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é', '–£–º–µ–µ—Ç –ø–µ—Ç—å',
    '–•–æ—Ä–æ—à–æ —Ç–∞–Ω—Ü—É–µ—Ç', '–£–º–µ–µ—Ç –∏–≥—Ä–∞—Ç—å –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ', '–ó–Ω–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é',
    '–£–º–µ–µ—Ç —Å—á–∏—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–æ', '–•–æ—Ä–æ—à–∞—è –ø–∞–º—è—Ç—å', '–ó–Ω–∞–µ—Ç –≥–µ–æ–≥—Ä–∞—Ñ–∏—é',
    '–£–º–µ–µ—Ç —Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã', '–ó–Ω–∞–µ—Ç –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—é', '–£–º–µ–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É',
    '–•–æ—Ä–æ—à–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è', '–£–º–µ–µ—Ç –ª–∞–∑–∏—Ç—å –ø–æ –¥–µ—Ä–µ–≤—å—è–º', '–ë—ã—Å—Ç—Ä–æ –±–µ–≥–∞–µ—Ç',
    '–°–∏–ª—å–Ω—ã–µ —Ä—É–∫–∏', '–•–æ—Ä–æ—à–µ–µ –∑—Ä–µ–Ω–∏–µ', '–û—Å—Ç—Ä—ã–π —Å–ª—É—Ö', '–ß—É–≤—Å—Ç–≤—É–µ—Ç –æ–ø–∞—Å–Ω–æ—Å—Ç—å',
    '–£–º–µ–µ—Ç —É–±–µ–∂–¥–∞—Ç—å –ª—é–¥–µ–π', '–•–æ—Ä–æ—à–∏–π –ª–∏–¥–µ—Ä'
];

const stories = [
    "–í 2050 –≥–æ–¥—É —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–∫–Ω—É–ª–æ—Å—å —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–æ–π. –ó–µ–º–ª—è –æ–∫–∞–∑–∞–ª–∞—Å—å –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π –≤—ã–º–∏—Ä–∞–Ω–∏—è, –∏ –≤—ã–∂–∏–≤—à–∏–µ –±—ã–ª–∏ –≤—ã–Ω—É–∂–¥–µ–Ω—ã –∏—Å–∫–∞—Ç—å —É–±–µ–∂–∏—â–µ –≤ –ø–æ–¥–∑–µ–º–Ω—ã—Ö –±—É–Ω–∫–µ—Ä–∞—Ö. –í—ã ‚Äî –æ–¥–∏–Ω –∏–∑ —Ç–µ—Ö, –∫–æ–º—É —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Å—Ç–∏—Å—å.",
    "–ü–æ—Å–ª–µ —Ä–∞–∑—Ä—É—à–∏—Ç–µ–ª—å–Ω–æ–π –≤–æ–π–Ω—ã –±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –ø–ª–∞–Ω–µ—Ç—ã —Å—Ç–∞–ª–∞ –Ω–µ–ø—Ä–∏–≥–æ–¥–Ω–æ–π –¥–ª—è –∂–∏–∑–Ω–∏. –ì—Ä—É–ø–ø–∞ –ª—é–¥–µ–π —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ, —á—Ç–æ–±—ã –≤—ã–∂–∏—Ç—å –≤ –Ω–æ–≤–æ–º –º–∏—Ä–µ, –≥–¥–µ –∫–∞–∂–¥–æ–µ —Ä–µ—à–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º.",
    "–í–∏—Ä—É—Å, –≤—ã—Ä–≤–∞–≤—à–∏–π—Å—è –∏–∑ —Å–µ–∫—Ä–µ—Ç–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏, —É–Ω–∏—á—Ç–æ–∂–∏–ª –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è. –¢–µ–ø–µ—Ä—å —Å–ø–∞—Å—à–∏–µ—Å—è –¥–æ–ª–∂–Ω—ã –Ω–µ —Ç–æ–ª—å–∫–æ –±–æ—Ä–æ—Ç—å—Å—è —Å –±–æ–ª–µ–∑–Ω—å—é, –Ω–æ –∏ –∑–∞—â–∏—â–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã.",
    "–ê—Å—Ç–µ—Ä–æ–∏–¥ —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –ó–µ–º–ª–µ–π, –∏–∑–º–µ–Ω–∏–≤ –∫–ª–∏–º–∞—Ç –Ω–∞–≤—Å–µ–≥–¥–∞. –í—ã–∂–∏–≤—à–∏–µ —É–∫—Ä—ã–≤–∞—é—Ç—Å—è –≤ –ø–æ–¥–∑–µ–º–Ω—ã—Ö —É–±–µ–∂–∏—â–∞—Ö, –Ω–æ –ø—Ä–∏–ø–∞—Å—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã, –∏ –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å, –∫—Ç–æ –¥–æ—Å—Ç–æ–∏–Ω –∂–∏—Ç—å.",
    "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤—ã—à–µ–ª –∏–∑-–ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ –∑–∞—Ö–≤–∞—Ç–∏–ª –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –º–∏—Ä–∞. –õ—é–¥–∏ –ø—Ä—è—á—É—Ç—Å—è –≤ —Å—Ç–∞—Ä–æ–º –±—É–Ω–∫–µ—Ä–µ, –Ω–æ —Ä–æ–±–æ—Ç—ã –ø—Ä–∏–±–ª–∏–∂–∞—é—Ç—Å—è, –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –º–∞–ª–æ.",
    "–°–æ–ª–Ω–µ—á–Ω–∞—è –±—É—Ä—è —É–Ω–∏—á—Ç–æ–∂–∏–ª–∞ –≤—Å—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫—É –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ. –¶–∏–≤–∏–ª–∏–∑–∞—Ü–∏—è —Ä—É—Ö–Ω—É–ª–∞, –∏ —Ç–µ–ø–µ—Ä—å –≤—ã–∂–∏–≤—à–∏–µ –¥–æ–ª–∂–Ω—ã —Ä–µ—à–∏—Ç—å, –∫–∞–∫ —Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤–æ–µ –æ–±—â–µ—Å—Ç–≤–æ –≤ –ø–æ–¥–∑–µ–º–Ω–æ–º —É–±–µ–∂–∏—â–µ."
];

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(__dirname));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    console.log('üìÑ Serving main page');
    res.sendFile(path.join(__dirname, 'index.html'));
});

// API –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', (req, res) => {
    try {
        res.json({ 
            status: 'OK', 
            timestamp: new Date().toISOString(),
            players: gameRoom ? gameRoom.players.length : 0,
            gameState: gameRoom ? gameRoom.gameState : 'unknown',
            connections: io.engine ? io.engine.clientsCount : 0,
            uptime: process.uptime(),
            memory: process.memoryUsage()
        });
    } catch (error) {
        console.error('Health check error:', error);
        res.status(500).json({ 
            status: 'ERROR', 
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// === –ò–ì–†–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ===

const gameRoom = {
    players: [],
    gameState: 'lobby',
    maxPlayers: 8,
    gamePhase: 'waiting',
    currentRound: 1,
    maxRounds: 6, // –ò–°–ü–†–ê–í–õ–ï–ù–û: 6 —Ä–∞—É–Ω–¥–æ–≤
    timer: null,
    timeLeft: 0,
    votingResults: {},
    revealedThisRound: 0,
    currentTurnPlayer: null,
    playersWhoRevealed: [],
    totalVotes: 0,
    skipDiscussionVotes: [],
    justificationQueue: [],
    currentJustifyingPlayer: null,
    justificationPhase: 1,
    canChangeVote: {},
    startRoundVotes: [],
    activeEffects: {},
    eliminateTopVotersNextRound: false,
    currentStory: null, // –î–û–ë–ê–í–õ–ï–ù–û: —Ç–µ–∫—É—â–∞—è –∏—Å—Ç–æ—Ä–∏—è –∏–≥—Ä—ã
    isSecondVoting: false // –î–û–ë–ê–í–õ–ï–ù–û: —Ñ–ª–∞–≥ –≤—Ç–æ—Ä–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç –¥–ª—è —Ä–∞—É–Ω–¥–∞
function getRequiredCardsForRound(round) {
    if (round === 1) {
        return 2; // –ü—Ä–æ—Ñ–µ—Å—Å–∏—è + 1 –∫–∞—Ä—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä
    } else {
        return 1; // 1 –∫–∞—Ä—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä
    }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
function getTargetWinners(totalPlayers) {
    if (totalPlayers <= 8) return 2;
    if (totalPlayers <= 12) return 6;
    return Math.max(2, Math.floor(totalPlayers / 2));
}

// –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–∞—Ä—Ç
function autoRevealRemainingCards(player) {
    const requiredCards = getRequiredCardsForRound(gameRoom.currentRound);
    const currentlyRevealed = player.cardsRevealedThisRound || 0;
    const cardsToReveal = requiredCards - currentlyRevealed;
    
    if (cardsToReveal <= 0) return;
    
    const allCharacteristics = ['profession', 'health', 'hobby', 'phobia', 'baggage', 'fact1', 'fact2'];
    const alreadyRevealed = player.revealedCharacteristics || [];
    const availableCharacteristics = allCharacteristics.filter(char => 
        !alreadyRevealed.includes(char) && player.characteristics[char]
    );
    
    // –í –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞, —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –µ—ë –ø–µ—Ä–≤–æ–π
    if (gameRoom.currentRound === 1 && !alreadyRevealed.includes('profession')) {
        if (!player.revealedCharacteristics) {
            player.revealedCharacteristics = [];
        }
        
        player.revealedCharacteristics.push('profession');
        player.cardsRevealedThisRound = (player.cardsRevealedThisRound || 0) + 1;
        
        console.log(`üé≤ Auto-revealed profession for ${player.name}: ${player.characteristics.profession}`);
        
        io.to('game-room').emit('characteristic-revealed', {
            playerId: player.id,
            playerName: player.name,
            characteristic: 'profession',
            value: player.characteristics.profession,
            players: gameRoom.players,
            cardsRevealedThisRound: player.cardsRevealedThisRound,
            requiredCards: requiredCards,
            autoRevealed: true
        });
        
        const professionIndex = availableCharacteristics.indexOf('profession');
        if (professionIndex !== -1) {
            availableCharacteristics.splice(professionIndex, 1);
        }
    }
    
    // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ä—Ç—ã —Å–ª—É—á–∞–π–Ω–æ
    const remainingToReveal = requiredCards - (player.cardsRevealedThisRound || 0);
    
    for (let i = 0; i < remainingToReveal && availableCharacteristics.length > 0; i++) {
        const randomIndex = Math.floor(Math.random() * availableCharacteristics.length);
        const characteristic = availableCharacteristics.splice(randomIndex, 1)[0];
        
        if (!player.revealedCharacteristics) {
            player.revealedCharacteristics = [];
        }
        
        player.revealedCharacteristics.push(characteristic);
        player.cardsRevealedThisRound = (player.cardsRevealedThisRound || 0) + 1;
        
        console.log(`üé≤ Auto-revealed ${characteristic} for ${player.name}: ${player.characteristics[characteristic]}`);
        
        io.to('game-room').emit('characteristic-revealed', {
            playerId: player.id,
            playerName: player.name,
            characteristic: characteristic,
            value: player.characteristics[characteristic],
            players: gameRoom.players,
            cardsRevealedThisRound: player.cardsRevealedThisRound,
            requiredCards: requiredCards,
            autoRevealed: true
        });
    }
    
    player.hasRevealed = true;
    
    io.to('game-room').emit('auto-reveal-completed', {
        playerName: player.name,
        cardsRevealed: player.cardsRevealedThisRound,
        players: gameRoom.players
    });
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Ñ–∞–∑—ã —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
function startRevelationPhase() {
    console.log('üîç Starting revelation phase');
    
    gameRoom.gamePhase = 'revelation';
    gameRoom.timeLeft = 60;
    gameRoom.revealedThisRound = 0;
    gameRoom.playersWhoRevealed = [];
    
    gameRoom.players.forEach(player => {
        player.hasRevealed = false;
        player.cardsRevealedThisRound = 0;
    });
    
    const alivePlayers = gameRoom.players.filter(p => p.isAlive);
    if (alivePlayers.length > 0) {
        gameRoom.currentTurnPlayer = alivePlayers[0].id;
    }
    
    io.to('game-room').emit('phase-changed', {
        gamePhase: gameRoom.gamePhase,
        timeLeft: gameRoom.timeLeft,
        players: gameRoom.players,
        currentTurnPlayer: gameRoom.currentTurnPlayer,
        currentRound: gameRoom.currentRound
    });
    
    startGameTimer();
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
function nextPlayerTurn() {
    const alivePlayers = gameRoom.players.filter(p => p.isAlive);
    const currentPlayerIndex = alivePlayers.findIndex(p => p.id === gameRoom.currentTurnPlayer);
    
    const nextPlayerIndex = (currentPlayerIndex + 1) % alivePlayers.length;
    
    if (nextPlayerIndex === 0) {
        const allRevealed = alivePlayers.every(p => p.hasRevealed);
        if (allRevealed) {
            console.log('‚úÖ All players finished revelation phase');
            startDiscussionPhase();
            return;
        }
    }
    
    const nextPlayer = alivePlayers[nextPlayerIndex];
    gameRoom.currentTurnPlayer = nextPlayer.id;
    gameRoom.timeLeft = 60;
    
    console.log(`üë§ Next turn: ${nextPlayer.name}`);
    
    io.to('game-room').emit('phase-changed', {
        gamePhase: gameRoom.gamePhase,
        timeLeft: gameRoom.timeLeft,
        players: gameRoom.players,
        currentTurnPlayer: gameRoom.currentTurnPlayer,
        currentRound: gameRoom.currentRound
    });
    
    startGameTimer();
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Ñ–∞–∑—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è
function startDiscussionPhase() {
    console.log('üí¨ Starting discussion phase');
    
    gameRoom.gamePhase = 'discussion';
    gameRoom.timeLeft = 180;
    gameRoom.currentTurnPlayer = null;
    gameRoom.skipDiscussionVotes = [];
    
    io.to('game-room').emit('phase-changed', {
        gamePhase: gameRoom.gamePhase,
        timeLeft: gameRoom.timeLeft,
        players: gameRoom.players,
        currentTurnPlayer: null,
        currentRound: gameRoom.currentRound
    });
    
    startGameTimer();
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Ñ–∞–∑—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function startVotingPhase() {
    console.log('üó≥Ô∏è Starting voting phase');
    
    gameRoom.gamePhase = 'voting';
    gameRoom.timeLeft = 120;
    gameRoom.votingResults = {};
    gameRoom.totalVotes = 0;
    gameRoom.isSecondVoting = false; // –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å–±—Ä–æ—Å —Ñ–ª–∞–≥–∞
    
    gameRoom.players.forEach(player => {
        player.hasVoted = false;
        player.votedFor = null;
        player.votes = 0;
    });
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–º–µ–Ω–∞ –≥–æ–ª–æ—Å–∞ –ù–ï —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –≤ –ø–µ—Ä–≤–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
    gameRoom.canChangeVote = {};
    
    io.to('game-room').emit('phase-changed', {
        gamePhase: gameRoom.gamePhase,
        timeLeft: gameRoom.timeLeft,
        players: gameRoom.players,
        canChangeVote: gameRoom.canChangeVote,
        currentRound: gameRoom.currentRound,
        isSecondVoting: false
    });
    
    startGameTimer();
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Ñ–∞–∑—ã –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è
function startJustificationPhase() {
    console.log('‚öñÔ∏è Starting justification phase');
    
    const playersToJustify = gameRoom.justificationQueue;
    
    if (!playersToJustify || playersToJustify.length === 0) {
        console.log('‚öñÔ∏è No players to justify - proceeding to next round');
        nextRound();
        return;
    }
    
    console.log(`‚öñÔ∏è Players justifying: ${playersToJustify.map(p => p.name).join(', ')}`);
    
    gameRoom.gamePhase = 'justification';
    gameRoom.currentJustifyingPlayer = gameRoom.justificationQueue[0].id;
    gameRoom.timeLeft = 60;
    
    io.to('game-room').emit('justification-started', {
        gamePhase: gameRoom.gamePhase,
        timeLeft: gameRoom.timeLeft,
        players: gameRoom.players,
        justifyingPlayer: playersToJustify[0],
        justificationQueue: gameRoom.justificationQueue.map(p => p.name),
        currentRound: gameRoom.currentRound
    });
    
    startGameTimer();
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—é
function nextJustification() {
    const currentIndex = gameRoom.justificationQueue.findIndex(p => p.id === gameRoom.currentJustifyingPlayer);
    
    if (currentIndex < gameRoom.justificationQueue.length - 1) {
        gameRoom.currentJustifyingPlayer = gameRoom.justificationQueue[currentIndex + 1].id;
        gameRoom.timeLeft = 60;
        
        const nextPlayer = gameRoom.justificationQueue[currentIndex + 1];
        
        io.to('game-room').emit('justification-started', {
            gamePhase: gameRoom.gamePhase,
            timeLeft: gameRoom.timeLeft,
            players: gameRoom.players,
            justifyingPlayer: nextPlayer,
            justificationQueue: gameRoom.justificationQueue.map(p => p.name),
            currentRound: gameRoom.currentRound
        });
        
        startGameTimer();
    } else {
        startSecondVoting();
    }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è –≤—Ç–æ—Ä–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function startSecondVoting() {
    console.log('üó≥Ô∏è Starting second voting after justifications');
    
    gameRoom.gamePhase = 'voting';
    gameRoom.timeLeft = 90;
    gameRoom.votingResults = {};
    gameRoom.isSecondVoting = true; // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
    
    gameRoom.players.forEach(player => {
        player.hasVoted = false;
        player.votedFor = null;
        player.votes = 0;
    });
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ –≤—Ç–æ—Ä–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –ú–û–ñ–ù–û –º–µ–Ω—è—Ç—å –≥–æ–ª–æ—Å
    gameRoom.canChangeVote = {};
    gameRoom.players.filter(p => p.isAlive).forEach(player => {
        gameRoom.canChangeVote[player.id] = true;
    });
    
    console.log(`üó≥Ô∏è Second voting for players: ${gameRoom.justificationQueue.map(p => p.name).join(', ')}`);
    
    io.to('game-room').emit('second-voting-started', {
        gamePhase: gameRoom.gamePhase,
        timeLeft: gameRoom.timeLeft,
        players: gameRoom.players,
        canChangeVote: gameRoom.canChangeVote,
        currentRound: gameRoom.currentRound,
        isSecondVoting: true,
        justifyingPlayers: gameRoom.justificationQueue.map(p => p.name)
    });
    
    startGameTimer();
}

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function processVotingResults() {
    let maxVotes = 0;
    const alivePlayers = gameRoom.players.filter(p => p.isAlive);
    
    alivePlayers.forEach(player => {
        if (player.votes > maxVotes) {
            maxVotes = player.votes;
        }
    });
    
    const playersWithMaxVotes = alivePlayers.filter(p => p.votes === maxVotes && maxVotes > 0);
    
    console.log(`üó≥Ô∏è Voting results: Max votes: ${maxVotes}, Players with max votes: ${playersWithMaxVotes.length}`);
    console.log(`üó≥Ô∏è Is second voting: ${gameRoom.isSecondVoting}`);
    
    if (playersWithMaxVotes.length === 1) {
        playersWithMaxVotes[0].isAlive = false;
        console.log(`üíÄ Single player eliminated: ${playersWithMaxVotes[0].name}`);
        
        gameRoom.justificationQueue = [];
        gameRoom.isSecondVoting = false;
        showResults();
    } else if (playersWithMaxVotes.length >= 2 && playersWithMaxVotes.length <= 3) {
        if (gameRoom.isSecondVoting) {
            console.log('ü§ù Second voting tie - no elimination this round, double elimination next round');
            gameRoom.eliminateTopVotersNextRound = true;
            gameRoom.justificationQueue = [];
            gameRoom.isSecondVoting = false;
            showResults();
        } else {
            console.log(`‚öñÔ∏è First voting tie - starting justifications for ${playersWithMaxVotes.length} players`);
            gameRoom.justificationQueue = [...playersWithMaxVotes];
            startJustificationPhase();
        }
    } else {
        console.log('ü§ù No elimination - too many tied players or no votes');
        gameRoom.justificationQueue = [];
        gameRoom.isSecondVoting = false;
        showResults();
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—É–Ω–¥–∞
function showResults() {
    console.log('üìä Showing round results');
    
    gameRoom.gamePhase = 'results';
    
    let maxVotes = 0;
    const alivePlayers = gameRoom.players.filter(p => p.isAlive);
    
    alivePlayers.forEach(player => {
        if (player.votes > maxVotes) {
            maxVotes = player.votes;
        }
    });
    
    const playersWithMaxVotes = alivePlayers.filter(p => p.votes === maxVotes && maxVotes > 0);
    
    let eliminatedPlayers = [];
    let resultMessage = '';
    
    if (gameRoom.eliminateTopVotersNextRound) {
        console.log('üíÄ Special round - eliminating top 2 voters');
        
        const sortedByVotes = [...alivePlayers].sort((a, b) => (b.votes || 0) - (a.votes || 0));
        const uniqueVotes = [...new Set(sortedByVotes.map(p => p.votes || 0))].filter(v => v > 0);
        
        if (uniqueVotes.length >= 2) {
            const firstPlaceVotes = uniqueVotes[0];
            const secondPlaceVotes = uniqueVotes[1];
            
            const firstPlacePlayers = sortedByVotes.filter(p => (p.votes || 0) === firstPlaceVotes);
            const secondPlacePlayers = sortedByVotes.filter(p => (p.votes || 0) === secondPlaceVotes);
            
            eliminatedPlayers = [...firstPlacePlayers];
            
            if (firstPlacePlayers.length === 1 && secondPlacePlayers.length > 0) {
                eliminatedPlayers.push(secondPlacePlayers[0]);
            }
            
        } else if (uniqueVotes.length === 1) {
            eliminatedPlayers = sortedByVotes.slice(0, Math.min(2, sortedByVotes.length));
        } else {
            eliminatedPlayers = [];
        }
        
        eliminatedPlayers.forEach(player => {
            player.isAlive = false;
            console.log(`üíÄ Special elimination: ${player.name} with ${player.votes || 0} votes`);
        });
        
        if (eliminatedPlayers.length > 0) {
            resultMessage = `–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: ${eliminatedPlayers.map(p => p.name).join(', ')} (–¥–≤–æ–π–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∑–∞ –Ω–∏—á—å—é –≤ –ø—Ä–æ—à–ª–æ–º —Ä–∞—É–Ω–¥–µ)`;
        } else {
            resultMessage = '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥: –Ω–∏–∫—Ç–æ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤)';
        }
        
        gameRoom.eliminateTopVotersNextRound = false;
        
    } else {
        const wasSecondVoting = gameRoom.isSecondVoting;
        
        if (wasSecondVoting && playersWithMaxVotes.length >= 2) {
            console.log('ü§ù Second voting resulted in tie - no elimination, setting up double elimination next round');
            eliminatedPlayers = [];
            resultMessage = `–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –Ω–∏—á—å—è –º–µ–∂–¥—É ${playersWithMaxVotes.map(p => p.name).join(', ')}. –í —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞—É–Ω–¥–µ –±—É–¥—É—Ç –∏—Å–∫–ª—é—á–µ–Ω—ã 2 –∏–≥—Ä–æ–∫–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ –≥–æ–ª–æ—Å–∞–º–∏!`;
            gameRoom.eliminateTopVotersNextRound = true;
            
        } else if (playersWithMaxVotes.length === 1 && maxVotes > 0) {
            const playerToEliminate = playersWithMaxVotes[0];
            playerToEliminate.isAlive = false;
            eliminatedPlayers = [playerToEliminate];
            resultMessage = `–ò—Å–∫–ª—é—á–µ–Ω: ${playerToEliminate.name}`;
            console.log(`üíÄ Standard elimination: ${playerToEliminate.name}`);
            
        } else {
            eliminatedPlayers = [];
            resultMessage = '–ù–∏–∫—Ç–æ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ';
        }
    }
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
    gameRoom.players.forEach(player => {
        player.hasVoted = false;
        player.votedFor = null;
        player.votes = 0;
        player.hasRevealed = false;
        player.cardsRevealedThisRound = 0;
    });
    
    gameRoom.votingResults = {};
    gameRoom.canChangeVote = {};
    gameRoom.currentTurnPlayer = null;
    gameRoom.currentJustifyingPlayer = null;
    gameRoom.justificationQueue = [];
    gameRoom.isSecondVoting = false;
    
    if (gameRoom.timer) {
        clearInterval(gameRoom.timer);
        gameRoom.timer = null;
    }
    
    console.log(`üìä Final result: ${eliminatedPlayers.length} players eliminated`);
    
    io.to('game-room').emit('round-results', {
        eliminatedPlayers: eliminatedPlayers.map(p => p.name),
        players: gameRoom.players,
        votingResults: gameRoom.votingResults,
        resultMessage: resultMessage,
        willEliminateTopVotersNextRound: gameRoom.eliminateTopVotersNextRound
    });
    
    setTimeout(() => {
        nextRound();
    }, 5000);
}

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
function nextRound() {
    try {
        gameRoom.currentRound++;
        
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        const targetWinners = getTargetWinners(gameRoom.maxPlayers);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        if (alivePlayers.length <= targetWinners || gameRoom.currentRound > gameRoom.maxRounds) {
            endGame();
            return;
        }
        
        gameRoom.gamePhase = 'preparation';
        gameRoom.timeLeft = 0;
        gameRoom.currentTurnPlayer = null;
        gameRoom.startRoundVotes = [];
        
        console.log('üîÑ Starting round:', gameRoom.currentRound, 'Alive players:', alivePlayers.length);
        
        io.to('game-room').emit('new-round', {
            currentRound: gameRoom.currentRound,
            gamePhase: gameRoom.gamePhase,
            timeLeft: gameRoom.timeLeft,
            players: gameRoom.players,
            willEliminateTopVotersThisRound: gameRoom.eliminateTopVotersNextRound
        });
    } catch (error) {
        console.error('‚ùå Error in nextRound:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
function endGame() {
    try {
        console.log('üèÅ Game ended');
        
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        
        gameRoom.gamePhase = 'finished';
        if (gameRoom.timer) {
            clearInterval(gameRoom.timer);
            gameRoom.timer = null;
        }
        
        io.to('game-room').emit('game-ended', {
            winners: alivePlayers,
            players: gameRoom.players
        });
        
        setTimeout(() => {
            resetGame();
        }, 10000);
    } catch (error) {
        console.error('‚ùå Error ending game:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã
function resetGame() {
    console.log('üîÑ Resetting game...');
    
    try {
        if (gameRoom.timer) {
            clearInterval(gameRoom.timer);
            gameRoom.timer = null;
        }
        
        gameRoom.players.forEach((player) => {
            player.isAlive = true;
            player.votes = 0;
            player.hasRevealed = false;
            player.hasVoted = false;
            player.votedFor = null;
            player.cardsRevealedThisRound = 0;
            player.revealedCharacteristics = [];
            player.characteristics = null;
            player.actionCards = [];
        });
        
        gameRoom.gameState = 'lobby';
        gameRoom.gamePhase = 'waiting';
        gameRoom.currentRound = 1;
        gameRoom.timer = null;
        gameRoom.timeLeft = 0;
        gameRoom.votingResults = {};
        gameRoom.revealedThisRound = 0;
        gameRoom.currentTurnPlayer = null;
        gameRoom.playersWhoRevealed = [];
        gameRoom.totalVotes = 0;
        gameRoom.skipDiscussionVotes = [];
        gameRoom.justificationQueue = [];
        gameRoom.currentJustifyingPlayer = null;
        gameRoom.canChangeVote = {};
        gameRoom.startRoundVotes = [];
        gameRoom.activeEffects = {};
        gameRoom.eliminateTopVotersNextRound = false;
        gameRoom.currentStory = null;
        gameRoom.isSecondVoting = false;
        
        io.to('game-room').emit('game-reset', {
            players: gameRoom.players,
            gameState: gameRoom.gameState
        });
    } catch (error) {
        console.error('‚ùå Error resetting game:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ timeout
function handlePhaseTimeout() {
    console.log('‚è∞ Phase timeout:', gameRoom.gamePhase);
    
    switch (gameRoom.gamePhase) {
        case 'revelation':
            const currentPlayer = gameRoom.players.find(p => p.id === gameRoom.currentTurnPlayer);
            if (currentPlayer && currentPlayer.isAlive) {
                const requiredCards = getRequiredCardsForRound(gameRoom.currentRound);
                const currentlyRevealed = currentPlayer.cardsRevealedThisRound || 0;
                
                if (currentlyRevealed < requiredCards) {
                    console.log(`‚è∞ Time's up for ${currentPlayer.name}, auto-revealing remaining cards`);
                    autoRevealRemainingCards(currentPlayer);
                }
            }
            nextPlayerTurn();
            break;
        case 'discussion':
            startVotingPhase();
            break;
        case 'voting':
            console.log('‚è∞ Voting timeout - processing current results');
            
            let maxVotes = 0;
            const alivePlayers = gameRoom.players.filter(p => p.isAlive);
            
            alivePlayers.forEach(player => {
                if ((player.votes || 0) > maxVotes) {
                    maxVotes = player.votes || 0;
                }
            });
            
            if (maxVotes === 0) {
                console.log('‚è∞ No votes cast during timeout - proceeding to next round');
                nextRound();
            } else {
                processVotingResults();
            }
            break;
        case 'justification':
            nextJustification();
            break;
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
function startGameTimer() {
    if (gameRoom.timer) {
        clearInterval(gameRoom.timer);
        gameRoom.timer = null;
    }
    
    gameRoom.timer = setInterval(() => {
        gameRoom.timeLeft--;
        
        if (gameRoom.timeLeft % 5 === 0 || gameRoom.timeLeft <= 10) {
            io.to('game-room').emit('timer-update', {
                timeLeft: gameRoom.timeLeft,
                currentTurnPlayer: gameRoom.currentTurnPlayer
            });
        }
        
        if (gameRoom.timeLeft <= 0) {
            clearInterval(gameRoom.timer);
            gameRoom.timer = null;
            handlePhaseTimeout();
        }
    }, 1000);
}

// –§—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
function generateCharacteristics() {
    return {
        profession: getRandomElement(professions),
        health: getRandomElement(healthConditions),
        hobby: getRandomElement(hobbies),
        phobia: getRandomElement(phobias),
        baggage: getRandomElement(baggage),
        fact1: getRandomElement(facts),
        fact2: getRandomElement(facts.filter(f => f !== facts[0]))
    };
}

function getRandomElement(array) {
    return array[Math.floor(Math.random() * array.length)];
}

function getRandomActionCard() {
    const availableCards = actionCards.filter(card => card.usesLeft > 0);
    const randomCard = getRandomElement(availableCards);
    return { ...randomCard };
}

// === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô SOCKET.IO ===

io.on('connection', (socket) => {
    console.log('üîó New connection:', socket.id);
    
    socket.emit('player-count', { count: gameRoom.players.length });
    
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ
    socket.on('join-game', (data) => {
        console.log('üëã Player joining:', data.playerName, 'Socket:', socket.id);
        
        const playerName = data.playerName?.trim();
        
        if (!playerName || playerName.length < 2 || playerName.length > 20) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞');
            return;
        }
        
        const existingPlayer = gameRoom.players.find(p => 
            p.name.toLowerCase() === playerName.toLowerCase() && 
            p.id !== socket.id
        );
        
        if (existingPlayer) {
            console.log('‚ùå Name already taken:', playerName, 'by player:', existingPlayer.id);
            socket.emit('error', '–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å –≤ –∏–≥—Ä–µ');
            return;
        }
        
        if (gameRoom.players.length >= gameRoom.maxPlayers) {
            socket.emit('error', '–ò–≥—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
            return;
        }
        
        const existingPlayerIndex = gameRoom.players.findIndex(p => p.id === socket.id);
        if (existingPlayerIndex !== -1) {
            console.log('üîÑ Removing previous player with same socket:', socket.id);
            gameRoom.players.splice(existingPlayerIndex, 1);
        }
        
        const player = {
            id: socket.id,
            name: playerName,
            isAlive: true,
            isHost: gameRoom.players.length === 0,
            votes: 0,
            hasVoted: false,
            votedFor: null,
            hasRevealed: false,
            cardsRevealedThisRound: 0,
            revealedCharacteristics: [],
            characteristics: null,
            actionCards: []
        };
        
        gameRoom.players.push(player);
        socket.join('game-room');
        
        console.log('‚úÖ Player joined:', playerName, 'Total players:', gameRoom.players.length);
        
        socket.emit('join-confirmed', {
            playerId: socket.id,
            playerName: playerName,
            isHost: player.isHost,
            maxPlayers: gameRoom.maxPlayers,
            players: gameRoom.players,
            gameState: gameRoom.gameState
        });
        
        io.to('game-room').emit('player-joined', {
            players: gameRoom.players,
            maxPlayers: gameRoom.maxPlayers,
            gameState: gameRoom.gameState
        });
    });
    
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    socket.on('disconnect', () => {
        console.log('‚ùå Player disconnected:', socket.id);
        
        const playerIndex = gameRoom.players.findIndex(p => p.id === socket.id);
        if (playerIndex !== -1) {
            const player = gameRoom.players[playerIndex];
            console.log('üëã Player left:', player.name);
            
            gameRoom.players.splice(playerIndex, 1);
            
            if (player.isHost && gameRoom.players.length > 0) {
                gameRoom.players[0].isHost = true;
                console.log('üëë New host:', gameRoom.players[0].name);
            }
            
            if (gameRoom.players.length === 0 || (gameRoom.gameState === 'playing' && gameRoom.players.length < 2)) {
                resetGame();
            } else {
                io.to('game-room').emit('player-left', {
                    players: gameRoom.players,
                    gameState: gameRoom.gameState
                });
            }
        }
    });
    
    // –°–º–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
    socket.on('change-max-players', (data) => {
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã!');
            return;
        }
        
        const newMaxPlayers = parseInt(data.maxPlayers);
        if (newMaxPlayers < 2 || newMaxPlayers > 12) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        if (newMaxPlayers < gameRoom.players.length) {
            socket.emit('error', '–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        gameRoom.maxPlayers = newMaxPlayers;
        
        console.log('üîß Max players changed to:', newMaxPlayers);
        
        io.to('game-room').emit('max-players-changed', {
            maxPlayers: gameRoom.maxPlayers,
            players: gameRoom.players
        });
    });
    
    // –°—Ç–∞—Ä—Ç –∏–≥—Ä—ã
    socket.on('start-game', () => {
        console.log('üéÆ Game start requested by:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!');
            return;
        }
        
        if (gameRoom.players.length < 2) {
            socket.emit('error', '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!');
            return;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –≤—ã–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        gameRoom.players.forEach(player => {
            player.characteristics = generateCharacteristics();
            player.actionCards = [getRandomActionCard()];
            player.hasRevealed = false;
            player.hasVoted = false;
            player.revealedCharacteristics = [];
            player.cardsRevealedThisRound = 0;
        });
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        gameRoom.currentStory = stories[Math.floor(Math.random() * stories.length)];
        
        gameRoom.gameState = 'playing';
        gameRoom.gamePhase = 'preparation';
        gameRoom.currentRound = 1;
        gameRoom.timeLeft = 0;
        gameRoom.playersWhoRevealed = [];
        gameRoom.currentTurnPlayer = null;
        
        console.log('üöÄ Game started! Players:', gameRoom.players.length);
        console.log('üìñ Selected story:', gameRoom.currentStory.substring(0, 50) + '...');
        
        io.to('game-room').emit('game-started', {
            players: gameRoom.players,
            gameState: gameRoom.gameState,
            gamePhase: gameRoom.gamePhase,
            currentRound: gameRoom.currentRound,
            timeLeft: gameRoom.timeLeft,
            story: gameRoom.currentStory
        });
    });
    
    // –†–∞—Å–∫—Ä—ã—Ç–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    socket.on('reveal-characteristic', (data) => {
        console.log('üîç Reveal characteristic:', data);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'revelation') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫!');
            return;
        }
        
        if (gameRoom.currentTurnPlayer !== socket.id) {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!');
            return;
        }
        
        const characteristic = data.characteristic;
        
        if (!player.characteristics || !player.characteristics[characteristic]) {
            socket.emit('error', '–¢–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            return;
        }
        
        if (player.revealedCharacteristics && player.revealedCharacteristics.includes(characteristic)) {
            socket.emit('error', '–≠—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞!');
            return;
        }
        
        const requiredCards = getRequiredCardsForRound(gameRoom.currentRound);
        const currentlyRevealed = player.cardsRevealedThisRound || 0;
        
        if (currentlyRevealed >= requiredCards) {
            socket.emit('error', '–í—ã —É–∂–µ —Ä–∞—Å–∫—Ä—ã–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞—Ä—Ç—ã –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ!');
            return;
        }
        
        if (gameRoom.currentRound === 1) {
            if (currentlyRevealed === 0 && characteristic !== 'profession') {
                socket.emit('error', '–í –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é!');
                return;
            }
            
            if (currentlyRevealed === 1 && characteristic === 'profession') {
                socket.emit('error', '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É.');
                return;
            }
        }
        
        if (!player.revealedCharacteristics) {
            player.revealedCharacteristics = [];
        }
        
        player.revealedCharacteristics.push(characteristic);
        player.cardsRevealedThisRound = (player.cardsRevealedThisRound || 0) + 1;
        
        console.log(`üîç ${player.name} revealed ${characteristic}: ${player.characteristics[characteristic]}`);
        
        io.to('game-room').emit('characteristic-revealed', {
            playerId: player.id,
            playerName: player.name,
            characteristic: characteristic,
            value: player.characteristics[characteristic],
            players: gameRoom.players,
            cardsRevealedThisRound: player.cardsRevealedThisRound,
            requiredCards: requiredCards
        });
        
        if (player.cardsRevealedThisRound >= requiredCards) {
            player.hasRevealed = true;
            console.log(`‚úÖ ${player.name} completed revelation phase`);
            
            setTimeout(() => {
                nextPlayerTurn();
            }, 1500);
        }
    });
    
    // –ü—Ä–æ–ø—É—Å–∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
    socket.on('vote-skip-discussion', () => {
        console.log('‚è≠Ô∏è Skip discussion vote from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'discussion') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ —Ñ–∞–∑–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è!');
            return;
        }
        
        if (gameRoom.skipDiscussionVotes.includes(socket.id)) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—è!');
            return;
        }
        
        gameRoom.skipDiscussionVotes.push(socket.id);
        
        const requiredVotes = 2;
        const currentVotes = gameRoom.skipDiscussionVotes.length;
        
        console.log(`‚è≠Ô∏è Skip discussion votes: ${currentVotes}/${requiredVotes}`);
        
        gameRoom.players.forEach(p => {
            const hasVoted = gameRoom.skipDiscussionVotes.includes(p.id);
            io.to(p.id).emit('skip-discussion-vote-update', {
                votes: currentVotes,
                required: requiredVotes,
                hasVoted: hasVoted
            });
        });
        
        if (currentVotes >= requiredVotes) {
            console.log('‚è≠Ô∏è Skipping discussion - enough votes');
            clearInterval(gameRoom.timer);
            gameRoom.timer = null;
            
            io.to('game-room').emit('discussion-skipped', {
                gamePhase: 'voting',
                timeLeft: 120,
                players: gameRoom.players
            });
            
            startVotingPhase();
        }
    });
    
    // –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –Ω–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞
    socket.on('start-round', () => {
        console.log('üéØ Start round vote from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'preparation') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞!');
            return;
        }
        
        if (gameRoom.startRoundVotes.includes(socket.id)) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –Ω–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞!');
            return;
        }
        
        gameRoom.startRoundVotes.push(socket.id);
        
        const requiredVotes = 2;
        const currentVotes = gameRoom.startRoundVotes.length;
        
        console.log(`üéØ Start round votes: ${currentVotes}/${requiredVotes}`);
        
        gameRoom.players.forEach(p => {
            const hasVoted = gameRoom.startRoundVotes.includes(p.id);
            io.to(p.id).emit('start-round-vote-update', {
                votes: currentVotes,
                required: requiredVotes,
                hasVoted: hasVoted
            });
        });
        
        if (currentVotes >= requiredVotes) {
            console.log('üöÄ Starting round - enough votes');
            gameRoom.startRoundVotes = [];
            startRevelationPhase();
        }
    });
    
    // –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∏–≥—Ä–æ–∫–∞
    socket.on('vote-player', (data) => {
        console.log('üó≥Ô∏è Vote from:', socket.id, 'for:', data.targetId);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        const targetPlayer = gameRoom.players.find(p => p.id === data.targetId);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (!targetPlayer || !targetPlayer.isAlive) {
            socket.emit('error', '–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'voting') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
            return;
        }
        
        if (player.hasVoted) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!');
            return;
        }
        
        player.hasVoted = true;
        player.votedFor = data.targetId;
        
        targetPlayer.votes = (targetPlayer.votes || 0) + 1;
        
        if (!gameRoom.votingResults[data.targetId]) {
            gameRoom.votingResults[data.targetId] = [];
        }
        gameRoom.votingResults[data.targetId].push(socket.id);
        
        console.log(`üó≥Ô∏è ${player.name} voted for ${targetPlayer.name} (${targetPlayer.votes} votes)`);
        
        io.to('game-room').emit('vote-update', {
            players: gameRoom.players,
            votingResults: gameRoom.votingResults,
            canChangeVote: gameRoom.canChangeVote
        });
        
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        const votedPlayers = alivePlayers.filter(p => p.hasVoted);
        
        if (votedPlayers.length === alivePlayers.length) {
            console.log('‚úÖ All players voted, processing results');
            
            setTimeout(() => {
                processVotingResults();
            }, 2000);
        }
    });

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–º–µ–Ω–∞ –≥–æ–ª–æ—Å–∞ —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ç–æ—Ä–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
    socket.on('change-vote', (data) => {
        console.log('üîÑ Change vote from:', socket.id, 'to:', data.targetId);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        const targetPlayer = gameRoom.players.find(p => p.id === data.targetId);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (!targetPlayer || !targetPlayer.isAlive) {
            socket.emit('error', '–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'voting') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
            return;
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–º–µ–Ω–∞ –≥–æ–ª–æ—Å–∞ —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ç–æ—Ä–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
        if (!gameRoom.isSecondVoting) {
            socket.emit('error', '–°–º–µ–Ω–∞ –≥–æ–ª–æ—Å–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ç–æ—Ä–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏!');
            return;
        }
        
        if (!gameRoom.canChangeVote[socket.id]) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å!');
            return;
        }
        
        if (player.votedFor) {
            const previousTarget = gameRoom.players.find(p => p.id === player.votedFor);
            if (previousTarget) {
                previousTarget.votes = Math.max(0, (previousTarget.votes || 0) - 1);
            }
            
            if (gameRoom.votingResults[player.votedFor]) {
                gameRoom.votingResults[player.votedFor] = gameRoom.votingResults[player.votedFor].filter(id => id !== socket.id);
            }
        }
        
        player.votedFor = data.targetId;
        targetPlayer.votes = (targetPlayer.votes || 0) + 1;
        
        if (!gameRoom.votingResults[data.targetId]) {
            gameRoom.votingResults[data.targetId] = [];
        }
        gameRoom.votingResults[data.targetId].push(socket.id);
        
        gameRoom.canChangeVote[socket.id] = false;
        
        console.log(`üîÑ ${player.name} changed vote to ${targetPlayer.name}`);
        
        io.to('game-room').emit('vote-update', {
            players: gameRoom.players,
            votingResults: gameRoom.votingResults,
            canChangeVote: gameRoom.canChangeVote
        });
    });

    socket.on('finish-justification', () => {
        console.log('‚úÖ Finish justification from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || gameRoom.currentJustifyingPlayer !== socket.id) {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –æ–ø—Ä–∞–≤–¥—ã–≤–∞—Ç—å—Å—è!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'justification') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–π!');
            return;
        }
        
        nextJustification();
    });

    socket.on('surrender', () => {
        console.log('üè≥Ô∏è Surrender from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å—Å—è!');
            return;
        }
        
        player.isAlive = false;
        
        console.log(`üè≥Ô∏è ${player.name} surrendered`);
        
        io.to('game-room').emit('player-surrendered', {
            playerName: player.name,
            players: gameRoom.players
        });
        
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        const targetWinners = getTargetWinners(gameRoom.maxPlayers);
        
        if (alivePlayers.length <= targetWinners) {
            endGame();
        } else if (gameRoom.gamePhase === 'justification') {
            nextJustification();
        }
    });
});

// Catch-all –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ä–æ—É—Ç–æ–≤
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

const PORT = process.env.PORT || 3000;
const HOST = process.env.HOST || '0.0.0.0';

server.listen(PORT, HOST)
    .on('listening', () => {
        console.log(`üöÄ Bunker Game Server running on ${HOST}:${PORT}`);
        console.log(`üì± Game ready for players!`);
        console.log(`üéÆ Players: ${gameRoom.players.length}/${gameRoom.maxPlayers}`);
    })
    .on('error', (error) => {
        console.error('‚ùå Server startup error:', error);
        if (error.code === 'EADDRINUSE') {
            console.error(`Port ${PORT} is already in use`);
        }
        process.exit(1);
    });

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üõë SIGTERM received, shutting down gracefully');
    server.close(() => {
        console.log('‚úÖ Server closed');
        process.exit(0);
    });
});