const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');

console.log('üöÄ Starting Single Room Bunker Game Server...');

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

// === –ú–ê–°–°–ò–í–´ –ö–ê–†–¢ –î–ï–ô–°–¢–í–ò–ô –ò –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò ===

const actionCards = [
    { 
        id: 1, 
        name: "–î–≤–æ–π–Ω–æ–π –≥–æ–ª–æ—Å", 
        description: "–í–∞—à –≥–æ–ª–æ—Å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞ –¥–≤–∞ –≤–æ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è. –ù—É–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –î–û –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.", 
        type: "voting", 
        usesLeft: 1,
        icon: "üó≥Ô∏è"
    },
    { 
        id: 2, 
        name: "–î–µ—Ç–µ–∫—Ç–∏–≤", 
        description: "–£–∑–Ω–∞–π—Ç–µ –æ–¥–Ω—É —Å–∫—Ä—ã—Ç—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞", 
        type: "investigative", 
        usesLeft: 1,
        icon: "üîç"
    },
    { 
        id: 3, 
        name: "–ó–∞—â–∏—Ç–Ω–∏–∫", 
        description: "–°–ø–∞—Å–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –æ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è —Å–µ–±—è)", 
        type: "protective", 
        usesLeft: 1,
        icon: "üõ°Ô∏è"
    },
    { 
        id: 4, 
        name: "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≥–æ–ª–æ—Å", 
        description: "–í–∞—à –≥–æ–ª–æ—Å –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º", 
        type: "stealth", 
        usesLeft: 1,
        icon: "üë§"
    },
    { 
        id: 5, 
        name: "–ë–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫", 
        description: "–ó–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–µ–π—Å—Ç–≤–∏—è –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞", 
        type: "disruptive", 
        usesLeft: 1,
        icon: "üö´"
    },
    { 
        id: 6, 
        name: "–õ–∏–¥–µ—Ä", 
        description: "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ñ–∞–∑—É –∏–≥—Ä—ã", 
        type: "control", 
        usesLeft: 1,
        icon: "üëë"
    }
];

const professions = [
    '–í—Ä–∞—á', '–£—á–∏—Ç–µ–ª—å', '–ò–Ω–∂–µ–Ω–µ—Ä', '–ü–æ–≤–∞—Ä', '–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π', '–ü–æ–∂–∞—Ä–Ω—ã–π',
    '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä', '–≠–ª–µ–∫—Ç—Ä–∏–∫', '–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫', '–ú–µ—Ö–∞–Ω–∏–∫',
    '–§–µ—Ä–º–µ—Ä', '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä', '–ü—Å–∏—Ö–æ–ª–æ–≥', '–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç', '–•—É–¥–æ–∂–Ω–∏–∫',
    '–ú—É–∑—ã–∫–∞–Ω—Ç', '–ê–∫—Ç–µ—Ä', '–¢–∞–Ω—Ü–æ—Ä', '–ü–∏—Å–∞—Ç–µ–ª—å', '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å',
    '–ü—Ä–æ–¥–∞–≤–µ—Ü', '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä', '–Æ—Ä–∏—Å—Ç', '–°—É–¥—å—è', '–í–æ–µ–Ω–Ω—ã–π',
    '–ü–∏–ª–æ—Ç', '–°—Ç—é–∞—Ä–¥–µ—Å—Å–∞', '–í–æ–¥–∏—Ç–µ–ª—å', '–ü–æ—á—Ç–∞–ª—å–æ–Ω', '–û—Ö—Ä–∞–Ω–Ω–∏–∫'
];

const healthConditions = [
    '–ó–¥–æ—Ä–æ–≤', '–ë–ª–∏–∑–æ—Ä—É–∫–æ—Å—Ç—å', '–ê—Å—Ç–º–∞', '–î–∏–∞–±–µ—Ç', '–ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –æ—Ä–µ—Ö–∏',
    '–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è', '–ê—Ä—Ç—Ä–∏—Ç', '–ú–∏–≥—Ä–µ–Ω—å', '–ë–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞', '–î–µ–ø—Ä–µ—Å—Å–∏—è',
    '–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å', '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Ç—Ä–∞–≤–º–∞', '–û–ø–µ—Ä–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–¥—Ü–µ', '–ü—Ä–æ—Ç–µ–∑ –Ω–æ–≥–∏',
    '–°–ª—É—Ö–æ–≤–æ–π –∞–ø–ø–∞—Ä–∞—Ç', '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è –±–æ–ª—å –≤ —Å–ø–∏–Ω–µ', '–≠–ø–∏–ª–µ–ø—Å–∏—è',
    '–ê–Ω–µ–º–∏—è', '–ü–ª–æ—Ö–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è', '–ë—ã—Å—Ç—Ä–∞—è —É—Ç–æ–º–ª—è–µ–º–æ—Å—Ç—å'
];

const hobbies = [
    '–ß—Ç–µ–Ω–∏–µ', '–°–ø–æ—Ä—Ç', '–ì–æ—Ç–æ–≤–∫–∞', '–†–∏—Å–æ–≤–∞–Ω–∏–µ', '–ú—É–∑—ã–∫–∞', '–¢–∞–Ω—Ü—ã',
    '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', '–°–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ', '–†—ã–±–∞–ª–∫–∞', '–û—Ö–æ—Ç–∞', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
    '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–í—è–∑–∞–Ω–∏–µ', '–®–∞—Ö–º–∞—Ç—ã', '–í–∏–¥–µ–æ–∏–≥—Ä—ã', '–ö–∏–Ω–æ',
    '–¢–µ–∞—Ç—Ä', '–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è', '–ì–µ–æ–ª–æ–≥–∏—è', '–ê—Ä—Ö–µ–æ–ª–æ–≥–∏—è', '–ò—Å—Ç–æ—Ä–∏—è',
    '–Ø–∑—ã–∫–∏', '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞', '–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ',
    '–°–∫–∞–ª–æ–ª–∞–∑–∞–Ω–∏–µ', '–ü–∞—Ä–∞—à—é—Ç–Ω—ã–π —Å–ø–æ—Ä—Ç', '–î–∞–π–≤–∏–Ω–≥', '–°–µ—Ä—Ñ–∏–Ω–≥', '–ô–æ–≥–∞'
];

const phobias = [
    '–ê—Ä–∞—Ö–Ω–æ—Ñ–æ–±–∏—è (–ø–∞—É–∫–∏)', '–ö–ª–∞—É—Å—Ç—Ä–æ—Ñ–æ–±–∏—è (–∑–∞–º–∫–Ω—É—Ç—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞)', 
    '–ê–∫—Ä–æ—Ñ–æ–±–∏—è (–≤—ã—Å–æ—Ç–∞)', '–ê—ç—Ä–æ—Ñ–æ–±–∏—è (–ø–æ–ª–µ—Ç—ã)', '–ê–∫–≤–∞—Ñ–æ–±–∏—è (–≤–æ–¥–∞)',
    '–°–æ—Ü–∏–æ—Ñ–æ–±–∏—è (–ª—é–¥–∏)', '–ê–≥–æ—Ä–∞—Ñ–æ–±–∏—è (–æ—Ç–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞)',
    '–ù–∏–∫—Ç–æ—Ñ–æ–±–∏—è (—Ç–µ–º–Ω–æ—Ç–∞)', '–û—Ñ–∏–¥–∏–æ—Ñ–æ–±–∏—è (–∑–º–µ–∏)', '–ö–∏–Ω–æ—Ñ–æ–±–∏—è (—Å–æ–±–∞–∫–∏)',
    '–ú–∏–∑–æ—Ñ–æ–±–∏—è (–≥—Ä—è–∑—å)', '–ì–µ–º–æ—Ñ–æ–±–∏—è (–∫—Ä–æ–≤—å)', '–¢–∞–Ω–∞—Ç–æ—Ñ–æ–±–∏—è (—Å–º–µ—Ä—Ç—å)',
    '–ê–≤—Ç–æ—Ñ–æ–±–∏—è (–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ)', '–§–æ–Ω–æ—Ñ–æ–±–∏—è (–≥—Ä–æ–º–∫–∏–µ –∑–≤—É–∫–∏)',
    '–ü–∏—Ä–æ—Ñ–æ–±–∏—è (–æ–≥–æ–Ω—å)', '–¢—Ä–∏–ø–æ—Ñ–æ–±–∏—è (–¥—ã—Ä–∫–∏)', '–≠–Ω—Ç–æ–º–æ—Ñ–æ–±–∏—è (–Ω–∞—Å–µ–∫–æ–º—ã–µ)',
    '–ú–µ—Ç–µ–æ—Ä–æ—Ñ–æ–±–∏—è (–ø–æ–≥–æ–¥–∞)', '–ö—Å–µ–Ω–æ—Ñ–æ–±–∏—è (–Ω–µ–∑–Ω–∞–∫–æ–º—Ü—ã)'
];

const baggage = [
    '–†—é–∫–∑–∞–∫ —Å –µ–¥–æ–π', '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∞–ø—Ç–µ—á–∫–∞', '–ù–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤',
    '–°–ø–∞–ª—å–Ω—ã–π –º–µ—à–æ–∫', '–ü–∞–ª–∞—Ç–∫–∞', '–§–æ–Ω–∞—Ä–∏–∫ —Å –±–∞—Ç–∞—Ä–µ–π–∫–∞–º–∏',
    '–†–∞–¥–∏–æ–ø—Ä–∏–µ–º–Ω–∏–∫', '–ö–æ–º–ø–∞—Å –∏ –∫–∞—Ä—Ç—ã', '–í–µ—Ä–µ–≤–∫–∞ 50–º', '–ù–æ–∂',
    '–ó–∞–∂–∏–≥–∞–ª–∫–∞', '–°–ø–∏—á–∫–∏ –≤–æ–¥–æ—Å—Ç–æ–π–∫–∏–µ', '–ö–æ–Ω—Å–µ—Ä–≤—ã', '–í–æ–¥–∞ 10–ª',
    '–û–¥–µ—è–ª–æ', '–ó–∞–ø–∞—Å–Ω–∞—è –æ–¥–µ–∂–¥–∞', '–ö–Ω–∏–≥–∏', '–ò–≥—Ä–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã',
    '–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', '–§–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç', '–î–æ–∫—É–º–µ–Ω—Ç—ã',
    '–î–µ–Ω—å–≥–∏', '–£–∫—Ä–∞—à–µ–Ω–∏—è', '–°–µ–º–µ–π–Ω—ã–µ —Ñ–æ—Ç–æ', '–û—Ä—É–∂–∏–µ',
    '–ê–ª–∫–æ–≥–æ–ª—å', '–°–∏–≥–∞—Ä–µ—Ç—ã', '–õ–µ–∫–∞—Ä—Å—Ç–≤–∞', '–°–µ–º–µ–Ω–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π', '–£–¥–æ—á–∫–∞'
];

const facts = [
    '–°–ª—É–∂–∏–ª –≤ –∞—Ä–º–∏–∏', '–ó–Ω–∞–µ—Ç –±–æ–µ–≤—ã–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞', '–£–º–µ–µ—Ç –≥–æ—Ç–æ–≤–∏—Ç—å',
    '–ì–æ–≤–æ—Ä–∏—Ç –Ω–∞ 3 —è–∑—ã–∫–∞—Ö', '–ò–º–µ–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞', '–£–º–µ–µ—Ç —à–∏—Ç—å',
    '–ó–Ω–∞–µ—Ç –ø–µ—Ä–≤—É—é –ø–æ–º–æ—â—å', '–£–º–µ–µ—Ç —á–∏–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É', '–•–æ—Ä–æ—à–æ —Å—Ç—Ä–µ–ª—è–µ—Ç',
    '–£–º–µ–µ—Ç –≤—ã–∂–∏–≤–∞—Ç—å –≤ –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥–µ', '–ó–Ω–∞–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é', '–£–º–µ–µ—Ç –ø–µ—Ç—å',
    '–•–æ—Ä–æ—à–æ —Ç–∞–Ω—Ü—É–µ—Ç', '–£–º–µ–µ—Ç –∏–≥—Ä–∞—Ç—å –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ', '–ó–Ω–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é',
    '–£–º–µ–µ—Ç —Å—á–∏—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–æ', '–•–æ—Ä–æ—à–∞—è –ø–∞–º—è—Ç—å', '–ó–Ω–∞–µ—Ç –≥–µ–æ–≥—Ä–∞—Ñ–∏—é',
    '–£–º–µ–µ—Ç —Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã', '–ó–Ω–∞–µ—Ç –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—é', '–£–º–µ–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É',
    '–•–æ—Ä–æ—à–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è', '–£–º–µ–µ—Ç –ª–∞–∑–∏—Ç—å –ø–æ –¥–µ—Ä–µ–≤—å—è–º', '–ë—ã—Å—Ç—Ä–æ –±–µ–≥–∞–µ—Ç',
    '–°–∏–ª—å–Ω—ã–µ —Ä—É–∫–∏', '–•–æ—Ä–æ—à–µ–µ –∑—Ä–µ–Ω–∏–µ', '–û—Å—Ç—Ä—ã–π —Å–ª—É—Ö', '–ß—É–≤—Å—Ç–≤—É–µ—Ç –æ–ø–∞—Å–Ω–æ—Å—Ç—å',
    '–£–º–µ–µ—Ç —É–±–µ–∂–¥–∞—Ç—å –ª—é–¥–µ–π', '–•–æ—Ä–æ—à–∏–π –ª–∏–¥–µ—Ä'
];

const roundMessages = [
    "–í–Ω–∏–º–∞–Ω–∏–µ! –°–µ–π—á–∞—Å –Ω–∞—á–Ω–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥.",
    "–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É!",
    "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ...",
    "–£ –≤–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º—è –æ–±—Å—É–¥–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.",
    "–°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤—Å—ë!"
];

const stories = [
  "–í 2050 –≥–æ–¥—É —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–∫–Ω—É–ª–æ—Å—å —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–æ–π. –ó–µ–º–ª—è –æ–∫–∞–∑–∞–ª–∞—Å—å –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π –≤—ã–º–∏—Ä–∞–Ω–∏—è, –∏ –≤—ã–∂–∏–≤—à–∏–µ –±—ã–ª–∏ –≤—ã–Ω—É–∂–¥–µ–Ω—ã –∏—Å–∫–∞—Ç—å —É–±–µ–∂–∏—â–µ –≤ –ø–æ–¥–∑–µ–º–Ω—ã—Ö –±—É–Ω–∫–µ—Ä–∞—Ö. –í—ã ‚Äî –æ–¥–∏–Ω –∏–∑ —Ç–µ—Ö, –∫–æ–º—É —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Å—Ç–∏—Å—å.",
  "–ü–æ—Å–ª–µ —Ä–∞–∑—Ä—É—à–∏—Ç–µ–ª—å–Ω–æ–π –≤–æ–π–Ω—ã –±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –ø–ª–∞–Ω–µ—Ç—ã —Å—Ç–∞–ª–∞ –Ω–µ–ø—Ä–∏–≥–æ–¥–Ω–æ–π –¥–ª—è –∂–∏–∑–Ω–∏. –ì—Ä—É–ø–ø–∞ –ª—é–¥–µ–π —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ, —á—Ç–æ–±—ã –≤—ã–∂–∏—Ç—å –≤ –Ω–æ–≤–æ–º –º–∏—Ä–µ, –≥–¥–µ –∫–∞–∂–¥–æ–µ —Ä–µ—à–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º.",
  "–í–∏—Ä—É—Å, –≤—ã—Ä–≤–∞–≤—à–∏–π—Å—è –∏–∑ —Å–µ–∫—Ä–µ—Ç–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏, —É–Ω–∏—á—Ç–æ–∂
  // ... –¥–æ–±–∞–≤—å—Ç–µ –µ—â–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å—Ç–æ—Ä–∏–π, –¥–ª–∏–Ω–æ–π 250-500 —Å–∏–º–≤–æ–ª–æ–≤
];

function startRound() {
  // ... –≤–∞—à –¥—Ä—É–≥–æ–π –∫–æ–¥ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞—É–Ω–¥–∞

  const randomStory = stories[Math.floor(Math.random() * stories.length)];
  io.emit('showStory', randomStory);
}

function onStartRound() {
    const message = roundMessages[Math.floor(Math.random() * roundMessages.length)];
    // –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –í–°–ï–ú –∫–ª–∏–µ–Ω—Ç–∞–º
    io.emit('roundMessage', message);
}

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(__dirname));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    console.log('üìÑ Serving main page');
    res.sendFile(path.join(__dirname, 'index.html'));
});

// API –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', (req, res) => {
    try {
        res.json({ 
            status: 'OK', 
            timestamp: new Date().toISOString(),
            players: gameRoom ? gameRoom.players.length : 0,
            gameState: gameRoom ? gameRoom.gameState : 'unknown',
            connections: io.engine ? io.engine.clientsCount : 0,
            uptime: process.uptime(),
            memory: process.memoryUsage()
        });
    } catch (error) {
        console.error('Health check error:', error);
        res.status(500).json({ 
            status: 'ERROR', 
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// Catch-all –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ä–æ—É—Ç–æ–≤
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// === –ò–ì–†–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ===
const gameRoom = {
    players: [],
    gameState: 'lobby',
    maxPlayers: 8,
    gamePhase: 'waiting',
    currentRound: 1,
    maxRounds: 3,
    timer: null,
    timeLeft: 0,
    votingResults: {},
    revealedThisRound: 0,
    currentTurnPlayer: null,
    playersWhoRevealed: [],
    totalVotes: 0,
    skipDiscussionVotes: [],
    justificationQueue: [],
    currentJustifyingPlayer: null,
    justificationPhase: 1,
    canChangeVote: {},
    startRoundVotes: [],
    activeEffects: {},
    pendingEliminationNextRound: false,
    eliminateTopVotersNextRound: false
};

// === –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô ===
io.on('connection', (socket) => {
    console.log('üîó New connection:', socket.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
    socket.emit('player-count', { count: gameRoom.players.length });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–Ø –ö –ò–ì–†–ï ===
    socket.on('join-game', (data) => {
        console.log('üëã Player joining:', data.playerName, 'Socket:', socket.id);
        
        const playerName = data.playerName?.trim();
        
        if (!playerName || playerName.length < 2 || playerName.length > 20) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ñ–ò–í–´–• –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π socket
        const existingPlayer = gameRoom.players.find(p => 
            p.name.toLowerCase() === playerName.toLowerCase() && 
            p.id !== socket.id
        );
        
        if (existingPlayer) {
            console.log('‚ùå Name already taken:', playerName, 'by player:', existingPlayer.id);
            socket.emit('error', '–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å –≤ –∏–≥—Ä–µ');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤
        if (gameRoom.players.length >= gameRoom.maxPlayers) {
            socket.emit('error', '–ò–≥—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
            return;
        }
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –∂–µ socket.id –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const existingPlayerIndex = gameRoom.players.findIndex(p => p.id === socket.id);
        if (existingPlayerIndex !== -1) {
            console.log('üîÑ Removing previous player with same socket:', socket.id);
            gameRoom.players.splice(existingPlayerIndex, 1);
        }
        
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
        const player = {
            id: socket.id,
            name: playerName,
            isAlive: true,
            isHost: gameRoom.players.length === 0,
            votes: 0,
            hasVoted: false,
            votedFor: null,
            hasRevealed: false,
            cardsRevealedThisRound: 0,
            revealedCharacteristics: [],
            characteristics: null,
            actionCards: []
        };
        
        gameRoom.players.push(player);
        socket.join('game-room');
        
        console.log('‚úÖ Player joined:', playerName, 'Total players:', gameRoom.players.length);
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        socket.emit('join-confirmed', {
            playerId: socket.id,
            playerName: playerName,
            isHost: player.isHost,
            maxPlayers: gameRoom.maxPlayers,
            players: gameRoom.players,
            gameState: gameRoom.gameState
        });
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ
        io.to('game-room').emit('player-joined', {
            players: gameRoom.players,
            maxPlayers: gameRoom.maxPlayers,
            gameState: gameRoom.gameState
        });
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø ===
    socket.on('disconnect', () => {
        console.log('‚ùå Player disconnected:', socket.id);
        
        const playerIndex = gameRoom.players.findIndex(p => p.id === socket.id);
        if (playerIndex !== -1) {
            const player = gameRoom.players[playerIndex];
            console.log('üëã Player left:', player.name);
            
            gameRoom.players.splice(playerIndex, 1);
            
            if (player.isHost && gameRoom.players.length > 0) {
                gameRoom.players[0].isHost = true;
                console.log('üëë New host:', gameRoom.players[0].name);
            }
            
            if (gameRoom.players.length === 0 || (gameRoom.gameState === 'playing' && gameRoom.players.length < 2)) {
                resetGame();
            } else {
                io.to('game-room').emit('player-left', {
                    players: gameRoom.players,
                    gameState: gameRoom.gameState
                });
            }
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê –ò–ì–†–û–ö–û–í ===
    socket.on('change-max-players', (data) => {
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã!');
            return;
        }
        
        const newMaxPlayers = parseInt(data.maxPlayers);
        if (newMaxPlayers < 2 || newMaxPlayers > 16) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        if (newMaxPlayers < gameRoom.players.length) {
            socket.emit('error', '–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        gameRoom.maxPlayers = newMaxPlayers;
        console.log('üîß Max players changed to:', newMaxPlayers);
        
        io.to('game-room').emit('max-players-changed', {
            maxPlayers: gameRoom.maxPlayers,
            players: gameRoom.players
        });
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–¢–ê–†–¢–ê –ò–ì–†–´ ===
    socket.on('start-game', () => {
        console.log('üéÆ Game start requested by:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!');
            return;
        }
        
        if (gameRoom.players.length < 2) {
            socket.emit('error', '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!');
            return;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        gameRoom.players.forEach(player => {
            player.characteristics = generateCharacteristics();
            player.actionCards = [getRandomActionCard()];
            player.hasRevealed = false;
            player.hasVoted = false;
            player.revealedCharacteristics = [];
            player.cardsRevealedThisRound = 0;
        });
        
        gameRoom.gameState = 'playing';
        gameRoom.gamePhase = 'preparation';
        gameRoom.currentRound = 1;
        gameRoom.timeLeft = 0;
        gameRoom.playersWhoRevealed = [];
        gameRoom.currentTurnPlayer = null;
        gameRoom.startRoundVotes = [];
        
        const randomStory = stories[Math.floor(Math.random() * stories.length)];
        
        console.log('üöÄ Game started! Players:', gameRoom.players.length);
        
        io.to('game-room').emit('game-started', {
            players: gameRoom.players,
            gameState: gameRoom.gameState,
            gamePhase: gameRoom.gamePhase,
            currentRound: gameRoom.currentRound,
            timeLeft: gameRoom.timeLeft,
            story: randomStory
        });
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–õ–û–°–û–í–ê–ù–ò–Ø –ó–ê –ù–ê–ß–ê–õ–û –†–ê–£–ù–î–ê ===
    socket.on('start-round', () => {
        console.log('üéØ Start round vote from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'preparation') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞!');
            return;
        }
        
        if (gameRoom.startRoundVotes.includes(socket.id)) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –Ω–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞!');
            return;
        }
        
        gameRoom.startRoundVotes.push(socket.id);
        
        const requiredVotes = 2;
        const currentVotes = gameRoom.startRoundVotes.length;
        
        console.log(`üéØ Start round votes: ${currentVotes}/${requiredVotes}`);
        
        gameRoom.players.forEach(p => {
            const hasVoted = gameRoom.startRoundVotes.includes(p.id);
            io.to(p.id).emit('start-round-vote-update', {
                votes: currentVotes,
                required: requiredVotes,
                hasVoted: hasVoted
            });
        });
        
        if (currentVotes >= requiredVotes) {
            console.log('üöÄ Starting round - enough votes');
            gameRoom.startRoundVotes = [];
            startRevelationPhase();
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –†–ê–°–ö–†–´–¢–ò–Ø –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö ===
    socket.on('reveal-characteristic', (data) => {
        console.log('üîç Reveal characteristic:', data);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'revelation') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫!');
            return;
        }
        
        if (gameRoom.currentTurnPlayer !== socket.id) {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!');
            return;
        }
        
        const characteristic = data.characteristic;
        
        if (!player.characteristics || !player.characteristics[characteristic]) {
            socket.emit('error', '–¢–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            return;
        }
        
        if (player.revealedCharacteristics && player.revealedCharacteristics.includes(characteristic)) {
            socket.emit('error', '–≠—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞!');
            return;
        }
        
        const requiredCards = getRequiredCardsForRound(gameRoom.currentRound);
        const currentlyRevealed = player.cardsRevealedThisRound || 0;
        
        if (currentlyRevealed >= requiredCards) {
            socket.emit('error', '–í—ã —É–∂–µ —Ä–∞—Å–∫—Ä—ã–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞—Ä—Ç—ã –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ!');
            return;
        }
        
        if (gameRoom.currentRound === 1) {
            if (currentlyRevealed === 0 && characteristic !== 'profession') {
                socket.emit('error', '–í –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é!');
                return;
            }
            
            if (currentlyRevealed === 1 && characteristic === 'profession') {
                socket.emit('error', '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É.');
                return;
            }
        }
        
        // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
        if (!player.revealedCharacteristics) {
            player.revealedCharacteristics = [];
        }
        
        player.revealedCharacteristics.push(characteristic);
        player.cardsRevealedThisRound = (player.cardsRevealedThisRound || 0) + 1;
        
        console.log(`üîç ${player.name} revealed ${characteristic}: ${player.characteristics[characteristic]}`);
        
        io.to('game-room').emit('characteristic-revealed', {
            playerId: player.id,
            playerName: player.name,
            characteristic: characteristic,
            value: player.characteristics[characteristic],
            players: gameRoom.players,
            cardsRevealedThisRound: player.cardsRevealedThisRound,
            requiredCards: requiredCards
        });
        
        if (player.cardsRevealedThisRound >= requiredCards) {
            player.hasRevealed = true;
            console.log(`‚úÖ ${player.name} completed revelation phase`);
            
            setTimeout(() => {
                nextPlayerTurn();
            }, 1500);
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–û–ü–£–°–ö–ê –û–ë–°–£–ñ–î–ï–ù–ò–Ø ===
    socket.on('vote-skip-discussion', () => {
        console.log('‚è≠Ô∏è Skip discussion vote from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'discussion') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ —Ñ–∞–∑–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è!');
            return;
        }
        
        if (gameRoom.skipDiscussionVotes.includes(socket.id)) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—è!');
            return;
        }
        
        gameRoom.skipDiscussionVotes.push(socket.id);
        
        const requiredVotes = 2;
        const currentVotes = gameRoom.skipDiscussionVotes.length;
        
        console.log(`‚è≠Ô∏è Skip discussion votes: ${currentVotes}/${requiredVotes}`);
        
        gameRoom.players.forEach(p => {
            const hasVoted = gameRoom.skipDiscussionVotes.includes(p.id);
            io.to(p.id).emit('skip-discussion-vote-update', {
                votes: currentVotes,
                required: requiredVotes,
                hasVoted: hasVoted
            });
        });
        
        if (currentVotes >= requiredVotes) {
            console.log('‚è≠Ô∏è Skipping discussion - enough votes');
            clearInterval(gameRoom.timer);
            gameRoom.timer = null;
            
            io.to('game-room').emit('discussion-skipped', {
                gamePhase: 'voting',
                timeLeft: 120,
                players: gameRoom.players
            });
            
            startVotingPhase();
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–õ–û–°–û–í–ê–ù–ò–Ø ===
    socket.on('vote-player', (data) => {
        console.log('üó≥Ô∏è Vote from:', socket.id, 'for:', data.targetId);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        const targetPlayer = gameRoom.players.find(p => p.id === data.targetId);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (!targetPlayer || !targetPlayer.isAlive) {
            socket.emit('error', '–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'voting') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
            return;
        }
        
        if (player.hasVoted) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!');
            return;
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å
        player.hasVoted = true;
        player.votedFor = data.targetId;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤ —É —Ü–µ–ª–∏
        targetPlayer.votes = (targetPlayer.votes || 0) + 1;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        if (!gameRoom.votingResults[data.targetId]) {
            gameRoom.votingResults[data.targetId] = [];
        }
        gameRoom.votingResults[data.targetId].push(socket.id);
        
        console.log(`üó≥Ô∏è ${player.name} voted for ${targetPlayer.name} (${targetPlayer.votes} votes)`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        io.to('game-room').emit('vote-update', {
            players: gameRoom.players,
            votingResults: gameRoom.votingResults,
            canChangeVote: gameRoom.canChangeVote
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        const votedPlayers = alivePlayers.filter(p => p.hasVoted);
        
        console.log(`üó≥Ô∏è Votes: ${votedPlayers.length}/${alivePlayers.length}`);
        
        if (votedPlayers.length === alivePlayers.length) {
            console.log('‚úÖ All players voted, processing results immediately');
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∏ —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if (gameRoom.timer) {
                clearInterval(gameRoom.timer);
                gameRoom.timer = null;
            }
            
            // –°—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            processVotingResults();
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–í–ï–†–®–ï–ù–ò–Ø –û–ü–†–ê–í–î–ê–ù–ò–Ø ===
    socket.on('finish-justification', () => {
        console.log('‚úÖ Finish justification from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || gameRoom.currentJustifyingPlayer !== socket.id) {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –æ–ø—Ä–∞–≤–¥—ã–≤–∞—Ç—å—Å—è!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'justification') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–π!');
            return;
        }
        
        nextJustification();
    });

    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–î–ê–ß–ò ===
    socket.on('surrender', () => {
        console.log('üè≥Ô∏è Surrender from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å—Å—è!');
            return;
        }
        
        player.isAlive = false;
        
        console.log(`üè≥Ô∏è ${player.name} surrendered`);
        
        io.to('game-room').emit('player-surrendered', {
            playerName: player.name,
            players: gameRoom.players
        });
        
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        if (alivePlayers.length <= 2) {
            endGame();
        } else if (gameRoom.gamePhase === 'justification') {
            nextJustification();
        }
    });
});

// === –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ===
// –§—É–Ω–∫—Ü–∏–∏ processVotingResults, showResults, nextRound –∏ —Ç.–¥. –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ü–û–°–õ–ï –±–ª–æ–∫–∞ io.on('connection')

// –¢–ê–ö–ñ–ï –ù–£–ñ–ù–û –ò–°–ü–†–ê–í–ò–¢–¨ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è - —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω
io.on('connection', (socket) => {
    console.log('üîó New connection:', socket.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
    socket.emit('player-count', { count: gameRoom.players.length });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–Ø –ö –ò–ì–†–ï ===
    socket.on('join-game', (data) => {
        console.log('üëã Player joining:', data.playerName, 'Socket:', socket.id);
        
        const playerName = data.playerName?.trim();
        
        if (!playerName || playerName.length < 2 || playerName.length > 20) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ñ–ò–í–´–• –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π socket
        const existingPlayer = gameRoom.players.find(p => 
            p.name.toLowerCase() === playerName.toLowerCase() && 
            p.id !== socket.id
        );
        
        if (existingPlayer) {
            console.log('‚ùå Name already taken:', playerName, 'by player:', existingPlayer.id);
            socket.emit('error', '–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å –≤ –∏–≥—Ä–µ');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤
        if (gameRoom.players.length >= gameRoom.maxPlayers) {
            socket.emit('error', '–ò–≥—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
            return;
        }
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –∂–µ socket.id –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const existingPlayerIndex = gameRoom.players.findIndex(p => p.id === socket.id);
        if (existingPlayerIndex !== -1) {
            console.log('üîÑ Removing previous player with same socket:', socket.id);
            gameRoom.players.splice(existingPlayerIndex, 1);
        }
        
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
        const player = {
            id: socket.id,
            name: playerName,
            isAlive: true,
            isHost: gameRoom.players.length === 0,
            votes: 0,
            hasVoted: false,
            votedFor: null,
            hasRevealed: false,
            cardsRevealedThisRound: 0,
            revealedCharacteristics: [],
            characteristics: null,
            actionCards: []
        };
        
        gameRoom.players.push(player);
        socket.join('game-room');
        
        console.log('‚úÖ Player joined:', playerName, 'Total players:', gameRoom.players.length);
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        socket.emit('join-confirmed', {
            playerId: socket.id,
            playerName: playerName,
            isHost: player.isHost,
            maxPlayers: gameRoom.maxPlayers,
            players: gameRoom.players,
            gameState: gameRoom.gameState
        });
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ
        io.to('game-room').emit('player-joined', {
            players: gameRoom.players,
            maxPlayers: gameRoom.maxPlayers,
            gameState: gameRoom.gameState
        });
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø ===
    socket.on('disconnect', () => {
        console.log('‚ùå Player disconnected:', socket.id);
        
        const playerIndex = gameRoom.players.findIndex(p => p.id === socket.id);
        if (playerIndex !== -1) {
            const player = gameRoom.players[playerIndex];
            console.log('üëã Player left:', player.name);
            
            gameRoom.players.splice(playerIndex, 1);
            
            if (player.isHost && gameRoom.players.length > 0) {
                gameRoom.players[0].isHost = true;
                console.log('üëë New host:', gameRoom.players[0].name);
            }
            
            if (gameRoom.players.length === 0 || (gameRoom.gameState === 'playing' && gameRoom.players.length < 2)) {
                resetGame();
            } else {
                io.to('game-room').emit('player-left', {
                    players: gameRoom.players,
                    gameState: gameRoom.gameState
                });
            }
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê –ò–ì–†–û–ö–û–í ===
    socket.on('change-max-players', (data) => {
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã!');
            return;
        }
        
        const newMaxPlayers = parseInt(data.maxPlayers);
        if (newMaxPlayers < 2 || newMaxPlayers > 16) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        if (newMaxPlayers < gameRoom.players.length) {
            socket.emit('error', '–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        gameRoom.maxPlayers = newMaxPlayers;
        console.log('üîß Max players changed to:', newMaxPlayers);
        
        io.to('game-room').emit('max-players-changed', {
            maxPlayers: gameRoom.maxPlayers,
            players: gameRoom.players
        });
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–¢–ê–†–¢–ê –ò–ì–†–´ ===
    socket.on('start-game', () => {
        console.log('üéÆ Game start requested by:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!');
            return;
        }
        
        if (gameRoom.players.length < 2) {
            socket.emit('error', '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!');
            return;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        gameRoom.players.forEach(player => {
            player.characteristics = generateCharacteristics();
            player.actionCards = [getRandomActionCard()];
            player.hasRevealed = false;
            player.hasVoted = false;
            player.revealedCharacteristics = [];
            player.cardsRevealedThisRound = 0;
        });
        
        gameRoom.gameState = 'playing';
        gameRoom.gamePhase = 'preparation';
        gameRoom.currentRound = 1;
        gameRoom.timeLeft = 0;
        gameRoom.playersWhoRevealed = [];
        gameRoom.currentTurnPlayer = null;
        gameRoom.startRoundVotes = [];
        
        const randomStory = stories[Math.floor(Math.random() * stories.length)];
        
        console.log('üöÄ Game started! Players:', gameRoom.players.length);
        
        io.to('game-room').emit('game-started', {
            players: gameRoom.players,
            gameState: gameRoom.gameState,
            gamePhase: gameRoom.gamePhase,
            currentRound: gameRoom.currentRound,
            timeLeft: gameRoom.timeLeft,
            story: randomStory
        });
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–õ–û–°–û–í–ê–ù–ò–Ø –ó–ê –ù–ê–ß–ê–õ–û –†–ê–£–ù–î–ê ===
    socket.on('start-round', () => {
        console.log('üéØ Start round vote from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'preparation') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞!');
            return;
        }
        
        if (gameRoom.startRoundVotes.includes(socket.id)) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –Ω–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞!');
            return;
        }
        
        gameRoom.startRoundVotes.push(socket.id);
        
        const requiredVotes = 2;
        const currentVotes = gameRoom.startRoundVotes.length;
        
        console.log(`üéØ Start round votes: ${currentVotes}/${requiredVotes}`);
        
        gameRoom.players.forEach(p => {
            const hasVoted = gameRoom.startRoundVotes.includes(p.id);
            io.to(p.id).emit('start-round-vote-update', {
                votes: currentVotes,
                required: requiredVotes,
                hasVoted: hasVoted
            });
        });
        
        if (currentVotes >= requiredVotes) {
            console.log('üöÄ Starting round - enough votes');
            gameRoom.startRoundVotes = [];
            startRevelationPhase();
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –†–ê–°–ö–†–´–¢–ò–Ø –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö ===
    socket.on('reveal-characteristic', (data) => {
        console.log('üîç Reveal characteristic:', data);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'revelation') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫!');
            return;
        }
        
        if (gameRoom.currentTurnPlayer !== socket.id) {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!');
            return;
        }
        
        const characteristic = data.characteristic;
        
        if (!player.characteristics || !player.characteristics[characteristic]) {
            socket.emit('error', '–¢–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            return;
        }
        
        if (player.revealedCharacteristics && player.revealedCharacteristics.includes(characteristic)) {
            socket.emit('error', '–≠—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞!');
            return;
        }
        
        const requiredCards = getRequiredCardsForRound(gameRoom.currentRound);
        const currentlyRevealed = player.cardsRevealedThisRound || 0;
        
        if (currentlyRevealed >= requiredCards) {
            socket.emit('error', '–í—ã —É–∂–µ —Ä–∞—Å–∫—Ä—ã–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞—Ä—Ç—ã –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ!');
            return;
        }
        
        if (gameRoom.currentRound === 1) {
            if (currentlyRevealed === 0 && characteristic !== 'profession') {
                socket.emit('error', '–í –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é!');
                return;
            }
            
            if (currentlyRevealed === 1 && characteristic === 'profession') {
                socket.emit('error', '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É.');
                return;
            }
        }
        
        // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
        if (!player.revealedCharacteristics) {
            player.revealedCharacteristics = [];
        }
        
        player.revealedCharacteristics.push(characteristic);
        player.cardsRevealedThisRound = (player.cardsRevealedThisRound || 0) + 1;
        
        console.log(`üîç ${player.name} revealed ${characteristic}: ${player.characteristics[characteristic]}`);
        
        io.to('game-room').emit('characteristic-revealed', {
            playerId: player.id,
            playerName: player.name,
            characteristic: characteristic,
            value: player.characteristics[characteristic],
            players: gameRoom.players,
            cardsRevealedThisRound: player.cardsRevealedThisRound,
            requiredCards: requiredCards
        });
        
        if (player.cardsRevealedThisRound >= requiredCards) {
            player.hasRevealed = true;
            console.log(`‚úÖ ${player.name} completed revelation phase`);
            
            setTimeout(() => {
                nextPlayerTurn();
            }, 1500);
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–û–ü–£–°–ö–ê –û–ë–°–£–ñ–î–ï–ù–ò–Ø ===
    socket.on('vote-skip-discussion', () => {
        console.log('‚è≠Ô∏è Skip discussion vote from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'discussion') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ —Ñ–∞–∑–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è!');
            return;
        }
        
        if (gameRoom.skipDiscussionVotes.includes(socket.id)) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—è!');
            return;
        }
        
        gameRoom.skipDiscussionVotes.push(socket.id);
        
        const requiredVotes = 2;
        const currentVotes = gameRoom.skipDiscussionVotes.length;
        
        console.log(`‚è≠Ô∏è Skip discussion votes: ${currentVotes}/${requiredVotes}`);
        
        gameRoom.players.forEach(p => {
            const hasVoted = gameRoom.skipDiscussionVotes.includes(p.id);
            io.to(p.id).emit('skip-discussion-vote-update', {
                votes: currentVotes,
                required: requiredVotes,
                hasVoted: hasVoted
            });
        });
        
        if (currentVotes >= requiredVotes) {
            console.log('‚è≠Ô∏è Skipping discussion - enough votes');
            clearInterval(gameRoom.timer);
            gameRoom.timer = null;
            
            io.to('game-room').emit('discussion-skipped', {
                gamePhase: 'voting',
                timeLeft: 120,
                players: gameRoom.players
            });
            
            startVotingPhase();
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–õ–û–°–û–í–ê–ù–ò–Ø ===
    socket.on('vote-player', (data) => {
        console.log('üó≥Ô∏è Vote from:', socket.id, 'for:', data.targetId);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        const targetPlayer = gameRoom.players.find(p => p.id === data.targetId);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (!targetPlayer || !targetPlayer.isAlive) {
            socket.emit('error', '–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'voting') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
            return;
        }
        
        if (player.hasVoted) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!');
            return;
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å
        player.hasVoted = true;
        player.votedFor = data.targetId;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤ —É —Ü–µ–ª–∏
        targetPlayer.votes = (targetPlayer.votes || 0) + 1;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        if (!gameRoom.votingResults[data.targetId]) {
            gameRoom.votingResults[data.targetId] = [];
        }
        gameRoom.votingResults[data.targetId].push(socket.id);
        
        console.log(`üó≥Ô∏è ${player.name} voted for ${targetPlayer.name} (${targetPlayer.votes} votes)`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        io.to('game-room').emit('vote-update', {
            players: gameRoom.players,
            votingResults: gameRoom.votingResults,
            canChangeVote: gameRoom.canChangeVote
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        const votedPlayers = alivePlayers.filter(p => p.hasVoted);
        
        console.log(`üó≥Ô∏è Votes: ${votedPlayers.length}/${alivePlayers.length}`);
        
        if (votedPlayers.length === alivePlayers.length) {
            console.log('‚úÖ All players voted, processing results immediately');
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∏ —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if (gameRoom.timer) {
                clearInterval(gameRoom.timer);
                gameRoom.timer = null;
            }
            
            // –°—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            processVotingResults();
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–í–ï–†–®–ï–ù–ò–Ø –û–ü–†–ê–í–î–ê–ù–ò–Ø ===
    socket.on('finish-justification', () => {
        console.log('‚úÖ Finish justification from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || gameRoom.currentJustifyingPlayer !== socket.id) {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –æ–ø—Ä–∞–≤–¥—ã–≤–∞—Ç—å—Å—è!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'justification') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–π!');
            return;
        }
        
        nextJustification();
    });

    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–î–ê–ß–ò ===
    socket.on('surrender', () => {
        console.log('üè≥Ô∏è Surrender from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å—Å—è!');
            return;
        }
        
        player.isAlive = false;
        
        console.log(`üè≥Ô∏è ${player.name} surrendered`);
        
        io.to('game-room').emit('player-surrendered', {
            playerName: player.name,
            players: gameRoom.players
        });
        
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        if (alivePlayers.length <= 2) {
            endGame();
        } else if (gameRoom.gamePhase === 'justification') {
            nextJustification();
        }
    });
});

// === –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ===
// –§—É–Ω–∫—Ü–∏–∏ processVotingResults, showResults, nextRound –∏ —Ç.–¥. –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ü–û–°–õ–ï –±–ª–æ–∫–∞ io.on('connection')

// –¢–ê–ö–ñ–ï –ù–£–ñ–ù–û –ò–°–ü–†–ê–í–ò–¢–¨ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è - —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω
io.on('connection', (socket) => {
    console.log('üîó New connection:', socket.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
    socket.emit('player-count', { count: gameRoom.players.length });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–Ø –ö –ò–ì–†–ï ===
    socket.on('join-game', (data) => {
        console.log('üëã Player joining:', data.playerName, 'Socket:', socket.id);
        
        const playerName = data.playerName?.trim();
        
        if (!playerName || playerName.length < 2 || playerName.length > 20) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ñ–ò–í–´–• –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π socket
        const existingPlayer = gameRoom.players.find(p => 
            p.name.toLowerCase() === playerName.toLowerCase() && 
            p.id !== socket.id
        );
        
        if (existingPlayer) {
            console.log('‚ùå Name already taken:', playerName, 'by player:', existingPlayer.id);
            socket.emit('error', '–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å –≤ –∏–≥—Ä–µ');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤
        if (gameRoom.players.length >= gameRoom.maxPlayers) {
            socket.emit('error', '–ò–≥—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
            return;
        }
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –∂–µ socket.id –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const existingPlayerIndex = gameRoom.players.findIndex(p => p.id === socket.id);
        if (existingPlayerIndex !== -1) {
            console.log('üîÑ Removing previous player with same socket:', socket.id);
            gameRoom.players.splice(existingPlayerIndex, 1);
        }
        
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
        const player = {
            id: socket.id,
            name: playerName,
            isAlive: true,
            isHost: gameRoom.players.length === 0,
            votes: 0,
            hasVoted: false,
            votedFor: null,
            hasRevealed: false,
            cardsRevealedThisRound: 0,
            revealedCharacteristics: [],
            characteristics: null,
            actionCards: []
        };
        
        gameRoom.players.push(player);
        socket.join('game-room');
        
        console.log('‚úÖ Player joined:', playerName, 'Total players:', gameRoom.players.length);
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        socket.emit('join-confirmed', {
            playerId: socket.id,
            playerName: playerName,
            isHost: player.isHost,
            maxPlayers: gameRoom.maxPlayers,
            players: gameRoom.players,
            gameState: gameRoom.gameState
        });
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ
        io.to('game-room').emit('player-joined', {
            players: gameRoom.players,
            maxPlayers: gameRoom.maxPlayers,
            gameState: gameRoom.gameState
        });
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø ===
    socket.on('disconnect', () => {
        console.log('‚ùå Player disconnected:', socket.id);
        
        const playerIndex = gameRoom.players.findIndex(p => p.id === socket.id);
        if (playerIndex !== -1) {
            const player = gameRoom.players[playerIndex];
            console.log('üëã Player left:', player.name);
            
            gameRoom.players.splice(playerIndex, 1);
            
            if (player.isHost && gameRoom.players.length > 0) {
                gameRoom.players[0].isHost = true;
                console.log('üëë New host:', gameRoom.players[0].name);
            }
            
            if (gameRoom.players.length === 0 || (gameRoom.gameState === 'playing' && gameRoom.players.length < 2)) {
                resetGame();
            } else {
                io.to('game-room').emit('player-left', {
                    players: gameRoom.players,
                    gameState: gameRoom.gameState
                });
            }
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê –ò–ì–†–û–ö–û–í ===
    socket.on('change-max-players', (data) => {
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã!');
            return;
        }
        
        const newMaxPlayers = parseInt(data.maxPlayers);
        if (newMaxPlayers < 2 || newMaxPlayers > 16) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        if (newMaxPlayers < gameRoom.players.length) {
            socket.emit('error', '–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        gameRoom.maxPlayers = newMaxPlayers;
        console.log('üîß Max players changed to:', newMaxPlayers);
        
        io.to('game-room').emit('max-players-changed', {
            maxPlayers: gameRoom.maxPlayers,
            players: gameRoom.players
        });
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–¢–ê–†–¢–ê –ò–ì–†–´ ===
    socket.on('start-game', () => {
        console.log('üéÆ Game start requested by:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!');
            return;
        }
        
        if (gameRoom.players.length < 2) {
            socket.emit('error', '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!');
            return;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        gameRoom.players.forEach(player => {
            player.characteristics = generateCharacteristics();
            player.actionCards = [getRandomActionCard()];
            player.hasRevealed = false;
            player.hasVoted = false;
            player.revealedCharacteristics = [];
            player.cardsRevealedThisRound = 0;
        });
        
        gameRoom.gameState = 'playing';
        gameRoom.gamePhase = 'preparation';
        gameRoom.currentRound = 1;
        gameRoom.timeLeft = 0;
        gameRoom.playersWhoRevealed = [];
        gameRoom.currentTurnPlayer = null;
        gameRoom.startRoundVotes = [];
        
        const randomStory = stories[Math.floor(Math.random() * stories.length)];
        
        console.log('üöÄ Game started! Players:', gameRoom.players.length);
        
        io.to('game-room').emit('game-started', {
            players: gameRoom.players,
            gameState: gameRoom.gameState,
            gamePhase: gameRoom.gamePhase,
            currentRound: gameRoom.currentRound,
            timeLeft: gameRoom.timeLeft,
            story: randomStory
        });
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–õ–û–°–û–í–ê–ù–ò–Ø –ó–ê –ù–ê–ß–ê–õ–û –†–ê–£–ù–î–ê ===
    socket.on('start-round', () => {
        console.log('üéØ Start round vote from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'preparation') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞!');
            return;
        }
        
        if (gameRoom.startRoundVotes.includes(socket.id)) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –Ω–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞!');
            return;
        }
        
        gameRoom.startRoundVotes.push(socket.id);
        
        const requiredVotes = 2;
        const currentVotes = gameRoom.startRoundVotes.length;
        
        console.log(`üéØ Start round votes: ${currentVotes}/${requiredVotes}`);
        
        gameRoom.players.forEach(p => {
            const hasVoted = gameRoom.startRoundVotes.includes(p.id);
            io.to(p.id).emit('start-round-vote-update', {
                votes: currentVotes,
                required: requiredVotes,
                hasVoted: hasVoted
            });
        });
        
        if (currentVotes >= requiredVotes) {
            console.log('üöÄ Starting round - enough votes');
            gameRoom.startRoundVotes = [];
            startRevelationPhase();
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –†–ê–°–ö–†–´–¢–ò–Ø –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö ===
    socket.on('reveal-characteristic', (data) => {
        console.log('üîç Reveal characteristic:', data);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'revelation') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫!');
            return;
        }
        
        if (gameRoom.currentTurnPlayer !== socket.id) {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!');
            return;
        }
        
        const characteristic = data.characteristic;
        
        if (!player.characteristics || !player.characteristics[characteristic]) {
            socket.emit('error', '–¢–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            return;
        }
        
        if (player.revealedCharacteristics && player.revealedCharacteristics.includes(characteristic)) {
            socket.emit('error', '–≠—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞!');
            return;
        }
        
        const requiredCards = getRequiredCardsForRound(gameRoom.currentRound);
        const currentlyRevealed = player.cardsRevealedThisRound || 0;
        
        if (currentlyRevealed >= requiredCards) {
            socket.emit('error', '–í—ã —É–∂–µ —Ä–∞—Å–∫—Ä—ã–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞—Ä—Ç—ã –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ!');
            return;
        }
        
        if (gameRoom.currentRound === 1) {
            if (currentlyRevealed === 0 && characteristic !== 'profession') {
                socket.emit('error', '–í –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é!');
                return;
            }
            
            if (currentlyRevealed === 1 && characteristic === 'profession') {
                socket.emit('error', '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É.');
                return;
            }
        }
        
        // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
        if (!player.revealedCharacteristics) {
            player.revealedCharacteristics = [];
        }
        
        player.revealedCharacteristics.push(characteristic);
        player.cardsRevealedThisRound = (player.cardsRevealedThisRound || 0) + 1;
        
        console.log(`üîç ${player.name} revealed ${characteristic}: ${player.characteristics[characteristic]}`);
        
        io.to('game-room').emit('characteristic-revealed', {
            playerId: player.id,
            playerName: player.name,
            characteristic: characteristic,
            value: player.characteristics[characteristic],
            players: gameRoom.players,
            cardsRevealedThisRound: player.cardsRevealedThisRound,
            requiredCards: requiredCards
        });
        
        if (player.cardsRevealedThisRound >= requiredCards) {
            player.hasRevealed = true;
            console.log(`‚úÖ ${player.name} completed revelation phase`);
            
            setTimeout(() => {
                nextPlayerTurn();
            }, 1500);
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–û–ü–£–°–ö–ê –û–ë–°–£–ñ–î–ï–ù–ò–Ø ===
    socket.on('vote-skip-discussion', () => {
        console.log('‚è≠Ô∏è Skip discussion vote from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'discussion') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ —Ñ–∞–∑–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è!');
            return;
        }
        
        if (gameRoom.skipDiscussionVotes.includes(socket.id)) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—è!');
            return;
        }
        
        gameRoom.skipDiscussionVotes.push(socket.id);
        
        const requiredVotes = 2;
        const currentVotes = gameRoom.skipDiscussionVotes.length;
        
        console.log(`‚è≠Ô∏è Skip discussion votes: ${currentVotes}/${requiredVotes}`);
        
        gameRoom.players.forEach(p => {
            const hasVoted = gameRoom.skipDiscussionVotes.includes(p.id);
            io.to(p.id).emit('skip-discussion-vote-update', {
                votes: currentVotes,
                required: requiredVotes,
                hasVoted: hasVoted
            });
        });
        
        if (currentVotes >= requiredVotes) {
            console.log('‚è≠Ô∏è Skipping discussion - enough votes');
            clearInterval(gameRoom.timer);
            gameRoom.timer = null;
            
            io.to('game-room').emit('discussion-skipped', {
                gamePhase: 'voting',
                timeLeft: 120,
                players: gameRoom.players
            });
            
            startVotingPhase();
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–õ–û–°–û–í–ê–ù–ò–Ø ===
    socket.on('vote-player', (data) => {
        console.log('üó≥Ô∏è Vote from:', socket.id, 'for:', data.targetId);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        const targetPlayer = gameRoom.players.find(p => p.id === data.targetId);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (!targetPlayer || !targetPlayer.isAlive) {
            socket.emit('error', '–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'voting') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
            return;
        }
        
        if (player.hasVoted) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!');
            return;
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å
        player.hasVoted = true;
        player.votedFor = data.targetId;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤ —É —Ü–µ–ª–∏
        targetPlayer.votes = (targetPlayer.votes || 0) + 1;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        if (!gameRoom.votingResults[data.targetId]) {
            gameRoom.votingResults[data.targetId] = [];
        }
        gameRoom.votingResults[data.targetId].push(socket.id);
        
        console.log(`üó≥Ô∏è ${player.name} voted for ${targetPlayer.name} (${targetPlayer.votes} votes)`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        io.to('game-room').emit('vote-update', {
            players: gameRoom.players,
            votingResults: gameRoom.votingResults,
            canChangeVote: gameRoom.canChangeVote
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        const votedPlayers = alivePlayers.filter(p => p.hasVoted);
        
        console.log(`üó≥Ô∏è Votes: ${votedPlayers.length}/${alivePlayers.length}`);
        
        if (votedPlayers.length === alivePlayers.length) {
            console.log('‚úÖ All players voted, processing results immediately');
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∏ —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if (gameRoom.timer) {
                clearInterval(gameRoom.timer);
                gameRoom.timer = null;
            }
            
            // –°—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            processVotingResults();
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–í–ï–†–®–ï–ù–ò–Ø –û–ü–†–ê–í–î–ê–ù–ò–Ø ===
    socket.on('finish-justification', () => {
        console.log('‚úÖ Finish justification from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || gameRoom.currentJustifyingPlayer !== socket.id) {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –æ–ø—Ä–∞–≤–¥—ã–≤–∞—Ç—å—Å—è!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'justification') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–π!');
            return;
        }
        
        nextJustification();
    });

    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–î–ê–ß–ò ===
    socket.on('surrender', () => {
        console.log('üè≥Ô∏è Surrender from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å—Å—è!');
            return;
        }
        
        player.isAlive = false;
        
        console.log(`üè≥Ô∏è ${player.name} surrendered`);
        
        io.to('game-room').emit('player-surrendered', {
            playerName: player.name,
            players: gameRoom.players
        });
        
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        if (alivePlayers.length <= 2) {
            endGame();
        } else if (gameRoom.gamePhase === 'justification') {
            nextJustification();
        }
    });
});

// === –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ===
// –§—É–Ω–∫—Ü–∏–∏ processVotingResults, showResults, nextRound –∏ —Ç.–¥. –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ü–û–°–õ–ï –±–ª–æ–∫–∞ io.on('connection')

// –¢–ê–ö–ñ–ï –ù–£–ñ–ù–û –ò–°–ü–†–ê–í–ò–¢–¨ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è - —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω
io.on('connection', (socket) => {
    console.log('üîó New connection:', socket.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
    socket.emit('player-count', { count: gameRoom.players.length });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–Ø –ö –ò–ì–†–ï ===
    socket.on('join-game', (data) => {
        console.log('üëã Player joining:', data.playerName, 'Socket:', socket.id);
        
        const playerName = data.playerName?.trim();
        
        if (!playerName || playerName.length < 2 || playerName.length > 20) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ñ–ò–í–´–• –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π socket
        const existingPlayer = gameRoom.players.find(p => 
            p.name.toLowerCase() === playerName.toLowerCase() && 
            p.id !== socket.id
        );
        
        if (existingPlayer) {
            console.log('‚ùå Name already taken:', playerName, 'by player:', existingPlayer.id);
            socket.emit('error', '–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å –≤ –∏–≥—Ä–µ');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤
        if (gameRoom.players.length >= gameRoom.maxPlayers) {
            socket.emit('error', '–ò–≥—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
            return;
        }
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –∂–µ socket.id –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const existingPlayerIndex = gameRoom.players.findIndex(p => p.id === socket.id);
        if (existingPlayerIndex !== -1) {
            console.log('üîÑ Removing previous player with same socket:', socket.id);
            gameRoom.players.splice(existingPlayerIndex, 1);
        }
        
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
        const player = {
            id: socket.id,
            name: playerName,
            isAlive: true,
            isHost: gameRoom.players.length === 0,
            votes: 0,
            hasVoted: false,
            votedFor: null,
            hasRevealed: false,
            cardsRevealedThisRound: 0,
            revealedCharacteristics: [],
            characteristics: null,
            actionCards: []
        };
        
        gameRoom.players.push(player);
        socket.join('game-room');
        
        console.log('‚úÖ Player joined:', playerName, 'Total players:', gameRoom.players.length);
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        socket.emit('join-confirmed', {
            playerId: socket.id,
            playerName: playerName,
            isHost: player.isHost,
            maxPlayers: gameRoom.maxPlayers,
            players: gameRoom.players,
            gameState: gameRoom.gameState
        });
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ
        io.to('game-room').emit('player-joined', {
            players: gameRoom.players,
            maxPlayers: gameRoom.maxPlayers,
            gameState: gameRoom.gameState
        });
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø ===
    socket.on('disconnect', () => {
        console.log('‚ùå Player disconnected:', socket.id);
        
        const playerIndex = gameRoom.players.findIndex(p => p.id === socket.id);
        if (playerIndex !== -1) {
            const player = gameRoom.players[playerIndex];
            console.log('üëã Player left:', player.name);
            
            gameRoom.players.splice(playerIndex, 1);
            
            if (player.isHost && gameRoom.players.length > 0) {
                gameRoom.players[0].isHost = true;
                console.log('üëë New host:', gameRoom.players[0].name);
            }
            
            if (gameRoom.players.length === 0 || (gameRoom.gameState === 'playing' && gameRoom.players.length < 2)) {
                resetGame();
            } else {
                io.to('game-room').emit('player-left', {
                    players: gameRoom.players,
                    gameState: gameRoom.gameState
                });
            }
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê –ò–ì–†–û–ö–û–í ===
    socket.on('change-max-players', (data) => {
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã!');
            return;
        }
        
        const newMaxPlayers = parseInt(data.maxPlayers);
        if (newMaxPlayers < 2 || newMaxPlayers > 16) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        if (newMaxPlayers < gameRoom.players.length) {
            socket.emit('error', '–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        gameRoom.maxPlayers = newMaxPlayers;
        console.log('üîß Max players changed to:', newMaxPlayers);
        
        io.to('game-room').emit('max-players-changed', {
            maxPlayers: gameRoom.maxPlayers,
            players: gameRoom.players
        });
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–¢–ê–†–¢–ê –ò–ì–†–´ ===
    socket.on('start-game', () => {
        console.log('üéÆ Game start requested by:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!');
            return;
        }
        
        if (gameRoom.players.length < 2) {
            socket.emit('error', '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!');
            return;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        gameRoom.players.forEach(player => {
            player.characteristics = generateCharacteristics();
            player.actionCards = [getRandomActionCard()];
            player.hasRevealed = false;
            player.hasVoted = false;
            player.revealedCharacteristics = [];
            player.cardsRevealedThisRound = 0;
        });
        
        gameRoom.gameState = 'playing';
        gameRoom.gamePhase = 'preparation';
        gameRoom.currentRound = 1;
        gameRoom.timeLeft = 0;
        gameRoom.playersWhoRevealed = [];
        gameRoom.currentTurnPlayer = null;
        gameRoom.startRoundVotes = [];
        
        const randomStory = stories[Math.floor(Math.random() * stories.length)];
        
        console.log('üöÄ Game started! Players:', gameRoom.players.length);
        
        io.to('game-room').emit('game-started', {
            players: gameRoom.players,
            gameState: gameRoom.gameState,
            gamePhase: gameRoom.gamePhase,
            currentRound: gameRoom.currentRound,
            timeLeft: gameRoom.timeLeft,
            story: randomStory
        });
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–õ–û–°–û–í–ê–ù–ò–Ø –ó–ê –ù–ê–ß–ê–õ–û –†–ê–£–ù–î–ê ===
    socket.on('start-round', () => {
        console.log('üéØ Start round vote from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'preparation') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞!');
            return;
        }
        
        if (gameRoom.startRoundVotes.includes(socket.id)) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –Ω–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞!');
            return;
        }
        
        gameRoom.startRoundVotes.push(socket.id);
        
        const requiredVotes = 2;
        const currentVotes = gameRoom.startRoundVotes.length;
        
        console.log(`üéØ Start round votes: ${currentVotes}/${requiredVotes}`);
        
        gameRoom.players.forEach(p => {
            const hasVoted = gameRoom.startRoundVotes.includes(p.id);
            io.to(p.id).emit('start-round-vote-update', {
                votes: currentVotes,
                required: requiredVotes,
                hasVoted: hasVoted
            });
        });
        
        if (currentVotes >= requiredVotes) {
            console.log('üöÄ Starting round - enough votes');
            gameRoom.startRoundVotes = [];
            startRevelationPhase();
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –†–ê–°–ö–†–´–¢–ò–Ø –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö ===
    socket.on('reveal-characteristic', (data) => {
        console.log('üîç Reveal characteristic:', data);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'revelation') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫!');
            return;
        }
        
        if (gameRoom.currentTurnPlayer !== socket.id) {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!');
            return;
        }
        
        const characteristic = data.characteristic;
        
        if (!player.characteristics || !player.characteristics[characteristic]) {
            socket.emit('error', '–¢–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            return;
        }
        
        if (player.revealedCharacteristics && player.revealedCharacteristics.includes(characteristic)) {
            socket.emit('error', '–≠—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞!');
            return;
        }
        
        const requiredCards = getRequiredCardsForRound(gameRoom.currentRound);
        const currentlyRevealed = player.cardsRevealedThisRound || 0;
        
        if (currentlyRevealed >= requiredCards) {
            socket.emit('error', '–í—ã —É–∂–µ —Ä–∞—Å–∫—Ä—ã–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞—Ä—Ç—ã –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ!');
            return;
        }
        
        if (gameRoom.currentRound === 1) {
            if (currentlyRevealed === 0 && characteristic !== 'profession') {
                socket.emit('error', '–í –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é!');
                return;
            }
            
            if (currentlyRevealed === 1 && characteristic === 'profession') {
                socket.emit('error', '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É.');
                return;
            }
        }
        
        // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
        if (!player.revealedCharacteristics) {
            player.revealedCharacteristics = [];
        }
        
        player.revealedCharacteristics.push(characteristic);
        player.cardsRevealedThisRound = (player.cardsRevealedThisRound || 0) + 1;
        
        console.log(`üîç ${player.name} revealed ${characteristic}: ${player.characteristics[characteristic]}`);
        
        io.to('game-room').emit('characteristic-revealed', {
            playerId: player.id,
            playerName: player.name,
            characteristic: characteristic,
            value: player.characteristics[characteristic],
            players: gameRoom.players,
            cardsRevealedThisRound: player.cardsRevealedThisRound,
            requiredCards: requiredCards
        });
        
        if (player.cardsRevealedThisRound >= requiredCards) {
            player.hasRevealed = true;
            console.log(`‚úÖ ${player.name} completed revelation phase`);
            
            setTimeout(() => {
                nextPlayerTurn();
            }, 1500);
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–û–ü–£–°–ö–ê –û–ë–°–£–ñ–î–ï–ù–ò–Ø ===
    socket.on('vote-skip-discussion', () => {
        console.log('‚è≠Ô∏è Skip discussion vote from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'discussion') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ —Ñ–∞–∑–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è!');
            return;
        }
        
        if (gameRoom.skipDiscussionVotes.includes(socket.id)) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—è!');
            return;
        }
        
        gameRoom.skipDiscussionVotes.push(socket.id);
        
        const requiredVotes = 2;
        const currentVotes = gameRoom.skipDiscussionVotes.length;
        
        console.log(`‚è≠Ô∏è Skip discussion votes: ${currentVotes}/${requiredVotes}`);
        
        gameRoom.players.forEach(p => {
            const hasVoted = gameRoom.skipDiscussionVotes.includes(p.id);
            io.to(p.id).emit('skip-discussion-vote-update', {
                votes: currentVotes,
                required: requiredVotes,
                hasVoted: hasVoted
            });
        });
        
        if (currentVotes >= requiredVotes) {
            console.log('‚è≠Ô∏è Skipping discussion - enough votes');
            clearInterval(gameRoom.timer);
            gameRoom.timer = null;
            
            io.to('game-room').emit('discussion-skipped', {
                gamePhase: 'voting',
                timeLeft: 120,
                players: gameRoom.players
            });
            
            startVotingPhase();
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–õ–û–°–û–í–ê–ù–ò–Ø ===
    socket.on('vote-player', (data) => {
        console.log('üó≥Ô∏è Vote from:', socket.id, 'for:', data.targetId);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        const targetPlayer = gameRoom.players.find(p => p.id === data.targetId);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (!targetPlayer || !targetPlayer.isAlive) {
            socket.emit('error', '–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'voting') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
            return;
        }
        
        if (player.hasVoted) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!');
            return;
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å
        player.hasVoted = true;
        player.votedFor = data.targetId;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤ —É —Ü–µ–ª–∏
        targetPlayer.votes = (targetPlayer.votes || 0) + 1;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        if (!gameRoom.votingResults[data.targetId]) {
            gameRoom.votingResults[data.targetId] = [];
        }
        gameRoom.votingResults[data.targetId].push(socket.id);
        
        console.log(`üó≥Ô∏è ${player.name} voted for ${targetPlayer.name} (${targetPlayer.votes} votes)`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        io.to('game-room').emit('vote-update', {
            players: gameRoom.players,
            votingResults: gameRoom.votingResults,
            canChangeVote: gameRoom.canChangeVote
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        const votedPlayers = alivePlayers.filter(p => p.hasVoted);
        
        console.log(`üó≥Ô∏è Votes: ${votedPlayers.length}/${alivePlayers.length}`);
        
        if (votedPlayers.length === alivePlayers.length) {
            console.log('‚úÖ All players voted, processing results immediately');
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∏ —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if (gameRoom.timer) {
                clearInterval(gameRoom.timer);
                gameRoom.timer = null;
            }
            
            // –°—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            processVotingResults();
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–í–ï–†–®–ï–ù–ò–Ø –û–ü–†–ê–í–î–ê–ù–ò–Ø ===
    socket.on('finish-justification', () => {
        console.log('‚úÖ Finish justification from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || gameRoom.currentJustifyingPlayer !== socket.id) {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –æ–ø—Ä–∞–≤–¥—ã–≤–∞—Ç—å—Å—è!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'justification') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–π!');
            return;
        }
        
        nextJustification();
    });

    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–î–ê–ß–ò ===
    socket.on('surrender', () => {
        console.log('üè≥Ô∏è Surrender from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å—Å—è!');
            return;
        }
        
        player.isAlive = false;
        
        console.log(`üè≥Ô∏è ${player.name} surrendered`);
        
        io.to('game-room').emit('player-surrendered', {
            playerName: player.name,
            players: gameRoom.players
        });
        
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        if (alivePlayers.length <= 2) {
            endGame();
        } else if (gameRoom.gamePhase === 'justification') {
            nextJustification();
        }
    });
});

// === –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ===
// –§—É–Ω–∫—Ü–∏–∏ processVotingResults, showResults, nextRound –∏ —Ç.–¥. –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ü–û–°–õ–ï –±–ª–æ–∫–∞ io.on('connection')

// –¢–ê–ö–ñ–ï –ù–£–ñ–ù–û –ò–°–ü–†–ê–í–ò–¢–¨ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è - —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω
io.on('connection', (socket) => {
    console.log('üîó New connection:', socket.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
    socket.emit('player-count', { count: gameRoom.players.length });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–Ø –ö –ò–ì–†–ï ===
    socket.on('join-game', (data) => {
        console.log('üëã Player joining:', data.playerName, 'Socket:', socket.id);
        
        const playerName = data.playerName?.trim();
        
        if (!playerName || playerName.length < 2 || playerName.length > 20) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ñ–ò–í–´–• –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π socket
        const existingPlayer = gameRoom.players.find(p => 
            p.name.toLowerCase() === playerName.toLowerCase() && 
            p.id !== socket.id
        );
        
        if (existingPlayer) {
            console.log('‚ùå Name already taken:', playerName, 'by player:', existingPlayer.id);
            socket.emit('error', '–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å –≤ –∏–≥—Ä–µ');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤
        if (gameRoom.players.length >= gameRoom.maxPlayers) {
            socket.emit('error', '–ò–≥—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
            return;
        }
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –∂–µ socket.id –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const existingPlayerIndex = gameRoom.players.findIndex(p => p.id === socket.id);
        if (existingPlayerIndex !== -1) {
            console.log('üîÑ Removing previous player with same socket:', socket.id);
            gameRoom.players.splice(existingPlayerIndex, 1);
        }
        
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
        const player = {
            id: socket.id,
            name: playerName,
            isAlive: true,
            isHost: gameRoom.players.length === 0,
            votes: 0,
            hasVoted: false,
            votedFor: null,
            hasRevealed: false,
            cardsRevealedThisRound: 0,
            revealedCharacteristics: [],
            characteristics: null,
            actionCards: []
        };
        
        gameRoom.players.push(player);
        socket.join('game-room');
        
        console.log('‚úÖ Player joined:', playerName, 'Total players:', gameRoom.players.length);
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        socket.emit('join-confirmed', {
            playerId: socket.id,
            playerName: playerName,
            isHost: player.isHost,
            maxPlayers: gameRoom.maxPlayers,
            players: gameRoom.players,
            gameState: gameRoom.gameState
        });
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ
        io.to('game-room').emit('player-joined', {
            players: gameRoom.players,
            maxPlayers: gameRoom.maxPlayers,
            gameState: gameRoom.gameState
        });
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø ===
    socket.on('disconnect', () => {
        console.log('‚ùå Player disconnected:', socket.id);
        
        const playerIndex = gameRoom.players.findIndex(p => p.id === socket.id);
        if (playerIndex !== -1) {
            const player = gameRoom.players[playerIndex];
            console.log('üëã Player left:', player.name);
            
            gameRoom.players.splice(playerIndex, 1);
            
            if (player.isHost && gameRoom.players.length > 0) {
                gameRoom.players[0].isHost = true;
                console.log('üëë New host:', gameRoom.players[0].name);
            }
            
            if (gameRoom.players.length === 0 || (gameRoom.gameState === 'playing' && gameRoom.players.length < 2)) {
                resetGame();
            } else {
                io.to('game-room').emit('player-left', {
                    players: gameRoom.players,
                    gameState: gameRoom.gameState
                });
            }
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê –ò–ì–†–û–ö–û–í ===
    socket.on('change-max-players', (data) => {
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã!');
            return;
        }
        
        const newMaxPlayers = parseInt(data.maxPlayers);
        if (newMaxPlayers < 2 || newMaxPlayers > 16) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        if (newMaxPlayers < gameRoom.players.length) {
            socket.emit('error', '–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        gameRoom.maxPlayers = newMaxPlayers;
        console.log('üîß Max players changed to:', newMaxPlayers);
        
        io.to('game-room').emit('max-players-changed', {
            maxPlayers: gameRoom.maxPlayers,
            players: gameRoom.players
        });
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–¢–ê–†–¢–ê –ò–ì–†–´ ===
    socket.on('start-game', () => {
        console.log('üéÆ Game start requested by:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!');
            return;
        }
        
        if (gameRoom.players.length < 2) {
            socket.emit('error', '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!');
            return;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        gameRoom.players.forEach(player => {
            player.characteristics = generateCharacteristics();
            player.actionCards = [getRandomActionCard()];
            player.hasRevealed = false;
            player.hasVoted = false;
            player.revealedCharacteristics = [];
            player.cardsRevealedThisRound = 0;
        });
        
        gameRoom.gameState = 'playing';
        gameRoom.gamePhase = 'preparation';
        gameRoom.currentRound = 1;
        gameRoom.timeLeft = 0;
        gameRoom.playersWhoRevealed = [];
        gameRoom.currentTurnPlayer = null;
        gameRoom.startRoundVotes = [];
        
        const randomStory = stories[Math.floor(Math.random() * stories.length)];
        
        console.log('üöÄ Game started! Players:', gameRoom.players.length);
        
        io.to('game-room').emit('game-started', {
            players: gameRoom.players,
            gameState: gameRoom.gameState,
            gamePhase: gameRoom.gamePhase,
            currentRound: gameRoom.currentRound,
            timeLeft: gameRoom.timeLeft,
            story: randomStory
        });
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–õ–û–°–û–í–ê–ù–ò–Ø –ó–ê –ù–ê–ß–ê–õ–û –†–ê–£–ù–î–ê ===
    socket.on('start-round', () => {
        console.log('üéØ Start round vote from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'preparation') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞!');
            return;
        }
        
        if (gameRoom.startRoundVotes.includes(socket.id)) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –Ω–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞!');
            return;
        }
        
        gameRoom.startRoundVotes.push(socket.id);
        
        const requiredVotes = 2;
        const currentVotes = gameRoom.startRoundVotes.length;
        
        console.log(`üéØ Start round votes: ${currentVotes}/${requiredVotes}`);
        
        gameRoom.players.forEach(p => {
            const hasVoted = gameRoom.startRoundVotes.includes(p.id);
            io.to(p.id).emit('start-round-vote-update', {
                votes: currentVotes,
                required: requiredVotes,
                hasVoted: hasVoted
            });
        });
        
        if (currentVotes >= requiredVotes) {
            console.log('üöÄ Starting round - enough votes');
            gameRoom.startRoundVotes = [];
            startRevelationPhase();
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –†–ê–°–ö–†–´–¢–ò–Ø –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö ===
    socket.on('reveal-characteristic', (data) => {
        console.log('üîç Reveal characteristic:', data);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'revelation') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫!');
            return;
        }
        
        if (gameRoom.currentTurnPlayer !== socket.id) {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!');
            return;
        }
        
        const characteristic = data.characteristic;
        
        if (!player.characteristics || !player.characteristics[characteristic]) {
            socket.emit('error', '–¢–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            return;
        }
        
        if (player.revealedCharacteristics && player.revealedCharacteristics.includes(characteristic)) {
            socket.emit('error', '–≠—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞!');
            return;
        }
        
        const requiredCards = getRequiredCardsForRound(gameRoom.currentRound);
        const currentlyRevealed = player.cardsRevealedThisRound || 0;
        
        if (currentlyRevealed >= requiredCards) {
            socket.emit('error', '–í—ã —É–∂–µ —Ä–∞—Å–∫—Ä—ã–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞—Ä—Ç—ã –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ!');
            return;
        }
        
        if (gameRoom.currentRound === 1) {
            if (currentlyRevealed === 0 && characteristic !== 'profession') {
                socket.emit('error', '–í –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é!');
                return;
            }
            
            if (currentlyRevealed === 1 && characteristic === 'profession') {
                socket.emit('error', '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É.');
                return;
            }
        }
        
        // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
        if (!player.revealedCharacteristics) {
            player.revealedCharacteristics = [];
        }
        
        player.revealedCharacteristics.push(characteristic);
        player.cardsRevealedThisRound = (player.cardsRevealedThisRound || 0) + 1;
        
        console.log(`üîç ${player.name} revealed ${characteristic}: ${player.characteristics[characteristic]}`);
        
        io.to('game-room').emit('characteristic-revealed', {
            playerId: player.id,
            playerName: player.name,
            characteristic: characteristic,
            value: player.characteristics[characteristic],
            players: gameRoom.players,
            cardsRevealedThisRound: player.cardsRevealedThisRound,
            requiredCards: requiredCards
        });
        
        if (player.cardsRevealedThisRound >= requiredCards) {
            player.hasRevealed = true;
            console.log(`‚úÖ ${player.name} completed revelation phase`);
            
            setTimeout(() => {
                nextPlayerTurn();
            }, 1500);
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–û–ü–£–°–ö–ê –û–ë–°–£–ñ–î–ï–ù–ò–Ø ===
    socket.on('vote-skip-discussion', () => {
        console.log('‚è≠Ô∏è Skip discussion vote from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'discussion') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ —Ñ–∞–∑–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è!');
            return;
        }
        
        if (gameRoom.skipDiscussionVotes.includes(socket.id)) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—è!');
            return;
        }
        
        gameRoom.skipDiscussionVotes.push(socket.id);
        
        const requiredVotes = 2;
        const currentVotes = gameRoom.skipDiscussionVotes.length;
        
        console.log(`‚è≠Ô∏è Skip discussion votes: ${currentVotes}/${requiredVotes}`);
        
        gameRoom.players.forEach(p => {
            const hasVoted = gameRoom.skipDiscussionVotes.includes(p.id);
            io.to(p.id).emit('skip-discussion-vote-update', {
                votes: currentVotes,
                required: requiredVotes,
                hasVoted: hasVoted
            });
        });
        
        if (currentVotes >= requiredVotes) {
            console.log('‚è≠Ô∏è Skipping discussion - enough votes');
            clearInterval(gameRoom.timer);
            gameRoom.timer = null;
            
            io.to('game-room').emit('discussion-skipped', {
                gamePhase: 'voting',
                timeLeft: 120,
                players: gameRoom.players
            });
            
            startVotingPhase();
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–õ–û–°–û–í–ê–ù–ò–Ø ===
    socket.on('vote-player', (data) => {
        console.log('üó≥Ô∏è Vote from:', socket.id, 'for:', data.targetId);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        const targetPlayer = gameRoom.players.find(p => p.id === data.targetId);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (!targetPlayer || !targetPlayer.isAlive) {
            socket.emit('error', '–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'voting') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
            return;
        }
        
        if (player.hasVoted) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!');
            return;
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å
        player.hasVoted = true;
        player.votedFor = data.targetId;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤ —É —Ü–µ–ª–∏
        targetPlayer.votes = (targetPlayer.votes || 0) + 1;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        if (!gameRoom.votingResults[data.targetId]) {
            gameRoom.votingResults[data.targetId] = [];
        }
        gameRoom.votingResults[data.targetId].push(socket.id);
        
        console.log(`üó≥Ô∏è ${player.name} voted for ${targetPlayer.name} (${targetPlayer.votes} votes)`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        io.to('game-room').emit('vote-update', {
            players: gameRoom.players,
            votingResults: gameRoom.votingResults,
            canChangeVote: gameRoom.canChangeVote
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        const votedPlayers = alivePlayers.filter(p => p.hasVoted);
        
        console.log(`üó≥Ô∏è Votes: ${votedPlayers.length}/${alivePlayers.length}`);
        
        if (votedPlayers.length === alivePlayers.length) {
            console.log('‚úÖ All players voted, processing results immediately');
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∏ —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if (gameRoom.timer) {
                clearInterval(gameRoom.timer);
                gameRoom.timer = null;
            }
            
            // –°—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            processVotingResults();
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–í–ï–†–®–ï–ù–ò–Ø –û–ü–†–ê–í–î–ê–ù–ò–Ø ===
    socket.on('finish-justification', () => {
        console.log('‚úÖ Finish justification from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || gameRoom.currentJustifyingPlayer !== socket.id) {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –æ–ø—Ä–∞–≤–¥—ã–≤–∞—Ç—å—Å—è!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'justification') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–π!');
            return;
        }
        
        nextJustification();
    });

    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–î–ê–ß–ò ===
    socket.on('surrender', () => {
        console.log('üè≥Ô∏è Surrender from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å—Å—è!');
            return;
        }
        
        player.isAlive = false;
        
        console.log(`üè≥Ô∏è ${player.name} surrendered`);
        
        io.to('game-room').emit('player-surrendered', {
            playerName: player.name,
            players: gameRoom.players
        });
        
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        if (alivePlayers.length <= 2) {
            endGame();
        } else if (gameRoom.gamePhase === 'justification') {
            nextJustification();
        }
    });
});

// === –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ===
// –§—É–Ω–∫—Ü–∏–∏ processVotingResults, showResults, nextRound –∏ —Ç.–¥. –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ü–û–°–õ–ï –±–ª–æ–∫–∞ io.on('connection')

// –¢–ê–ö–ñ–ï –ù–£–ñ–ù–û –ò–°–ü–†–ê–í–ò–¢–¨ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è - —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω
io.on('connection', (socket) => {
    console.log('üîó New connection:', socket.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
    socket.emit('player-count', { count: gameRoom.players.length });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–Ø –ö –ò–ì–†–ï ===
    socket.on('join-game', (data) => {
        console.log('üëã Player joining:', data.playerName, 'Socket:', socket.id);
        
        const playerName = data.playerName?.trim();
        
        if (!playerName || playerName.length < 2 || playerName.length > 20) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ñ–ò–í–´–• –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π socket
        const existingPlayer = gameRoom.players.find(p => 
            p.name.toLowerCase() === playerName.toLowerCase() && 
            p.id !== socket.id
        );
        
        if (existingPlayer) {
            console.log('‚ùå Name already taken:', playerName, 'by player:', existingPlayer.id);
            socket.emit('error', '–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å –≤ –∏–≥—Ä–µ');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤
        if (gameRoom.players.length >= gameRoom.maxPlayers) {
            socket.emit('error', '–ò–≥—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
            return;
        }
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –∂–µ socket.id –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const existingPlayerIndex = gameRoom.players.findIndex(p => p.id === socket.id);
        if (existingPlayerIndex !== -1) {
            console.log('üîÑ Removing previous player with same socket:', socket.id);
            gameRoom.players.splice(existingPlayerIndex, 1);
        }
        
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
        const player = {
            id: socket.id,
            name: playerName,
            isAlive: true,
            isHost: gameRoom.players.length === 0,
            votes: 0,
            hasVoted: false,
            votedFor: null,
            hasRevealed: false,
            cardsRevealedThisRound: 0,
            revealedCharacteristics: [],
            characteristics: null,
            actionCards: []
        };
        
        gameRoom.players.push(player);
        socket.join('game-room');
        
        console.log('‚úÖ Player joined:', playerName, 'Total players:', gameRoom.players.length);
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        socket.emit('join-confirmed', {
            playerId: socket.id,
            playerName: playerName,
            isHost: player.isHost,
            maxPlayers: gameRoom.maxPlayers,
            players: gameRoom.players,
            gameState: gameRoom.gameState
        });
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ
        io.to('game-room').emit('player-joined', {
            players: gameRoom.players,
            maxPlayers: gameRoom.maxPlayers,
            gameState: gameRoom.gameState
        });
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø ===
    socket.on('disconnect', () => {
        console.log('‚ùå Player disconnected:', socket.id);
        
        const playerIndex = gameRoom.players.findIndex(p => p.id === socket.id);
        if (playerIndex !== -1) {
            const player = gameRoom.players[playerIndex];
            console.log('üëã Player left:', player.name);
            
            gameRoom.players.splice(playerIndex, 1);
            
            if (player.isHost && gameRoom.players.length > 0) {
                gameRoom.players[0].isHost = true;
                console.log('üëë New host:', gameRoom.players[0].name);
            }
            
            if (gameRoom.players.length === 0 || (gameRoom.gameState === 'playing' && gameRoom.players.length < 2)) {
                resetGame();
            } else {
                io.to('game-room').emit('player-left', {
                    players: gameRoom.players,
                    gameState: gameRoom.gameState
                });
            }
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê –ò–ì–†–û–ö–û–í ===
    socket.on('change-max-players', (data) => {
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã!');
            return;
        }
        
        const newMaxPlayers = parseInt(data.maxPlayers);
        if (newMaxPlayers < 2 || newMaxPlayers > 16) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        if (newMaxPlayers < gameRoom.players.length) {
            socket.emit('error', '–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        gameRoom.maxPlayers = newMaxPlayers;
        console.log('üîß Max players changed to:', newMaxPlayers);
        
        io.to('game-room').emit('max-players-changed', {
            maxPlayers: gameRoom.maxPlayers,
            players: gameRoom.players
        });
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–¢–ê–†–¢–ê –ò–ì–†–´ ===
    socket.on('start-game', () => {
        console.log('üéÆ Game start requested by:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!');
            return;
        }
        
        if (gameRoom.players.length < 2) {
            socket.emit('error', '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!');
            return;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        gameRoom.players.forEach(player => {
            player.characteristics = generateCharacteristics();
            player.actionCards = [getRandomActionCard()];
            player.hasRevealed = false;
            player.hasVoted = false;
            player.revealedCharacteristics = [];
            player.cardsRevealedThisRound = 0;
        });
        
        gameRoom.gameState = 'playing';
        gameRoom.gamePhase = 'preparation';
        gameRoom.currentRound = 1;
        gameRoom.timeLeft = 0;
        gameRoom.playersWhoRevealed = [];
        gameRoom.currentTurnPlayer = null;
        gameRoom.startRoundVotes = [];
        
        const randomStory = stories[Math.floor(Math.random() * stories.length)];
        
        console.log('üöÄ Game started! Players:', gameRoom.players.length);
        
        io.to('game-room').emit('game-started', {
            players: gameRoom.players,
            gameState: gameRoom.gameState,
            gamePhase: gameRoom.gamePhase,
            currentRound: gameRoom.currentRound,
            timeLeft: gameRoom.timeLeft,
            story: randomStory
        });
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–õ–û–°–û–í–ê–ù–ò–Ø –ó–ê –ù–ê–ß–ê–õ–û –†–ê–£–ù–î–ê ===
    socket.on('start-round', () => {
        console.log('üéØ Start round vote from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'preparation') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞!');
            return;
        }
        
        if (gameRoom.startRoundVotes.includes(socket.id)) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –Ω–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞!');
            return;
        }
        
        gameRoom.startRoundVotes.push(socket.id);
        
        const requiredVotes = 2;
        const currentVotes = gameRoom.startRoundVotes.length;
        
        console.log(`üéØ Start round votes: ${currentVotes}/${requiredVotes}`);
        
        gameRoom.players.forEach(p => {
            const hasVoted = gameRoom.startRoundVotes.includes(p.id);
            io.to(p.id).emit('start-round-vote-update', {
                votes: currentVotes,
                required: requiredVotes,
                hasVoted: hasVoted
            });
        });
        
        if (currentVotes >= requiredVotes) {
            console.log('üöÄ Starting round - enough votes');
            gameRoom.startRoundVotes = [];
            startRevelationPhase();
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –†–ê–°–ö–†–´–¢–ò–Ø –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö ===
    socket.on('reveal-characteristic', (data) => {
        console.log('üîç Reveal characteristic:', data);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'revelation') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫!');
            return;
        }
        
        if (gameRoom.currentTurnPlayer !== socket.id) {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!');
            return;
        }
        
        const characteristic = data.characteristic;
        
        if (!player.characteristics || !player.characteristics[characteristic]) {
            socket.emit('error', '–¢–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            return;
        }
        
        if (player.revealedCharacteristics && player.revealedCharacteristics.includes(characteristic)) {
            socket.emit('error', '–≠—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞!');
            return;
        }
        
        const requiredCards = getRequiredCardsForRound(gameRoom.currentRound);
        const currentlyRevealed = player.cardsRevealedThisRound || 0;
        
        if (currentlyRevealed >= requiredCards) {
            socket.emit('error', '–í—ã —É–∂–µ —Ä–∞—Å–∫—Ä—ã–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞—Ä—Ç—ã –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ!');
            return;
        }
        
        if (gameRoom.currentRound === 1) {
            if (currentlyRevealed === 0 && characteristic !== 'profession') {
                socket.emit('error', '–í –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é!');
                return;
            }
            
            if (currentlyRevealed === 1 && characteristic === 'profession') {
                socket.emit('error', '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É.');
                return;
            }
        }
        
        // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
        if (!player.revealedCharacteristics) {
            player.revealedCharacteristics = [];
        }
        
        player.revealedCharacteristics.push(characteristic);
        player.cardsRevealedThisRound = (player.cardsRevealedThisRound || 0) + 1;
        
        console.log(`üîç ${player.name} revealed ${characteristic}: ${player.characteristics[characteristic]}`);
        
        io.to('game-room').emit('characteristic-revealed', {
            playerId: player.id,
            playerName: player.name,
            characteristic: characteristic,
            value: player.characteristics[characteristic],
            players: gameRoom.players,
            cardsRevealedThisRound: player.cardsRevealedThisRound,
            requiredCards: requiredCards
        });
        
        if (player.cardsRevealedThisRound >= requiredCards) {
            player.hasRevealed = true;
            console.log(`‚úÖ ${player.name} completed revelation phase`);
            
            setTimeout(() => {
                nextPlayerTurn();
            }, 1500);
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–û–ü–£–°–ö–ê –û–ë–°–£–ñ–î–ï–ù–ò–Ø ===
    socket.on('vote-skip-discussion', () => {
        console.log('‚è≠Ô∏è Skip discussion vote from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'discussion') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ —Ñ–∞–∑–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è!');
            return;
        }
        
        if (gameRoom.skipDiscussionVotes.includes(socket.id)) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—è!');
            return;
        }
        
        gameRoom.skipDiscussionVotes.push(socket.id);
        
        const requiredVotes = 2;
        const currentVotes = gameRoom.skipDiscussionVotes.length;
        
        console.log(`‚è≠Ô∏è Skip discussion votes: ${currentVotes}/${requiredVotes}`);
        
        gameRoom.players.forEach(p => {
            const hasVoted = gameRoom.skipDiscussionVotes.includes(p.id);
            io.to(p.id).emit('skip-discussion-vote-update', {
                votes: currentVotes,
                required: requiredVotes,
                hasVoted: hasVoted
            });
        });
        
        if (currentVotes >= requiredVotes) {
            console.log('‚è≠Ô∏è Skipping discussion - enough votes');
            clearInterval(gameRoom.timer);
            gameRoom.timer = null;
            
            io.to('game-room').emit('discussion-skipped', {
                gamePhase: 'voting',
                timeLeft: 120,
                players: gameRoom.players
            });
            
            startVotingPhase();
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–õ–û–°–û–í–ê–ù–ò–Ø ===
    socket.on('vote-player', (data) => {
        console.log('üó≥Ô∏è Vote from:', socket.id, 'for:', data.targetId);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        const targetPlayer = gameRoom.players.find(p => p.id === data.targetId);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (!targetPlayer || !targetPlayer.isAlive) {
            socket.emit('error', '–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'voting') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
            return;
        }
        
        if (player.hasVoted) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!');
            return;
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å
        player.hasVoted = true;
        player.votedFor = data.targetId;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤ —É —Ü–µ–ª–∏
        targetPlayer.votes = (targetPlayer.votes || 0) + 1;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        if (!gameRoom.votingResults[data.targetId]) {
            gameRoom.votingResults[data.targetId] = [];
        }
        gameRoom.votingResults[data.targetId].push(socket.id);
        
        console.log(`üó≥Ô∏è ${player.name} voted for ${targetPlayer.name} (${targetPlayer.votes} votes)`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        io.to('game-room').emit('vote-update', {
            players: gameRoom.players,
            votingResults: gameRoom.votingResults,
            canChangeVote: gameRoom.canChangeVote
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        const votedPlayers = alivePlayers.filter(p => p.hasVoted);
        
        console.log(`üó≥Ô∏è Votes: ${votedPlayers.length}/${alivePlayers.length}`);
        
        if (votedPlayers.length === alivePlayers.length) {
            console.log('‚úÖ All players voted, processing results immediately');
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∏ —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if (gameRoom.timer) {
                clearInterval(gameRoom.timer);
                gameRoom.timer = null;
            }
            
            // –°—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            processVotingResults();
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–í–ï–†–®–ï–ù–ò–Ø –û–ü–†–ê–í–î–ê–ù–ò–Ø ===
    socket.on('finish-justification', () => {
        console.log('‚úÖ Finish justification from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || gameRoom.currentJustifyingPlayer !== socket.id) {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –æ–ø—Ä–∞–≤–¥—ã–≤–∞—Ç—å—Å—è!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'justification') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–π!');
            return;
        }
        
        nextJustification();
    });

    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–î–ê–ß–ò ===
    socket.on('surrender', () => {
        console.log('üè≥Ô∏è Surrender from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å—Å—è!');
            return;
        }
        
        player.isAlive = false;
        
        console.log(`üè≥Ô∏è ${player.name} surrendered`);
        
        io.to('game-room').emit('player-surrendered', {
            playerName: player.name,
            players: gameRoom.players
        });
        
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        if (alivePlayers.length <= 2) {
            endGame();
        } else if (gameRoom.gamePhase === 'justification') {
            nextJustification();
        }
    });
});

// === –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ===
// –§—É–Ω–∫—Ü–∏–∏ processVotingResults, showResults, nextRound –∏ —Ç.–¥. –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ü–û–°–õ–ï –±–ª–æ–∫–∞ io.on('connection')

// –¢–ê–ö–ñ–ï –ù–£–ñ–ù–û –ò–°–ü–†–ê–í–ò–¢–¨ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è - —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω
io.on('connection', (socket) => {
    console.log('üîó New connection:', socket.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
    socket.emit('player-count', { count: gameRoom.players.length });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–Ø –ö –ò–ì–†–ï ===
    socket.on('join-game', (data) => {
        console.log('üëã Player joining:', data.playerName, 'Socket:', socket.id);
        
        const playerName = data.playerName?.trim();
        
        if (!playerName || playerName.length < 2 || playerName.length > 20) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ñ–ò–í–´–• –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π socket
        const existingPlayer = gameRoom.players.find(p => 
            p.name.toLowerCase() === playerName.toLowerCase() && 
            p.id !== socket.id
        );
        
        if (existingPlayer) {
            console.log('‚ùå Name already taken:', playerName, 'by player:', existingPlayer.id);
            socket.emit('error', '–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å –≤ –∏–≥—Ä–µ');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤
        if (gameRoom.players.length >= gameRoom.maxPlayers) {
            socket.emit('error', '–ò–≥—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
            return;
        }
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –∂–µ socket.id –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const existingPlayerIndex = gameRoom.players.findIndex(p => p.id === socket.id);
        if (existingPlayerIndex !== -1) {
            console.log('üîÑ Removing previous player with same socket:', socket.id);
            gameRoom.players.splice(existingPlayerIndex, 1);
        }
        
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
        const player = {
            id: socket.id,
            name: playerName,
            isAlive: true,
            isHost: gameRoom.players.length === 0,
            votes: 0,
            hasVoted: false,
            votedFor: null,
            hasRevealed: false,
            cardsRevealedThisRound: 0,
            revealedCharacteristics: [],
            characteristics: null,
            actionCards: []
        };
        
        gameRoom.players.push(player);
        socket.join('game-room');
        
        console.log('‚úÖ Player joined:', playerName, 'Total players:', gameRoom.players.length);
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        socket.emit('join-confirmed', {
            playerId: socket.id,
            playerName: playerName,
            isHost: player.isHost,
            maxPlayers: gameRoom.maxPlayers,
            players: gameRoom.players,
            gameState: gameRoom.gameState
        });
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ
        io.to('game-room').emit('player-joined', {
            players: gameRoom.players,
            maxPlayers: gameRoom.maxPlayers,
            gameState: gameRoom.gameState
        });
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø ===
    socket.on('disconnect', () => {
        console.log('‚ùå Player disconnected:', socket.id);
        
        const playerIndex = gameRoom.players.findIndex(p => p.id === socket.id);
        if (playerIndex !== -1) {
            const player = gameRoom.players[playerIndex];
            console.log('üëã Player left:', player.name);
            
            gameRoom.players.splice(playerIndex, 1);
            
            if (player.isHost && gameRoom.players.length > 0) {
                gameRoom.players[0].isHost = true;
                console.log('üëë New host:', gameRoom.players[0].name);
            }
            
            if (gameRoom.players.length === 0 || (gameRoom.gameState === 'playing' && gameRoom.players.length < 2)) {
                resetGame();
            } else {
                io.to('game-room').emit('player-left', {
                    players: gameRoom.players,
                    gameState: gameRoom.gameState
                });
            }
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê –ò–ì–†–û–ö–û–í ===
    socket.on('change-max-players', (data) => {
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã!');
            return;
        }
        
        const newMaxPlayers = parseInt(data.maxPlayers);
        if (newMaxPlayers < 2 || newMaxPlayers > 16) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        if (newMaxPlayers < gameRoom.players.length) {
            socket.emit('error', '–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        gameRoom.maxPlayers = newMaxPlayers;
        console.log('üîß Max players changed to:', newMaxPlayers);
        
        io.to('game-room').emit('max-players-changed', {
            maxPlayers: gameRoom.maxPlayers,
            players: gameRoom.players
        });
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–¢–ê–†–¢–ê –ò–ì–†–´ ===
    socket.on('start-game', () => {
        console.log('üéÆ Game start requested by:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!');
            return;
        }
        
        if (gameRoom.players.length < 2) {
            socket.emit('error', '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!');
            return;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        gameRoom.players.forEach(player => {
            player.characteristics = generateCharacteristics();
            player.actionCards = [getRandomActionCard()];
            player.hasRevealed = false;
            player.hasVoted = false;
            player.revealedCharacteristics = [];
            player.cardsRevealedThisRound = 0;
        });
        
        gameRoom.gameState = 'playing';
        gameRoom.gamePhase = 'preparation';
        gameRoom.currentRound = 1;
        gameRoom.timeLeft = 0;
        gameRoom.playersWhoRevealed = [];
        gameRoom.currentTurnPlayer = null;
        gameRoom.startRoundVotes = [];
        
        const randomStory = stories[Math.floor(Math.random() * stories.length)];
        
        console.log('üöÄ Game started! Players:', gameRoom.players.length);
        
        io.to('game-room').emit('game-started', {
            players: gameRoom.players,
            gameState: gameRoom.gameState,
            gamePhase: gameRoom.gamePhase,
            currentRound: gameRoom.currentRound,
            timeLeft: gameRoom.timeLeft,
            story: randomStory
        });
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–õ–û–°–û–í–ê–ù–ò–Ø –ó–ê –ù–ê–ß–ê–õ–û –†–ê–£–ù–î–ê ===
    socket.on('start-round', () => {
        console.log('üéØ Start round vote from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'preparation') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞!');
            return;
        }
        
        if (gameRoom.startRoundVotes.includes(socket.id)) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –Ω–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞!');
            return;
        }
        
        gameRoom.startRoundVotes.push(socket.id);
        
        const requiredVotes = 2;
        const currentVotes = gameRoom.startRoundVotes.length;
        
        console.log(`üéØ Start round votes: ${currentVotes}/${requiredVotes}`);
        
        gameRoom.players.forEach(p => {
            const hasVoted = gameRoom.startRoundVotes.includes(p.id);
            io.to(p.id).emit('start-round-vote-update', {
                votes: currentVotes,
                required: requiredVotes,
                hasVoted: hasVoted
            });
        });
        
        if (currentVotes >= requiredVotes) {
            console.log('üöÄ Starting round - enough votes');
            gameRoom.startRoundVotes = [];
            startRevelationPhase();
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –†–ê–°–ö–†–´–¢–ò–Ø –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö ===
    socket.on('reveal-characteristic', (data) => {
        console.log('üîç Reveal characteristic:', data);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'revelation') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫!');
            return;
        }
        
        if (gameRoom.currentTurnPlayer !== socket.id) {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!');
            return;
        }
        
        const characteristic = data.characteristic;
        
        if (!player.characteristics || !player.characteristics[characteristic]) {
            socket.emit('error', '–¢–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            return;
        }
        
        if (player.revealedCharacteristics && player.revealedCharacteristics.includes(characteristic)) {
            socket.emit('error', '–≠—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞!');
            return;
        }
        
        const requiredCards = getRequiredCardsForRound(gameRoom.currentRound);
        const currentlyRevealed = player.cardsRevealedThisRound || 0;
        
        if (currentlyRevealed >= requiredCards) {
            socket.emit('error', '–í—ã —É–∂–µ —Ä–∞—Å–∫—Ä—ã–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞—Ä—Ç—ã –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ!');
            return;
        }
        
        if (gameRoom.currentRound === 1) {
            if (currentlyRevealed === 0 && characteristic !== 'profession') {
                socket.emit('error', '–í –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é!');
                return;
            }
            
            if (currentlyRevealed === 1 && characteristic === 'profession') {
                socket.emit('error', '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É.');
                return;
            }
        }
        
        // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
        if (!player.revealedCharacteristics) {
            player.revealedCharacteristics = [];
        }
        
        player.revealedCharacteristics.push(characteristic);
        player.cardsRevealedThisRound = (player.cardsRevealedThisRound || 0) + 1;
        
        console.log(`üîç ${player.name} revealed ${characteristic}: ${player.characteristics[characteristic]}`);
        
        io.to('game-room').emit('characteristic-revealed', {
            playerId: player.id,
            playerName: player.name,
            characteristic: characteristic,
            value: player.characteristics[characteristic],
            players: gameRoom.players,
            cardsRevealedThisRound: player.cardsRevealedThisRound,
            requiredCards: requiredCards
        });
        
        if (player.cardsRevealedThisRound >= requiredCards) {
            player.hasRevealed = true;
            console.log(`‚úÖ ${player.name} completed revelation phase`);
            
            setTimeout(() => {
                nextPlayerTurn();
            }, 1500);
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–û–ü–£–°–ö–ê –û–ë–°–£–ñ–î–ï–ù–ò–Ø ===
    socket.on('vote-skip-discussion', () => {
        console.log('‚è≠Ô∏è Skip discussion vote from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'discussion') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ —Ñ–∞–∑–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è!');
            return;
        }
        
        if (gameRoom.skipDiscussionVotes.includes(socket.id)) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—è!');
            return;
        }
        
        gameRoom.skipDiscussionVotes.push(socket.id);
        
        const requiredVotes = 2;
        const currentVotes = gameRoom.skipDiscussionVotes.length;
        
        console.log(`‚è≠Ô∏è Skip discussion votes: ${currentVotes}/${requiredVotes}`);
        
        gameRoom.players.forEach(p => {
            const hasVoted = gameRoom.skipDiscussionVotes.includes(p.id);
            io.to(p.id).emit('skip-discussion-vote-update', {
                votes: currentVotes,
                required: requiredVotes,
                hasVoted: hasVoted
            });
        });
        
        if (currentVotes >= requiredVotes) {
            console.log('‚è≠Ô∏è Skipping discussion - enough votes');
            clearInterval(gameRoom.timer);
            gameRoom.timer = null;
            
            io.to('game-room').emit('discussion-skipped', {
                gamePhase: 'voting',
                timeLeft: 120,
                players: gameRoom.players
            });
            
            startVotingPhase();
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–õ–û–°–û–í–ê–ù–ò–Ø ===
    socket.on('vote-player', (data) => {
        console.log('üó≥Ô∏è Vote from:', socket.id, 'for:', data.targetId);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        const targetPlayer = gameRoom.players.find(p => p.id === data.targetId);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (!targetPlayer || !targetPlayer.isAlive) {
            socket.emit('error', '–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'voting') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
            return;
        }
        
        if (player.hasVoted) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!');
            return;
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å
        player.hasVoted = true;
        player.votedFor = data.targetId;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤ —É —Ü–µ–ª–∏
        targetPlayer.votes = (targetPlayer.votes || 0) + 1;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        if (!gameRoom.votingResults[data.targetId]) {
            gameRoom.votingResults[data.targetId] = [];
        }
        gameRoom.votingResults[data.targetId].push(socket.id);
        
        console.log(`üó≥Ô∏è ${player.name} voted for ${targetPlayer.name} (${targetPlayer.votes} votes)`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        io.to('game-room').emit('vote-update', {
            players: gameRoom.players,
            votingResults: gameRoom.votingResults,
            canChangeVote: gameRoom.canChangeVote
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        const votedPlayers = alivePlayers.filter(p => p.hasVoted);
        
        console.log(`üó≥Ô∏è Votes: ${votedPlayers.length}/${alivePlayers.length}`);
        
        if (votedPlayers.length === alivePlayers.length) {
            console.log('‚úÖ All players voted, processing results immediately');
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∏ —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if (gameRoom.timer) {
                clearInterval(gameRoom.timer);
                gameRoom.timer = null;
            }
            
            // –°—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            processVotingResults();
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–í–ï–†–®–ï–ù–ò–Ø –û–ü–†–ê–í–î–ê–ù–ò–Ø ===
    socket.on('finish-justification', () => {
        console.log('‚úÖ Finish justification from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || gameRoom.currentJustifyingPlayer !== socket.id) {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –æ–ø—Ä–∞–≤–¥—ã–≤–∞—Ç—å—Å—è!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'justification') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–π!');
            return;
        }
        
        nextJustification();
    });

    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–î–ê–ß–ò ===
    socket.on('surrender', () => {
        console.log('üè≥Ô∏è Surrender from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å—Å—è!');
            return;
        }
        
        player.isAlive = false;
        
        console.log(`üè≥Ô∏è ${player.name} surrendered`);
        
        io.to('game-room').emit('player-surrendered', {
            playerName: player.name,
            players: gameRoom.players
        });
        
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        if (alivePlayers.length <= 2) {
            endGame();
        } else if (gameRoom.gamePhase === 'justification') {
            nextJustification();
        }
    });
});

// === –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ===
// –§—É–Ω–∫—Ü–∏–∏ processVotingResults, showResults, nextRound –∏ —Ç.–¥. –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ü–û–°–õ–ï –±–ª–æ–∫–∞ io.on('connection')

// –¢–ê–ö–ñ–ï –ù–£–ñ–ù–û –ò–°–ü–†–ê–í–ò–¢–¨ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è - —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω
io.on('connection', (socket) => {
    console.log('üîó New connection:', socket.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
    socket.emit('player-count', { count: gameRoom.players.length });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–Ø –ö –ò–ì–†–ï ===
    socket.on('join-game', (data) => {
        console.log('üëã Player joining:', data.playerName, 'Socket:', socket.id);
        
        const playerName = data.playerName?.trim();
        
        if (!playerName || playerName.length < 2 || playerName.length > 20) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ñ–ò–í–´–• –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π socket
        const existingPlayer = gameRoom.players.find(p => 
            p.name.toLowerCase() === playerName.toLowerCase() && 
            p.id !== socket.id
        );
        
        if (existingPlayer) {
            console.log('‚ùå Name already taken:', playerName, 'by player:', existingPlayer.id);
            socket.emit('error', '–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å –≤ –∏–≥—Ä–µ');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤
        if (gameRoom.players.length >= gameRoom.maxPlayers) {
            socket.emit('error', '–ò–≥—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
            return;
        }
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –∂–µ socket.id –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const existingPlayerIndex = gameRoom.players.findIndex(p => p.id === socket.id);
        if (existingPlayerIndex !== -1) {
            console.log('üîÑ Removing previous player with same socket:', socket.id);
            gameRoom.players.splice(existingPlayerIndex, 1);
        }
        
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
        const player = {
            id: socket.id,
            name: playerName,
            isAlive: true,
            isHost: gameRoom.players.length === 0,
            votes: 0,
            hasVoted: false,
            votedFor: null,
            hasRevealed: false,
            cardsRevealedThisRound: 0,
            revealedCharacteristics: [],
            characteristics: null,
            actionCards: []
        };
        
        gameRoom.players.push(player);
        socket.join('game-room');
        
        console.log('‚úÖ Player joined:', playerName, 'Total players:', gameRoom.players.length);
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        socket.emit('join-confirmed', {
            playerId: socket.id,
            playerName: playerName,
            isHost: player.isHost,
            maxPlayers: gameRoom.maxPlayers,
            players: gameRoom.players,
            gameState: gameRoom.gameState
        });
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ
        io.to('game-room').emit('player-joined', {
            players: gameRoom.players,
            maxPlayers: gameRoom.maxPlayers,
            gameState: gameRoom.gameState
        });
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø ===
    socket.on('disconnect', () => {
        console.log('‚ùå Player disconnected:', socket.id);
        
        const playerIndex = gameRoom.players.findIndex(p => p.id === socket.id);
        if (playerIndex !== -1) {
            const player = gameRoom.players[playerIndex];
            console.log('üëã Player left:', player.name);
            
            gameRoom.players.splice(playerIndex, 1);
            
            if (player.isHost && gameRoom.players.length > 0) {
                gameRoom.players[0].isHost = true;
                console.log('üëë New host:', gameRoom.players[0].name);
            }
            
            if (gameRoom.players.length === 0 || (gameRoom.gameState === 'playing' && gameRoom.players.length < 2)) {
                resetGame();
            } else {
                io.to('game-room').emit('player-left', {
                    players: gameRoom.players,
                    gameState: gameRoom.gameState
                });
            }
        }
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê –ò–ì–†–û–ö–û–í ===
    socket.on('change-max-players', (data) => {
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã!');
            return;
        }
        
        const newMaxPlayers = parseInt(data.maxPlayers);
        if (newMaxPlayers < 2 || newMaxPlayers > 16) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        if (newMaxPlayers < gameRoom.players.length) {
            socket.emit('error', '–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        gameRoom.maxPlayers = newMaxPlayers;
        console.log('üîß Max players changed to:', newMaxPlayers);
        
        io.to('game-room').emit('max-players-changed', {
            maxPlayers: gameRoom.maxPlayers,
            players: gameRoom.players
        });
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–¢–ê–†–¢–ê –ò–ì–†–´ ===
    socket.on('start-game', () => {
        console.log('üéÆ Game start requested by:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!');
            return;
        }
        
        if (gameRoom.players.length < 2) {
            socket.emit('error', '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!');
            return;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        gameRoom.players.forEach(player => {
            player.characteristics = generateCharacteristics();
            player.actionCards = [getRandomActionCard()];
            player.hasRevealed = false;
            player.hasVoted = false;
            player.revealedCharacteristics = [];
            player.cardsRevealedThisRound = 0;
        });
        
        gameRoom.gameState = 'playing';
        gameRoom.gamePhase = 'preparation';
        gameRoom.currentRound = 1;
        gameRoom.timeLeft = 0;
        gameRoom.playersWhoRevealed = [];
        gameRoom.currentTurnPlayer = null;
        gameRoom.startRoundVotes = [];
        
        const randomStory = stories[Math.floor(Math.random() * stories.length)];
        
        console.log('üöÄ Game started! Players:', gameRoom.players.length);
        
        io.to('game-room').emit('game-started', {
            players: gameRoom.players,
            gameState: gameRoom.gameState,
            gamePhase: gameRoom.gamePhase,
            currentRound: gameRoom.currentRound,
            timeLeft: gameRoom.timeLeft,
            story: randomStory
        });
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–õ–û–°–û–í–ê–ù–ò–Ø –ó–ê –ù–ê–ß–ê–õ–û –†–ê–£–ù–î–ê ===
    socket.on('start-round', () => {
        console.log('üéØ Start round vote from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'preparation') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞!');
            return;
        }
        
        if (gameRoom.startRoundVotes.includes(socket.id)) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –Ω–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞!');
            return;
        }
        
        gameRoom.startRoundVotes.push(socket.id);
        