const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');

console.log('üöÄ Starting Single Room Bunker Game Server...');

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(__dirname));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    console.log('üìÑ Serving main page');
    res.sendFile(path.join(__dirname, 'index.html'));
});

// API –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        players: gameRoom.players.length,
        gameState: gameRoom.gameState,
        connections: io.engine.clientsCount
    });
});

// –ï–¥–∏–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ –¥–ª—è –≤—Å–µ—Ö
const gameRoom = {
    players: [],
    gameState: 'lobby', // lobby, playing, finished
    maxPlayers: 12,
    gamePhase: 'waiting', // waiting, preparation, revelation, discussion, voting, results
    currentRound: 1,
    maxRounds: 3,
    timer: null,
    timeLeft: 0,
    votingResults: {},
    revealedThisRound: 0,
    currentTurnPlayer: null, // –î–ª—è —Ñ–∞–∑—ã —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
    playersWhoRevealed: [], // –ö—Ç–æ —É–∂–µ —Ä–∞—Å–∫—Ä—ã–ª –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ
    totalVotes: 0 // –î–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
};

// Socket.IO –ª–æ–≥–∏–∫–∞
io.on('connection', (socket) => {
    console.log('‚úÖ User connected:', socket.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –Ω–æ–≤–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é
    socket.emit('room-state', {
        players: gameRoom.players,
        gameState: gameRoom.gameState,
        gamePhase: gameRoom.gamePhase,
        currentRound: gameRoom.currentRound,
        timeLeft: gameRoom.timeLeft,
        currentTurnPlayer: gameRoom.currentTurnPlayer
    });
    
    socket.on('join-game', (data) => {
        console.log('üéØ Player joining:', data.playerName);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤
        if (gameRoom.players.length >= gameRoom.maxPlayers) {
            socket.emit('error', '–ò–≥—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤: ' + gameRoom.maxPlayers);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–æ –ª–∏ –∏–º—è
        const existingPlayer = gameRoom.players.find(p => p.name === data.playerName);
        if (existingPlayer) {
            socket.emit('error', '–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –≤ –∏–≥—Ä–µ! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.');
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
        const newPlayer = {
            id: socket.id,
            name: data.playerName,
            isHost: gameRoom.players.length === 0, // –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ö–æ—Å—Ç–æ–º
            joinedAt: new Date(),
            isAlive: true,
            votes: 0,
            hasRevealed: false,
            revealedCharacteristics: [], // –î–û–ë–ê–í–ò–õ–ò –º–∞—Å—Å–∏–≤ —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            characteristics: null, // –ë—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã
            actionCards: [],
            hasVoted: false // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        };
        
        gameRoom.players.push(newPlayer);
        socket.join('game-room');
        
        console.log('‚úÖ Player joined:', data.playerName, 'Total players:', gameRoom.players.length);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
        io.to('game-room').emit('player-joined', {
            players: gameRoom.players,
            newPlayer: data.playerName,
            gameState: gameRoom.gameState,
            maxPlayers: gameRoom.maxPlayers
        });
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        socket.emit('join-confirmed', {
            playerId: socket.id,
            playerName: data.playerName,
            isHost: newPlayer.isHost,
            maxPlayers: gameRoom.maxPlayers
        });
    });
    
    socket.on('start-game', () => {
        console.log('üéÆ Game start requested by:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!');
            return;
        }
        
        if (gameRoom.players.length < 2) {
            socket.emit('error', '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!');
            return;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        gameRoom.players.forEach(player => {
            player.characteristics = generateCharacteristics();
            player.actionCards = [getRandomActionCard()];
            player.hasRevealed = false;
            player.hasVoted = false;
            player.revealedCharacteristics = []; // –î–û–ë–ê–í–ò–õ–ò —Å–±—Ä–æ—Å —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        });
        
        gameRoom.gameState = 'playing';
        gameRoom.gamePhase = 'preparation';
        gameRoom.currentRound = 1;
        gameRoom.timeLeft = 0; // –¢–∞–π–º–µ—Ä –Ω–µ –∏–¥–µ—Ç –≤ —Ñ–∞–∑–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
        gameRoom.playersWhoRevealed = [];
        gameRoom.currentTurnPlayer = null;
        
        console.log('üöÄ Game started! Players:', gameRoom.players.length);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
        io.to('game-room').emit('game-started', {
            players: gameRoom.players,
            gameState: gameRoom.gameState,
            gamePhase: gameRoom.gamePhase,
            currentRound: gameRoom.currentRound,
            timeLeft: gameRoom.timeLeft
        });
    });
    
    // –ù–û–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞
    socket.on('start-round', () => {
        console.log('üéØ Round start requested by:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'preparation') {
            socket.emit('error', '–†–∞—É–Ω–¥ —É–∂–µ –Ω–∞—á–∞–ª—Å—è!');
            return;
        }
        
        startRevelationPhase();
    });
    
    socket.on('vote-player', (data) => {
        console.log('üó≥Ô∏è Vote from:', socket.id, 'for:', data.targetId);
        
        if (gameRoom.gamePhase !== 'voting') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
            return;
        }
        
        const voter = gameRoom.players.find(p => p.id === socket.id);
        const target = gameRoom.players.find(p => p.id === data.targetId);
        
        if (!voter || !target || !voter.isAlive || !target.isAlive) {
            socket.emit('error', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!');
            return;
        }
        
        if (voter.hasVoted) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!');
            return;
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å
        if (!gameRoom.votingResults[data.targetId]) {
            gameRoom.votingResults[data.targetId] = [];
        }
        
        gameRoom.votingResults[data.targetId].push(voter.id);
        voter.hasVoted = true;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤
        gameRoom.players.forEach(player => {
            player.votes = gameRoom.votingResults[player.id] ? gameRoom.votingResults[player.id].length : 0;
        });
        
        // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        const votedPlayers = alivePlayers.filter(p => p.hasVoted);
        
        console.log(`üìä Votes: ${votedPlayers.length}/${alivePlayers.length}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        io.to('game-room').emit('vote-update', {
            players: gameRoom.players,
            votingResults: gameRoom.votingResults,
            votedCount: votedPlayers.length,
            totalPlayers: alivePlayers.length
        });
        
        // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ - –∑–∞–≤–µ—Ä—à–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ä–æ—á–Ω–æ
        if (votedPlayers.length >= alivePlayers.length) {
            console.log('‚úÖ All players voted - ending voting phase early');
            clearInterval(gameRoom.timer);
            showResults();
        }
    });
    
    socket.on('reveal-characteristic', (data) => {
        console.log('üîç Reveal characteristic:', data);
        
        if (gameRoom.gamePhase !== 'revelation') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫!');
            return;
        }
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞—Å–∫—Ä—ã—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É!');
            return;
        }
        
        if (gameRoom.currentTurnPlayer !== player.id) {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!');
            return;
        }
        
        if (player.hasRevealed) {
            socket.emit('error', '–í—ã —É–∂–µ —Ä–∞—Å–∫—Ä—ã–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –≤ —ç—Ç–æ–º —Ö–æ–¥—É!');
            return;
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö
        if (!player.revealedCharacteristics) {
            player.revealedCharacteristics = [];
        }
        player.revealedCharacteristics.push(data.characteristic);
        player.hasRevealed = true;
        gameRoom.playersWhoRevealed.push(player.id);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
        io.to('game-room').emit('characteristic-revealed', {
            playerId: player.id,
            playerName: player.name,
            characteristic: data.characteristic,
            value: player.characteristics[data.characteristic],
            players: gameRoom.players
        });
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
        clearInterval(gameRoom.timer);
        setTimeout(() => {
            nextPlayerTurn();
        }, 2000); // 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–∫—Ä—ã—Ç–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    });
    
    socket.on('disconnect', () => {
        console.log('‚ùå User disconnected:', socket.id);
        
        const playerIndex = gameRoom.players.findIndex(p => p.id === socket.id);
        
        if (playerIndex !== -1) {
            const player = gameRoom.players[playerIndex];
            const wasHost = player.isHost;
            
            gameRoom.players.splice(playerIndex, 1);
            
            // –ï—Å–ª–∏ —Ö–æ—Å—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è, –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞
            if (wasHost && gameRoom.players.length > 0) {
                gameRoom.players[0].isHost = true;
            }
            
            // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä—É
            if (gameRoom.players.length === 0) {
                resetGame();
            }
            
            console.log('üì§ Player left:', player.name, 'Remaining:', gameRoom.players.length);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
            io.to('game-room').emit('player-left', {
                leftPlayer: player.name,
                players: gameRoom.players,
                gameState: gameRoom.gameState
            });
        }
    });
    
    socket.on('change-max-players', (data) => {
        console.log('üîß Changing max players to:', data.maxPlayers);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã!');
            return;
        }
        
        const newMaxPlayers = parseInt(data.maxPlayers);
        if (![8, 12, 16].includes(newMaxPlayers)) {
            socket.emit('error', '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç
        if (gameRoom.players.length > newMaxPlayers) {
            socket.emit('error', `–°–µ–π—á–∞—Å –≤ –∏–≥—Ä–µ ${gameRoom.players.length} –∏–≥—Ä–æ–∫–æ–≤. –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç ${newMaxPlayers}.`);
            return;
        }
        
        gameRoom.maxPlayers = newMaxPlayers;
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        io.to('game-room').emit('max-players-changed', {
            maxPlayers: gameRoom.maxPlayers,
            players: gameRoom.players
        });
    });
});

// === –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –§–ê–ó–ê–ú–ò ===

function startRevelationPhase() {
    console.log('üîç Starting revelation phase');
    
    gameRoom.gamePhase = 'revelation';
    gameRoom.playersWhoRevealed = [];
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    gameRoom.players.forEach(player => {
        player.hasRevealed = false;
    });
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –∂–∏–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const alivePlayers = gameRoom.players.filter(p => p.isAlive);
    if (alivePlayers.length > 0) {
        gameRoom.currentTurnPlayer = alivePlayers[0].id;
        startPlayerTurn();
    }
}

function startPlayerTurn() {
    gameRoom.timeLeft = 60; // 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞
    
    startGameTimer();
    
    io.to('game-room').emit('player-turn-started', {
        gamePhase: gameRoom.gamePhase,
        currentTurnPlayer: gameRoom.currentTurnPlayer,
        timeLeft: gameRoom.timeLeft,
        players: gameRoom.players
    });
}

function nextPlayerTurn() {
    const alivePlayers = gameRoom.players.filter(p => p.isAlive);
    const currentIndex = alivePlayers.findIndex(p => p.id === gameRoom.currentTurnPlayer);
    
    if (currentIndex === -1) {
        startDiscussionPhase();
        return;
    }
    
    const nextIndex = currentIndex + 1;
    
    if (nextIndex >= alivePlayers.length) {
        // –í—Å–µ –∏–≥—Ä–æ–∫–∏ —Ä–∞—Å–∫—Ä—ã–ª–∏ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é
        startDiscussionPhase();
    } else {
        // –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫
        gameRoom.currentTurnPlayer = alivePlayers[nextIndex].id;
        startPlayerTurn();
    }
}

function startDiscussionPhase() {
    console.log('üí¨ Starting discussion phase');
    
    gameRoom.gamePhase = 'discussion';
    gameRoom.timeLeft = 300; // 5 –º–∏–Ω—É—Ç –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
    gameRoom.currentTurnPlayer = null;
    
    startGameTimer();
    
    io.to('game-room').emit('phase-changed', {
        gamePhase: gameRoom.gamePhase,
        timeLeft: gameRoom.timeLeft,
        players: gameRoom.players
    });
}

function startVotingPhase() {
    gameRoom.gamePhase = 'voting';
    gameRoom.timeLeft = 120; // 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    gameRoom.votingResults = {};
    gameRoom.totalVotes = 0;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
    gameRoom.players.forEach(player => {
        player.votes = 0;
        player.hasVoted = false;
    });
    
    console.log('üó≥Ô∏è Starting voting phase');
    
    startGameTimer();
    
    io.to('game-room').emit('phase-changed', {
        gamePhase: gameRoom.gamePhase,
        timeLeft: gameRoom.timeLeft,
        players: gameRoom.players
    });
}

function startGameTimer() {
    if (gameRoom.timer) {
        clearInterval(gameRoom.timer);
    }
    
    gameRoom.timer = setInterval(() => {
        gameRoom.timeLeft--;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
        if (gameRoom.timeLeft % 10 === 0 || gameRoom.timeLeft <= 10) {
            io.to('game-room').emit('timer-update', {
                timeLeft: gameRoom.timeLeft,
                gamePhase: gameRoom.gamePhase,
                currentTurnPlayer: gameRoom.currentTurnPlayer
            });
        }
        
        if (gameRoom.timeLeft <= 0) {
            clearInterval(gameRoom.timer);
            handlePhaseTimeout();
        }
    }, 1000);
}

function handlePhaseTimeout() {
    console.log('‚è∞ Phase timeout:', gameRoom.gamePhase);
    
    switch (gameRoom.gamePhase) {
        case 'revelation':
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
            nextPlayerTurn();
            break;
        case 'discussion':
            startVotingPhase();
            break;
        case 'voting':
            showResults();
            break;
    }
}

function showResults() {
    gameRoom.gamePhase = 'results';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
    let maxVotes = 0;
    let eliminatedPlayer = null;
    
    gameRoom.players.forEach(player => {
        if (player.isAlive && player.votes > maxVotes) {
            maxVotes = player.votes;
            eliminatedPlayer = player;
        }
    });
    
    if (eliminatedPlayer && maxVotes > 0) {
        eliminatedPlayer.isAlive = false;
        console.log('üíÄ Player eliminated:', eliminatedPlayer.name);
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—É–Ω–¥–∞
    gameRoom.players.forEach(player => {
        player.hasRevealed = false;
        player.votes = 0;
        player.hasVoted = false;
        // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º revealedCharacteristics - –æ–Ω–∏ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞ –≤—Å—é –∏–≥—Ä—É
    });
    
    gameRoom.revealedThisRound = 0;
    gameRoom.currentTurnPlayer = null;
    
    io.to('game-room').emit('round-results', {
        eliminatedPlayer: eliminatedPlayer ? eliminatedPlayer.name : null,
        players: gameRoom.players,
        votingResults: gameRoom.votingResults
    });
    
    // –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
    setTimeout(() => {
        nextRound();
    }, 5000);
}

function nextRound() {
    gameRoom.currentRound++;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    const alivePlayers = gameRoom.players.filter(p => p.isAlive);
    
    if (alivePlayers.length <= 1 || gameRoom.currentRound > gameRoom.maxRounds) {
        endGame();
        return;
    }
    
    // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
    gameRoom.gamePhase = 'preparation';
    gameRoom.timeLeft = 0;
    gameRoom.currentTurnPlayer = null;
    
    console.log('üîÑ Starting round:', gameRoom.currentRound);
    
    io.to('game-room').emit('new-round', {
        currentRound: gameRoom.currentRound,
        gamePhase: gameRoom.gamePhase,
        timeLeft: gameRoom.timeLeft,
        players: gameRoom.players
    });
}

function endGame() {
    gameRoom.gameState = 'finished';
    gameRoom.gamePhase = 'finished';
    
    if (gameRoom.timer) {
        clearInterval(gameRoom.timer);
    }
    
    const alivePlayers = gameRoom.players.filter(p => p.isAlive);
    
    console.log('üèÅ Game ended. Winners:', alivePlayers.map(p => p.name));
    
    io.to('game-room').emit('game-ended', {
        winners: alivePlayers,
        players: gameRoom.players
    });
    
    // –ß–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä—É
    setTimeout(() => {
        resetGame();
    }, 10000);
}

function resetGame() {
    console.log('üîÑ Resetting game...');
    
    if (gameRoom.timer) {
        clearInterval(gameRoom.timer);
    }
    
    // –û—Å—Ç–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤, –Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    gameRoom.players.forEach(player => {
        player.isAlive = true;
        player.votes = 0;
        player.hasRevealed = false;
        player.hasVoted = false;
        player.revealedCharacteristics = []; // –°–ë–†–ê–°–´–í–ê–ï–ú –ø—Ä–∏ –Ω–æ–≤–æ–π –∏–≥—Ä–µ
        player.characteristics = null;
        player.actionCards = [];
    });
    
    gameRoom.gameState = 'lobby';
    gameRoom.gamePhase = 'waiting';
    gameRoom.currentRound = 1;
    gameRoom.timer = null;
    gameRoom.timeLeft = 0;
    gameRoom.votingResults = {};
    gameRoom.revealedThisRound = 0;
    gameRoom.currentTurnPlayer = null;
    gameRoom.playersWhoRevealed = [];
    gameRoom.totalVotes = 0;
    
    io.to('game-room').emit('game-reset', {
        players: gameRoom.players,
        gameState: gameRoom.gameState
    });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö (–æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏)
const professions = [
    "–í—Ä–∞—á", "–£—á–∏—Ç–µ–ª—å", "–ò–Ω–∂–µ–Ω–µ—Ä", "–ü–æ–≤–∞—Ä", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "–ú–µ—Ö–∞–Ω–∏–∫",
    "–ü–∏—Å–∞—Ç–µ–ª—å", "–•—É–¥–æ–∂–Ω–∏–∫", "–ú—É–∑—ã–∫–∞–Ω—Ç", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å", "–§–µ—Ä–º–µ—Ä", "–ü–∏–ª–æ—Ç",
    "–ú–µ–¥—Å–µ—Å—Ç—Ä–∞", "–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π", "–ü–æ–∂–∞—Ä–Ω—ã–π", "–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä", "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫",
    "–î–∏–∑–∞–π–Ω–µ—Ä", "–§–æ—Ç–æ–≥—Ä–∞—Ñ", "–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç", "–ü—Å–∏—Ö–æ–ª–æ–≥", "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä"
];

const healthConditions = [
    "–û—Ç–ª–∏—á–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "–•–æ—Ä–æ—à–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
    "–ë–ª–∏–∑–æ—Ä—É–∫–æ—Å—Ç—å", "–î–∞–ª—å–Ω–æ–∑–æ—Ä–∫–æ—Å—Ç—å", "–ê—Å—Ç–º–∞", "–ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –ø—ã–ª—å",
    "–ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö", "–î–∏–∞–±–µ—Ç", "–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è", "–ê—Ä—Ç—Ä–∏—Ç",
    "–•—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å", "–ú–∏–≥—Ä–µ–Ω–∏", "–ë–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞", "–î–µ–ø—Ä–µ—Å—Å–∏—è"
];

const hobbies = [
    "–ß—Ç–µ–Ω–∏–µ", "–ö—É–ª–∏–Ω–∞—Ä–∏—è", "–°–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ", "–†–∏—Å–æ–≤–∞–Ω–∏–µ", "–ú—É–∑—ã–∫–∞",
    "–°–ø–æ—Ä—Ç", "–¢–∞–Ω—Ü—ã", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "–†—É–∫–æ–¥–µ–ª–∏–µ", "–ò–≥—Ä—ã", "–†—ã–±–∞–ª–∫–∞", "–û—Ö–æ—Ç–∞", "–ô–æ–≥–∞", "–ú–µ–¥–∏—Ç–∞—Ü–∏—è"
];

const phobias = [
    "–ë–æ—è–∑–Ω—å —Ç–µ–º–Ω–æ—Ç—ã", "–ë–æ—è–∑–Ω—å –≤—ã—Å–æ—Ç—ã", "–ë–æ—è–∑–Ω—å –∑–∞–º–∫–Ω—É—Ç—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤",
    "–ë–æ—è–∑–Ω—å –ø–∞—É–∫–æ–≤", "–ë–æ—è–∑–Ω—å –∑–º–µ–π", "–ë–æ—è–∑–Ω—å —Å–æ–±–∞–∫", "–ë–æ—è–∑–Ω—å –≤–æ–¥—ã",
    "–ë–æ—è–∑–Ω—å –æ–≥–Ω—è", "–ë–æ—è–∑–Ω—å —Ç–æ–ª–ø—ã", "–ë–æ—è–∑–Ω—å –ø—É–±–ª–∏—á–Ω—ã—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π"
];

const baggage = [
    "–†—é–∫–∑–∞–∫ —Å –µ–¥–æ–π", "–ê–ø—Ç–µ—á–∫–∞", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "–û—Ä—É–∂–∏–µ", "–ö–Ω–∏–≥–∏",
    "–°–µ–º–µ–Ω–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π", "–†–∞–¥–∏–æ", "–§–æ–Ω–∞—Ä–∏–∫", "–û–¥–µ—è–ª–∞", "–û–¥–µ–∂–¥–∞",
    "–î–æ–∫—É–º–µ–Ω—Ç—ã", "–î–µ–Ω—å–≥–∏", "–£–∫—Ä–∞—à–µ–Ω–∏—è", "–õ–µ–∫–∞—Ä—Å—Ç–≤–∞", "–ö–æ–º–ø—å—é—Ç–µ—Ä"
];

const facts = [
    "–ë—ã–ª –≤ —Ç—é—Ä—å–º–µ", "–°–ø–∞—Å —á—å—é-—Ç–æ –∂–∏–∑–Ω—å", "–í—ã–∏–≥—Ä–∞–ª –≤ –ª–æ—Ç–µ—Ä–µ—é",
    "–ó–Ω–∞–µ—Ç 5 —è–∑—ã–∫–æ–≤", "–ß–µ–º–ø–∏–æ–Ω –ø–æ —à–∞—Ö–º–∞—Ç–∞–º", "–ë—ã–≤—à–∏–π –≤–æ–µ–Ω–Ω—ã–π",
    "–ò–º–µ–µ—Ç –¥–≤–æ–π–Ω–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ", "–†–∞–±–æ—Ç–∞–ª –≤ —Ü–∏—Ä–∫–µ", "–ü–∏—Å–∞–ª –∫–Ω–∏–≥–∏",
    "–ò–∑–æ–±—Ä–µ–ª —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞–ª –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É"
];

const actionCards = [
    { id: 1, name: "–¶–µ–ª–∏—Ç–µ–ª—å", description: "–ú–æ–∂–µ—Ç–µ —Å–ø–∞—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –æ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è", type: "protective", usesLeft: 1 },
    { id: 2, name: "–î–µ—Ç–µ–∫—Ç–∏–≤", description: "–£–∑–Ω–∞–π—Ç–µ –æ–¥–Ω—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞", type: "investigative", usesLeft: 1 },
    { id: 3, name: "–°–∞–±–æ—Ç–∞–∂–Ω–∏–∫", description: "–û—Ç–º–µ–Ω–∏—Ç–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞", type: "disruptive", usesLeft: 1 },
    { id: 4, name: "–õ–∏–¥–µ—Ä", description: "–í–∞—à –≥–æ–ª–æ—Å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞ –¥–≤–∞", type: "influential", usesLeft: 1 }
];

function generateCharacteristics() {
    return {
        profession: getRandomItem(professions),
        health: getRandomItem(healthConditions),
        hobby: getRandomItem(hobbies),
        phobia: getRandomItem(phobias),
        baggage: getRandomItem(baggage),
        fact: getRandomItem(facts)
    };
}

function getRandomActionCard() {
    return { ...getRandomItem(actionCards) };
}

function getRandomItem(array) {
    return array[Math.floor(Math.random() * array.length)];
}

const PORT = process.env.PORT || 3000;
server.listen(PORT, '0.0.0.0', () => {
    console.log(`üåê Single Room Bunker Game running on port ${PORT}`);
});