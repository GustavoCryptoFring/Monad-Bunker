const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');

console.log('üöÄ Starting Multi-Room Bunker Game Server...');

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

// === –°–ò–°–¢–ï–ú–ê –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –ö–û–ú–ù–ê–¢ ===

const gameRooms = new Map(); // roomId -> GameRoom

class GameRoom {
    constructor(id, maxPlayers = 8) {
        this.id = id;
        this.players = [];
        this.gameState = 'lobby';
        this.maxPlayers = maxPlayers;
        this.gamePhase = 'waiting';
        this.currentRound = 1;
        this.maxRounds = 3;
        this.timer = null;
        this.timeLeft = 0;
        this.votingResults = {};
        this.revealedThisRound = 0;
        this.currentTurnPlayer = null;
        this.playersWhoRevealed = [];
        this.totalVotes = 0;
        this.skipDiscussionVotes = [];
        this.justificationQueue = [];
        this.currentJustifyingPlayer = null;
        this.justificationPhase = 1;
        this.canChangeVote = {};
        this.startRoundVotes = [];
        this.pendingEliminationNextRound = false;
        this.eliminateTopVotersNextRound = false;
        this.createdAt = new Date();
        this.lastActivity = new Date();
    }

    updateActivity() {
        this.lastActivity = new Date();
    }

    getAlivePlayers() {
        return this.players.filter(p => p.isAlive);
    }

    resetForNewGame() {
        this.players.forEach(player => {
            player.isAlive = true;
            player.votes = 0;
            player.hasRevealed = false;
            player.hasVoted = false;
            player.votedFor = null;
            player.cardsRevealedThisRound = 0;
            player.revealedCharacteristics = [];
            player.characteristics = null;
        });

        this.gameState = 'lobby';
        this.gamePhase = 'waiting';
        this.currentRound = 1;
        this.timeLeft = 0;
        this.votingResults = {};
        this.revealedThisRound = 0;
        this.currentTurnPlayer = null;
        this.playersWhoRevealed = [];
        this.totalVotes = 0;
        this.skipDiscussionVotes = [];
        this.justificationQueue = [];
        this.currentJustifyingPlayer = null;
        this.canChangeVote = {};
        this.startRoundVotes = [];
        this.pendingEliminationNextRound = false;
        this.eliminateTopVotersNextRound = false;

        if (this.timer) {
            clearInterval(this.timer);
            this.timer = null;
        }
    }
}

// === –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò === 
const professions = [
    '–í—Ä–∞—á', '–£—á–∏—Ç–µ–ª—å', '–ò–Ω–∂–µ–Ω–µ—Ä', '–ü–æ–≤–∞—Ä', '–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π', '–ü–æ–∂–∞—Ä–Ω—ã–π',
    '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä', '–≠–ª–µ–∫—Ç—Ä–∏–∫', '–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫', '–ú–µ—Ö–∞–Ω–∏–∫',
    '–§–µ—Ä–º–µ—Ä', '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä', '–ü—Å–∏—Ö–æ–ª–æ–≥', '–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç', '–•—É–¥–æ–∂–Ω–∏–∫',
    '–ú—É–∑—ã–∫–∞–Ω—Ç', '–ê–∫—Ç–µ—Ä', '–¢–∞–Ω—Ü–æ—Ä', '–ü–∏—Å–∞—Ç–µ–ª—å', '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å',
    '–ü—Ä–æ–¥–∞–≤–µ—Ü', '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä', '–Æ—Ä–∏—Å—Ç', '–°—É–¥—å—è', '–í–æ–µ–Ω–Ω—ã–π',
    '–ü–∏–ª–æ—Ç', '–°—Ç—é–∞—Ä–¥–µ—Å—Å–∞', '–í–æ–¥–∏—Ç–µ–ª—å', '–ü–æ—á—Ç–∞–ª—å–æ–Ω', '–û—Ö—Ä–∞–Ω–Ω–∏–∫'
];

const healthConditions = [
    '–ó–¥–æ—Ä–æ–≤', '–ë–ª–∏–∑–æ—Ä—É–∫–æ—Å—Ç—å', '–ê—Å—Ç–º–∞', '–î–∏–∞–±–µ—Ç', '–ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –æ—Ä–µ—Ö–∏',
    '–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è', '–ê—Ä—Ç—Ä–∏—Ç', '–ú–∏–≥—Ä–µ–Ω—å', '–ë–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞', '–î–µ–ø—Ä–µ—Å—Å–∏—è',
    '–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å', '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Ç—Ä–∞–≤–º–∞', '–û–ø–µ—Ä–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–¥—Ü–µ', '–ü—Ä–æ—Ç–µ–∑ –Ω–æ–≥–∏',
    '–°–ª—É—Ö–æ–≤–æ–π –∞–ø–ø–∞—Ä–∞—Ç', '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è –±–æ–ª—å –≤ —Å–ø–∏–Ω–µ', '–≠–ø–∏–ª–µ–ø—Å–∏—è',
    '–ê–Ω–µ–º–∏—è', '–ü–ª–æ—Ö–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è', '–ë—ã—Å—Ç—Ä–∞—è —É—Ç–æ–º–ª—è–µ–º–æ—Å—Ç—å'
];

const hobbies = [
    '–ß—Ç–µ–Ω–∏–µ', '–°–ø–æ—Ä—Ç', '–ì–æ—Ç–æ–≤–∫–∞', '–†–∏—Å–æ–≤–∞–Ω–∏–µ', '–ú—É–∑—ã–∫–∞', '–¢–∞–Ω—Ü—ã',
    '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', '–°–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ', '–†—ã–±–∞–ª–∫–∞', '–û—Ö–æ—Ç–∞', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
    '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–í—è–∑–∞–Ω–∏–µ', '–®–∞—Ö–º–∞—Ç—ã', '–í–∏–¥–µ–æ–∏–≥—Ä—ã', '–ö–∏–Ω–æ',
    '–¢–µ–∞—Ç—Ä', '–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è', '–ì–µ–æ–ª–æ–≥–∏—è', '–ê—Ä—Ö–µ–æ–ª–æ–≥–∏—è', '–ò—Å—Ç–æ—Ä–∏—è',
    '–Ø–∑—ã–∫–∏', '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞', '–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ',
    '–°–∫–∞–ª–æ–ª–∞–∑–∞–Ω–∏–µ', '–ü–∞—Ä–∞—à—é—Ç–Ω—ã–π —Å–ø–æ—Ä—Ç', '–î–∞–π–≤–∏–Ω–≥', '–°–µ—Ä—Ñ–∏–Ω–≥', '–ô–æ–≥–∞'
];

const phobias = [
    '–ê—Ä–∞—Ö–Ω–æ—Ñ–æ–±–∏—è (–ø–∞—É–∫–∏)', '–ö–ª–∞—É—Å—Ç—Ä–æ—Ñ–æ–±–∏—è (–∑–∞–º–∫–Ω—É—Ç—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞)', 
    '–ê–∫—Ä–æ—Ñ–æ–±–∏—è (–≤—ã—Å–æ—Ç–∞)', '–ê—ç—Ä–æ—Ñ–æ–±–∏—è (–ø–æ–ª–µ—Ç—ã)', '–ê–∫–≤–∞—Ñ–æ–±–∏—è (–≤–æ–¥–∞)',
    '–°–æ—Ü–∏–æ—Ñ–æ–±–∏—è (–ª—é–¥–∏)', '–ê–≥–æ—Ä–∞—Ñ–æ–±–∏—è (–æ—Ç–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞)',
    '–ù–∏–∫—Ç–æ—Ñ–æ–±–∏—è (—Ç–µ–º–Ω–æ—Ç–∞)', '–û—Ñ–∏–¥–∏–æ—Ñ–æ–±–∏—è (–∑–º–µ–∏)', '–ö–∏–Ω–æ—Ñ–æ–±–∏—è (—Å–æ–±–∞–∫–∏)',
    '–ú–∏–∑–æ—Ñ–æ–±–∏—è (–≥—Ä—è–∑—å)', '–ì–µ–º–æ—Ñ–æ–±–∏—è (–∫—Ä–æ–≤—å)', '–¢–∞–Ω–∞—Ç–æ—Ñ–æ–±–∏—è (—Å–º–µ—Ä—Ç—å)',
    '–ê–≤—Ç–æ—Ñ–æ–±–∏—è (–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ)', '–§–æ–Ω–æ—Ñ–æ–±–∏—è (–≥—Ä–æ–º–∫–∏–µ –∑–≤—É–∫–∏)',
    '–ü–∏—Ä–æ—Ñ–æ–±–∏—è (–æ–≥–æ–Ω—å)', '–¢—Ä–∏–ø–æ—Ñ–æ–±–∏—è (–¥—ã—Ä–∫–∏)', '–≠–Ω—Ç–æ–º–æ—Ñ–æ–±–∏—è (–Ω–∞—Å–µ–∫–æ–º—ã–µ)',
    '–ú–µ—Ç–µ–æ—Ä–æ—Ñ–æ–±–∏—è (–ø–æ–≥–æ–¥–∞)', '–ö—Å–µ–Ω–æ—Ñ–æ–±–∏—è (–Ω–µ–∑–Ω–∞–∫–æ–º—Ü—ã)'
];

const baggage = [
    '–†—é–∫–∑–∞–∫ —Å –µ–¥–æ–π', '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∞–ø—Ç–µ—á–∫–∞', '–ù–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤',
    '–°–ø–∞–ª—å–Ω—ã–π –º–µ—à–æ–∫', '–ü–∞–ª–∞—Ç–∫–∞', '–§–æ–Ω–∞—Ä–∏–∫ —Å –±–∞—Ç–∞—Ä–µ–π–∫–∞–º–∏',
    '–†–∞–¥–∏–æ–ø—Ä–∏–µ–º–Ω–∏–∫', '–ö–æ–º–ø–∞—Å –∏ –∫–∞—Ä—Ç—ã', '–í–µ—Ä–µ–≤–∫–∞ 50–º', '–ù–æ–∂',
    '–ó–∞–∂–∏–≥–∞–ª–∫–∞', '–°–ø–∏—á–∫–∏ –≤–æ–¥–æ—Å—Ç–æ–π–∫–∏–µ', '–ö–æ–Ω—Å–µ—Ä–≤—ã', '–í–æ–¥–∞ 10–ª',
    '–û–¥–µ—è–ª–æ', '–ó–∞–ø–∞—Å–Ω–∞—è –æ–¥–µ–∂–¥–∞', '–ö–Ω–∏–≥–∏', '–ò–≥—Ä–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã',
    '–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', '–§–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç', '–î–æ–∫—É–º–µ–Ω—Ç—ã',
    '–î–µ–Ω—å–≥–∏', '–£–∫—Ä–∞—à–µ–Ω–∏—è', '–°–µ–º–µ–π–Ω—ã–µ —Ñ–æ—Ç–æ', '–û—Ä—É–∂–∏–µ',
    '–ê–ª–∫–æ–≥–æ–ª—å', '–°–∏–≥–∞—Ä–µ—Ç—ã', '–õ–µ–∫–∞—Ä—Å—Ç–≤–∞', '–°–µ–º–µ–Ω–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π', '–£–¥–æ—á–∫–∞'
];

const facts = [
    '–°–ª—É–∂–∏–ª –≤ –∞—Ä–º–∏–∏', '–ó–Ω–∞–µ—Ç –±–æ–µ–≤—ã–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞', '–£–º–µ–µ—Ç –≥–æ—Ç–æ–≤–∏—Ç—å',
    '–ì–æ–≤–æ—Ä–∏—Ç –Ω–∞ 3 —è–∑—ã–∫–∞—Ö', '–ò–º–µ–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞', '–£–º–µ–µ—Ç —à–∏—Ç—å',
    '–ó–Ω–∞–µ—Ç –ø–µ—Ä–≤—É—é –ø–æ–º–æ—â—å', '–£–º–µ–µ—Ç —á–∏–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É', '–•–æ—Ä–æ—à–æ —Å—Ç—Ä–µ–ª—è–µ—Ç',
    '–£–º–µ–µ—Ç –≤—ã–∂–∏–≤–∞—Ç—å –≤ –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥–µ', '–ó–Ω–∞–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é', '–£–º–µ–µ—Ç –ø–µ—Ç—å',
    '–•–æ—Ä–æ—à–æ —Ç–∞–Ω—Ü—É–µ—Ç', '–£–º–µ–µ—Ç –∏–≥—Ä–∞—Ç—å –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ', '–ó–Ω–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é',
    '–£–º–µ–µ—Ç —Å—á–∏—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–æ', '–•–æ—Ä–æ—à–∞—è –ø–∞–º—è—Ç—å', '–ó–Ω–∞–µ—Ç –≥–µ–æ–≥—Ä–∞—Ñ–∏—é',
    '–£–º–µ–µ—Ç —Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã', '–ó–Ω–∞–µ—Ç –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—é', '–£–º–µ–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É',
    '–•–æ—Ä–æ—à–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è', '–£–º–µ–µ—Ç –ª–∞–∑–∏—Ç—å –ø–æ –¥–µ—Ä–µ–≤—å—è–º', '–ë—ã—Å—Ç—Ä–æ –±–µ–≥–∞–µ—Ç',
    '–°–∏–ª—å–Ω—ã–µ —Ä—É–∫–∏', '–•–æ—Ä–æ—à–µ–µ –∑—Ä–µ–Ω–∏–µ', '–û—Å—Ç—Ä—ã–π —Å–ª—É—Ö', '–ß—É–≤—Å—Ç–≤—É–µ—Ç –æ–ø–∞—Å–Ω–æ—Å—Ç—å',
    '–£–º–µ–µ—Ç —É–±–µ–∂–¥–∞—Ç—å –ª—é–¥–µ–π', '–•–æ—Ä–æ—à–∏–π –ª–∏–¥–µ—Ä'
];

const stories = [
    "–í 2050 –≥–æ–¥—É —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–∫–Ω—É–ª–æ—Å—å —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–æ–π. –ó–µ–º–ª—è –æ–∫–∞–∑–∞–ª–∞—Å—å –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π –≤—ã–º–∏—Ä–∞–Ω–∏—è, –∏ –≤—ã - –≥—Ä—É–ø–ø–∞ –≤—ã–∂–∏–≤—à–∏—Ö, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Ä–µ—à–∏—Ç—å, –∫—Ç–æ –¥–æ—Å—Ç–æ–∏–Ω –ø–æ–ø–∞—Å—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±—É–Ω–∫–µ—Ä –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ.",
    "–ü–æ—Å–ª–µ —Ä–∞–∑—Ä—É—à–∏—Ç–µ–ª—å–Ω–æ–π –≤–æ–π–Ω—ã –±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –ø–ª–∞–Ω–µ—Ç—ã —Å—Ç–∞–ª–∞ –Ω–µ–ø—Ä–∏–≥–æ–¥–Ω–æ–π –¥–ª—è –∂–∏–∑–Ω–∏. –ì—Ä—É–ø–ø–∞ –ª—é–¥–µ–π —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º –±—É–Ω–∫–µ—Ä–µ, –Ω–æ –º–µ—Å—Ç–∞ —Ö–≤–∞—Ç–∏—Ç –Ω–µ –≤—Å–µ–º.",
    "–í–∏—Ä—É—Å, –≤—ã—Ä–≤–∞–≤—à–∏–π—Å—è –∏–∑ —Å–µ–∫—Ä–µ—Ç–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏, —É–Ω–∏—á—Ç–æ–∂–∏–ª –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è. –¢–µ–ø–µ—Ä—å —Å–ø–∞—Å—à–∏–µ—Å—è –¥–æ–ª–∂–Ω—ã —Ä–µ—à–∏—Ç—å, –∫—Ç–æ –≤–æ–π–¥–µ—Ç –≤ –±—É–Ω–∫–µ—Ä –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Ä–æ–¥."
];

// === –£–¢–ò–õ–ò–¢–´ ===

function generateRoomId() {
    return Math.random().toString(36).substring(2, 8).toLowerCase();
}

function generateCharacteristics() {
    return {
        profession: getRandomElement(professions),
        health: getRandomElement(healthConditions),
        hobby: getRandomElement(hobbies),
        phobia: getRandomElement(phobias),
        baggage: getRandomElement(baggage),
        fact1: getRandomElement(facts),
        fact2: getRandomElement(facts.filter(f => f !== facts[0]))
    };
}

function getRandomElement(array) {
    return array[Math.floor(Math.random() * array.length)];
}

function getRequiredCardsForRound(round) {
    return round === 1 ? 2 : 1;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏
function emitToRoom(roomId, event, data) {
    io.to(roomId).emit(event, data);
}

function getRoom(roomId) {
    return gameRooms.get(roomId);
}

function createRoom(roomId, maxPlayers = 8) {
    const room = new GameRoom(roomId, maxPlayers);
    gameRooms.set(roomId, room);
    console.log(`üè† Created room: ${roomId}`);
    return room;
}

function removeEmptyRooms() {
    for (const [roomId, room] of gameRooms.entries()) {
        if (room.players.length === 0) {
            if (room.timer) {
                clearInterval(room.timer);
            }
            gameRooms.delete(roomId);
            console.log(`üóëÔ∏è Removed empty room: ${roomId}`);
        }
    }
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(removeEmptyRooms, 300000);

// === –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ô–õ–´ ===
app.use(express.static(__dirname));

// === –ú–ê–†–®–†–£–¢–´ ===
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

app.get('/game', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

app.get('/game/:roomType', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

app.get('/api/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        totalRooms: gameRooms.size,
        totalPlayers: Array.from(gameRooms.values()).reduce((sum, room) => sum + room.players.length, 0),
        rooms: Array.from(gameRooms.entries()).map(([id, room]) => ({
            id,
            players: room.players.length,
            gameState: room.gameState,
            gamePhase: room.gamePhase
        }))
    });
});

app.get('/api/rooms', (req, res) => {
    const rooms = Array.from(gameRooms.entries()).map(([id, room]) => ({
        id,
        players: room.players.length,
        maxPlayers: room.maxPlayers,
        gameState: room.gameState,
        gamePhase: room.gamePhase,
        canJoin: room.players.length < room.maxPlayers && room.gameState === 'lobby'
    }));
    res.json({ rooms });
});

// === WEBSOCKET –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

io.on('connection', (socket) => {
    console.log('üîó New connection:', socket.id);

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
    socket.on('join-room', (data) => {
        console.log('üëã Join room request:', data);
        
        const { roomId, roomType, playerName } = data;
        
        if (!playerName || playerName.trim().length < 2 || playerName.trim().length > 20) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞');
            return;
        }

        const fullRoomId = `${roomType || 'default'}-${roomId || generateRoomId()}`;
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        let gameRoom = getRoom(fullRoomId);
        if (!gameRoom) {
            gameRoom = createRoom(fullRoomId);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤
        if (gameRoom.players.length >= gameRoom.maxPlayers) {
            socket.emit('error', '–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ
        const existingPlayer = gameRoom.players.find(p => 
            p.name.toLowerCase() === playerName.trim().toLowerCase() && p.id !== socket.id
        );
        
        if (existingPlayer) {
            socket.emit('error', '–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ–º–Ω–∞—Ç–µ');
            return;
        }

        // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if (socket.currentRoom) {
            leaveCurrentRoom(socket);
        }

        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –∂–µ socket.id –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingPlayerIndex = gameRoom.players.findIndex(p => p.id === socket.id);
        if (existingPlayerIndex !== -1) {
            gameRoom.players.splice(existingPlayerIndex, 1);
        }

        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
        const player = {
            id: socket.id,
            name: playerName.trim(),
            isAlive: true,
            isHost: gameRoom.players.length === 0,
            votes: 0,
            hasVoted: false,
            votedFor: null,
            hasRevealed: false,
            cardsRevealedThisRound: 0,
            revealedCharacteristics: [],
            characteristics: null
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
        gameRoom.players.push(player);
        gameRoom.updateActivity();

        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ socket.io –∫–æ–º–Ω–∞—Ç–µ
        socket.join(fullRoomId);
        socket.currentRoom = fullRoomId;
        socket.playerName = playerName.trim();

        console.log(`‚úÖ Player ${playerName} joined room ${fullRoomId} (${gameRoom.players.length}/${gameRoom.maxPlayers})`);

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        socket.emit('join-confirmed', {
            playerId: socket.id,
            playerName: playerName.trim(),
            isHost: player.isHost,
            maxPlayers: gameRoom.maxPlayers,
            players: gameRoom.players,
            gameState: gameRoom.gameState,
            roomId: fullRoomId
        });

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ
        emitToRoom(fullRoomId, 'player-joined', {
            players: gameRoom.players,
            maxPlayers: gameRoom.maxPlayers,
            gameState: gameRoom.gameState
        });
    });

    // –í—ã—Ö–æ–¥ –∏–∑ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
    function leaveCurrentRoom(socket) {
        if (!socket.currentRoom) return;

        const gameRoom = getRoom(socket.currentRoom);
        if (!gameRoom) return;

        const playerIndex = gameRoom.players.findIndex(p => p.id === socket.id);
        if (playerIndex !== -1) {
            const player = gameRoom.players[playerIndex];
            console.log(`üëã Player ${player.name} left room ${socket.currentRoom}`);
            
            gameRoom.players.splice(playerIndex, 1);
            gameRoom.updateActivity();

            // –ï—Å–ª–∏ —Ö–æ—Å—Ç —É—à–µ–ª, –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞
            if (player.isHost && gameRoom.players.length > 0) {
                gameRoom.players[0].isHost = true;
                console.log(`üëë New host in ${socket.currentRoom}:`, gameRoom.players[0].name);
            }

            // –ï—Å–ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ —É—à–ª–∏ –∏–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ 2 –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä—É
            if (gameRoom.players.length === 0 || (gameRoom.gameState === 'playing' && gameRoom.players.length < 2)) {
                resetRoom(socket.currentRoom);
            } else {
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
                emitToRoom(socket.currentRoom, 'player-left', {
                    players: gameRoom.players,
                    gameState: gameRoom.gameState
                });
            }
        }

        socket.leave(socket.currentRoom);
        socket.currentRoom = null;
    }

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    socket.on('disconnect', () => {
        console.log('‚ùå Player disconnected:', socket.id);
        leaveCurrentRoom(socket);
        
        // –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –∫–æ–º–Ω–∞—Ç
        setTimeout(removeEmptyRooms, 5000);
    });

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π (–∏—Å–ø–æ–ª—å–∑—É—é—Ç socket.currentRoom)
    socket.on('change-max-players', (data) => {
        if (!socket.currentRoom) {
            socket.emit('error', '–í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ!');
            return;
        }

        const gameRoom = getRoom(socket.currentRoom);
        if (!gameRoom) return;

        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã!');
            return;
        }
        
        const newMaxPlayers = parseInt(data.maxPlayers);
        if (newMaxPlayers < 2 || newMaxPlayers > 16) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        if (newMaxPlayers < gameRoom.players.length) {
            socket.emit('error', '–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        gameRoom.maxPlayers = newMaxPlayers;
        gameRoom.updateActivity();
        
        console.log(`üîß Max players in ${socket.currentRoom} changed to:`, newMaxPlayers);
        
        emitToRoom(socket.currentRoom, 'max-players-changed', {
            maxPlayers: gameRoom.maxPlayers,
            players: gameRoom.players
        });
    });

    // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
    socket.on('start-game', () => {
        if (!socket.currentRoom) {
            socket.emit('error', '–í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ!');
            return;
        }

        const gameRoom = getRoom(socket.currentRoom);
        if (!gameRoom) return;

        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!');
            return;
        }
        
        if (gameRoom.players.length < 2) {
            socket.emit('error', '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!');
            return;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        gameRoom.players.forEach(player => {
            player.characteristics = generateCharacteristics();
            player.hasRevealed = false;
            player.hasVoted = false;
            player.revealedCharacteristics = [];
            player.cardsRevealedThisRound = 0;
        });
        
        gameRoom.gameState = 'playing';
        gameRoom.gamePhase = 'preparation';
        gameRoom.currentRound = 1;
        gameRoom.timeLeft = 0;
        gameRoom.playersWhoRevealed = [];
        gameRoom.currentTurnPlayer = null;
        gameRoom.updateActivity();
        
        const randomStory = stories[Math.floor(Math.random() * stories.length)];
        
        console.log(`üöÄ Game started in room ${socket.currentRoom}! Players: ${gameRoom.players.length}`);
        
        emitToRoom(socket.currentRoom, 'game-started', {
            players: gameRoom.players,
            gameState: gameRoom.gameState,
            gamePhase: gameRoom.gamePhase,
            currentRound: gameRoom.currentRound,
            timeLeft: gameRoom.timeLeft,
            story: randomStory
        });
    });

    // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏
    // (reveal-characteristic, vote-player, start-round, etc.)
    // –ö–∞–∂–¥—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç socket.currentRoom –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç getRoom(socket.currentRoom)

    socket.on('reveal-characteristic', (data) => {
        if (!socket.currentRoom) return;
        const gameRoom = getRoom(socket.currentRoom);
        if (!gameRoom) return;

        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'revelation') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫!');
            return;
        }
        
        if (gameRoom.currentTurnPlayer !== socket.id) {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!');
            return;
        }
        
        const characteristic = data.characteristic;
        
        if (!player.characteristics || !player.characteristics[characteristic]) {
            socket.emit('error', '–¢–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            return;
        }
        
        if (player.revealedCharacteristics && player.revealedCharacteristics.includes(characteristic)) {
            socket.emit('error', '–≠—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞!');
            return;
        }
        
        const requiredCards = getRequiredCardsForRound(gameRoom.currentRound);
        const currentlyRevealed = player.cardsRevealedThisRound || 0;
        
        if (currentlyRevealed >= requiredCards) {
            socket.emit('error', '–í—ã —É–∂–µ —Ä–∞—Å–∫—Ä—ã–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞—Ä—Ç—ã –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ!');
            return;
        }
        
        // –í –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        if (gameRoom.currentRound === 1) {
            if (currentlyRevealed === 0 && characteristic !== 'profession') {
                socket.emit('error', '–í –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é!');
                return;
            }
            
            if (currentlyRevealed === 1 && characteristic === 'profession') {
                socket.emit('error', '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É.');
                return;
            }
        }
        
        // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
        if (!player.revealedCharacteristics) {
            player.revealedCharacteristics = [];
        }
        
        player.revealedCharacteristics.push(characteristic);
        player.cardsRevealedThisRound = (player.cardsRevealedThisRound || 0) + 1;
        gameRoom.updateActivity();
        
        console.log(`üîç ${player.name} in ${socket.currentRoom} revealed ${characteristic}: ${player.characteristics[characteristic]}`);
        
        emitToRoom(socket.currentRoom, 'characteristic-revealed', {
            playerId: player.id,
            playerName: player.name,
            characteristic: characteristic,
            value: player.characteristics[characteristic],
            players: gameRoom.players,
            cardsRevealedThisRound: player.cardsRevealedThisRound,
            requiredCards: requiredCards
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª –ª–∏ –∏–≥—Ä–æ–∫ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ
        if (player.cardsRevealedThisRound >= requiredCards) {
            player.hasRevealed = true;
            console.log(`‚úÖ ${player.name} completed revelation phase`);
            
            setTimeout(() => {
                nextPlayerTurn(socket.currentRoom);
            }, 1500);
        }
    });

    // –î–æ–±–∞–≤–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (vote-player, start-round, etc.) —Å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏...
    // –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
});

// === –ò–ì–†–û–í–´–ï –§–£–ù–ö–¶–ò–ò ===

function nextPlayerTurn(roomId) {
    const gameRoom = getRoom(roomId);
    if (!gameRoom) return;

    const alivePlayers = gameRoom.getAlivePlayers();
    const currentPlayerIndex = alivePlayers.findIndex(p => p.id === gameRoom.currentTurnPlayer);
    
    const nextPlayerIndex = (currentPlayerIndex + 1) % alivePlayers.length;
    
    if (nextPlayerIndex === 0) {
        const allRevealed = alivePlayers.every(p => p.hasRevealed);
        if (allRevealed) {
            console.log(`‚úÖ All players in ${roomId} finished revelation phase`);
            startDiscussionPhase(roomId);
            return;
        }
    }
    
    const nextPlayer = alivePlayers[nextPlayerIndex];
    gameRoom.currentTurnPlayer = nextPlayer.id;
    gameRoom.timeLeft = 60;
    gameRoom.updateActivity();
    
    console.log(`üë§ Next turn in ${roomId}: ${nextPlayer.name}`);
    
    emitToRoom(roomId, 'phase-changed', {
        gamePhase: gameRoom.gamePhase,
        timeLeft: gameRoom.timeLeft,
        players: gameRoom.players,
        currentTurnPlayer: gameRoom.currentTurnPlayer,
        currentRound: gameRoom.currentRound
    });
    
    startGameTimer(roomId);
}

function startDiscussionPhase(roomId) {
    const gameRoom = getRoom(roomId);
    if (!gameRoom) return;

    console.log(`üí¨ Starting discussion phase in ${roomId}`);
    
    gameRoom.gamePhase = 'discussion';
    gameRoom.timeLeft = 180;
    gameRoom.currentTurnPlayer = null;
    gameRoom.skipDiscussionVotes = [];
    gameRoom.updateActivity();
    
    emitToRoom(roomId, 'phase-changed', {
        gamePhase: gameRoom.gamePhase,
        timeLeft: gameRoom.timeLeft,
        players: gameRoom.players,
        currentTurnPlayer: null,
        currentRound: gameRoom.currentRound
    });
    
    startGameTimer(roomId);
}

function startGameTimer(roomId) {
    const gameRoom = getRoom(roomId);
    if (!gameRoom) return;

    if (gameRoom.timer) {
        clearInterval(gameRoom.timer);
        gameRoom.timer = null;
    }
    
    gameRoom.timer = setInterval(() => {
        gameRoom.timeLeft--;
        gameRoom.updateActivity();
        
        if (gameRoom.timeLeft % 5 === 0 || gameRoom.timeLeft <= 10) {
            emitToRoom(roomId, 'timer-update', {
                timeLeft: gameRoom.timeLeft,
                currentTurnPlayer: gameRoom.currentTurnPlayer
            });
        }
        
        if (gameRoom.timeLeft <= 0) {
            clearInterval(gameRoom.timer);
            gameRoom.timer = null;
            handlePhaseTimeout(roomId);
        }
    }, 1000);
}

function handlePhaseTimeout(roomId) {
    const gameRoom = getRoom(roomId);
    if (!gameRoom) return;

    console.log(`‚è∞ Phase timeout in ${roomId}:`, gameRoom.gamePhase);
    
    switch (gameRoom.gamePhase) {
        case 'revelation':
            nextPlayerTurn(roomId);
            break;
        case 'discussion':
            startVotingPhase(roomId);
            break;
        case 'voting':
            processVotingResults(roomId);
            break;
    }
}

function startVotingPhase(roomId) {
    const gameRoom = getRoom(roomId);
    if (!gameRoom) return;

    console.log(`üó≥Ô∏è Starting voting phase in ${roomId}`);
    
    gameRoom.gamePhase = 'voting';
    gameRoom.timeLeft = 120;
    gameRoom.votingResults = {};
    gameRoom.totalVotes = 0;
    gameRoom.updateActivity();
    
    gameRoom.players.forEach(player => {
        player.hasVoted = false;
        player.votedFor = null;
        player.votes = 0;
    });
    
    gameRoom.canChangeVote = {};
    gameRoom.players.filter(p => p.isAlive).forEach(player => {
        gameRoom.canChangeVote[player.id] = true;
    });
    
    emitToRoom(roomId, 'phase-changed', {
        gamePhase: gameRoom.gamePhase,
        timeLeft: gameRoom.timeLeft,
        players: gameRoom.players,
        canChangeVote: gameRoom.canChangeVote,
        currentRound: gameRoom.currentRound
    });
    
    startGameTimer(roomId);
}

function processVotingResults(roomId) {
    const gameRoom = getRoom(roomId);
    if (!gameRoom) return;

    // –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    console.log(`üìä Processing voting results in ${roomId}`);
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
    showResults(roomId);
}

function showResults(roomId) {
    const gameRoom = getRoom(roomId);
    if (!gameRoom) return;

    console.log(`üìä Showing results in ${roomId}`);
    
    gameRoom.gamePhase = 'results';
    gameRoom.updateActivity();
    
    if (gameRoom.timer) {
        clearInterval(gameRoom.timer);
        gameRoom.timer = null;
    }
    
    emitToRoom(roomId, 'round-results', {
        eliminatedPlayers: [],
        players: gameRoom.players,
        votingResults: gameRoom.votingResults,
        resultMessage: '–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω'
    });
    
    setTimeout(() => {
        nextRound(roomId);
    }, 5000);
}

function nextRound(roomId) {
    const gameRoom = getRoom(roomId);
    if (!gameRoom) return;

    gameRoom.currentRound++;
    gameRoom.updateActivity();
    
    const alivePlayers = gameRoom.getAlivePlayers();
    
    if (alivePlayers.length <= 2 || gameRoom.currentRound > gameRoom.maxRounds) {
        endGame(roomId);
        return;
    }
    
    gameRoom.gamePhase = 'preparation';
    gameRoom.timeLeft = 0;
    gameRoom.currentTurnPlayer = null;
    gameRoom.startRoundVotes = [];
    
    console.log(`üîÑ Starting round ${gameRoom.currentRound} in ${roomId}. Alive players: ${alivePlayers.length}`);
    
    emitToRoom(roomId, 'new-round', {
        currentRound: gameRoom.currentRound,
        gamePhase: gameRoom.gamePhase,
        timeLeft: gameRoom.timeLeft,
        players: gameRoom.players
    });
}

function endGame(roomId) {
    const gameRoom = getRoom(roomId);
    if (!gameRoom) return;

    console.log(`üèÅ Game ended in ${roomId}`);
    
    const alivePlayers = gameRoom.getAlivePlayers();
    
    gameRoom.gamePhase = 'finished';
    gameRoom.updateActivity();
    
    if (gameRoom.timer) {
        clearInterval(gameRoom.timer);
        gameRoom.timer = null;
    }
    
    emitToRoom(roomId, 'game-ended', {
        winners: alivePlayers,
        players: gameRoom.players
    });
    
    setTimeout(() => {
        resetRoom(roomId);
    }, 10000);
}

function resetRoom(roomId) {
    const gameRoom = getRoom(roomId);
    if (!gameRoom) return;

    console.log(`üîÑ Resetting room ${roomId}...`);
    
    gameRoom.resetForNewGame();
    gameRoom.updateActivity();
    
    emitToRoom(roomId, 'game-reset', {
        players: gameRoom.players,
        gameState: gameRoom.gameState
    });
}

// === –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ===

const PORT = process.env.PORT || 3000;

server.listen(PORT, '0.0.0.0', (error) => {
    if (error) {
        console.error('‚ùå Failed to start server:', error);
        process.exit(1);
    }
    
    console.log(`üöÄ Multi-Room Server running on port ${PORT}`);
    console.log(`üåê Access the game at: http://localhost:${PORT}`);
    console.log('üè† Rooms will be created dynamically');
    console.log('üéØ Ready for players to join!');
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üõë SIGTERM received, shutting down gracefully');
    
    for (const room of gameRooms.values()) {
        if (room.timer) {
            clearInterval(room.timer);
        }
    }
    
    server.close(() => {
        console.log('üîö Process terminated');
        process.exit(0);
    });
});

process.on('SIGINT', () => {
    console.log('üõë SIGINT received, shutting down gracefully');
    
    for (const room of gameRooms.values()) {
        if (room.timer) {
            clearInterval(room.timer);
        }
    }
    
    server.close(() => {
        console.log('üîö Process terminated');
        process.exit(0);
    });
});