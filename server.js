const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');

console.log('üöÄ Starting Multi-Room Bunker Game Server...');

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

// === –°–ò–°–¢–ï–ú–ê –ö–û–ú–ù–ê–¢ ===

const gameRooms = new Map(); // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–º–Ω–∞—Ç

class GameRoom {
    constructor(roomCode, hostId, hostName, maxPlayers = 8) {
        this.roomCode = roomCode;
        this.players = [];
        this.gameState = 'lobby';
        this.maxPlayers = maxPlayers;
        this.gamePhase = 'waiting';
        this.currentRound = 1;
        this.maxRounds = 3;
        this.timer = null;
        this.timeLeft = 0;
        this.votingResults = {};
        this.revealedThisRound = 0;
        this.currentTurnPlayer = null;
        this.playersWhoRevealed = [];
        this.totalVotes = 0;
        this.skipDiscussionVotes = [];
        this.justificationQueue = [];
        this.currentJustifyingPlayer = null;
        this.justificationPhase = 1;
        this.canChangeVote = {};
        this.startRoundVotes = [];
        this.activeEffects = {};
        this.pendingEliminationNextRound = false;
        this.eliminateTopVotersNextRound = false;
        this.createdAt = new Date();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Å—Ç–∞ –∫–∞–∫ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        this.addPlayer(hostId, hostName, true);
    }
    
    addPlayer(socketId, playerName, isHost = false) {
        const player = {
            id: socketId,
            name: playerName,
            isAlive: true,
            isHost: isHost,
            votes: 0,
            hasVoted: false,
            votedFor: null,
            hasRevealed: false,
            cardsRevealedThisRound: 0,
            revealedCharacteristics: [],
            characteristics: null,
            actionCards: []
        };
        
        this.players.push(player);
        return player;
    }
    
    removePlayer(socketId) {
        const playerIndex = this.players.findIndex(p => p.id === socketId);
        if (playerIndex !== -1) {
            const removedPlayer = this.players.splice(playerIndex, 1)[0];
            
            // –ï—Å–ª–∏ —Ö–æ—Å—Ç —É—à–µ–ª, –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞
            if (removedPlayer.isHost && this.players.length > 0) {
                this.players[0].isHost = true;
            }
            
            return removedPlayer;
        }
        return null;
    }
    
    getPlayer(socketId) {
        return this.players.find(p => p.id === socketId);
    }
    
    isEmpty() {
        return this.players.length === 0;
    }
    
    isFull() {
        return this.players.length >= this.maxPlayers;
    }
    
    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
    cleanup() {
        if (this.timer) {
            clearInterval(this.timer);
            this.timer = null;
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã
function generateRoomCode() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let result = '';
    for (let i = 0; i < 6; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    if (gameRooms.has(result)) {
        return generateRoomCode(); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
    }
    
    return result;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
function getRoomLink(roomCode) {
    const baseUrl = process.env.BASE_URL || 'http://localhost:3000';
    return `${baseUrl}/${roomCode}`;
}

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(__dirname));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–º–Ω–∞—Ç
app.get('/', (req, res) => {
    console.log('üìÑ Serving main page');
    res.sendFile(path.join(__dirname, 'index.html'));
});

app.get('/:roomCode', (req, res) => {
    const roomCode = req.params.roomCode.toUpperCase();
    console.log('üìÑ Serving room page for:', roomCode);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–Ω–∞—Ç–∞
    if (roomCode.length === 6 && gameRooms.has(roomCode)) {
        res.sendFile(path.join(__dirname, 'index.html'));
    } else {
        // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        res.redirect('/');
    }
});

// API –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', (req, res) => {
    try {
        const totalPlayers = Array.from(gameRooms.values()).reduce((sum, room) => sum + room.players.length, 0);
        
        res.json({ 
            status: 'OK', 
            timestamp: new Date().toISOString(),
            rooms: gameRooms.size,
            totalPlayers: totalPlayers,
            connections: io.engine ? io.engine.clientsCount : 0,
            uptime: process.uptime(),
            memory: process.memoryUsage()
        });
    } catch (error) {
        console.error('Health check error:', error);
        res.status(500).json({ 
            status: 'ERROR', 
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô ===

io.on('connection', (socket) => {
    console.log('üîó New connection:', socket.id);
    
    let currentRoom = null;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
    socket.on('create-room', (data) => {
        console.log('üÜï Creating room for:', data.playerName, 'Socket:', socket.id);
        
        const playerName = data.playerName?.trim();
        
        if (!playerName || playerName.length < 2 || playerName.length > 20) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞');
            return;
        }
        
        try {
            const roomCode = generateRoomCode();
            const room = new GameRoom(roomCode, socket.id, playerName);
            
            gameRooms.set(roomCode, room);
            currentRoom = room;
            
            socket.join(roomCode);
            
            console.log('‚úÖ Room created:', roomCode, 'Host:', playerName);
            
            socket.emit('room-created', {
                roomCode: roomCode,
                roomLink: getRoomLink(roomCode),
                playerId: socket.id,
                playerName: playerName,
                isHost: true,
                maxPlayers: room.maxPlayers,
                players: room.players
            });
            
        } catch (error) {
            console.error('‚ùå Error creating room:', error);
            socket.emit('error', '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
        }
    });
    
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–Ω–∞—Ç–µ
    socket.on('join-room', (data) => {
        console.log('üö™ Joining room:', data.roomCode, 'Player:', data.playerName, 'Socket:', socket.id);
        
        const playerName = data.playerName?.trim();
        const roomCode = data.roomCode?.trim().toUpperCase();
        
        if (!playerName || playerName.length < 2 || playerName.length > 20) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞');
            return;
        }
        
        if (!roomCode || roomCode.length !== 6) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã');
            return;
        }
        
        const room = gameRooms.get(roomCode);
        if (!room) {
            socket.emit('error', '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }
        
        if (room.isFull()) {
            socket.emit('error', '–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        const existingPlayer = room.players.find(p => 
            p.name.toLowerCase() === playerName.toLowerCase() && 
            p.id !== socket.id
        );
        
        if (existingPlayer) {
            socket.emit('error', '–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ–º–Ω–∞—Ç–µ');
            return;
        }
        
        try {
            // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –±—ã–ª
            if (currentRoom && currentRoom !== room) {
                currentRoom.removePlayer(socket.id);
                socket.leave(currentRoom.roomCode);
            }
            
            room.addPlayer(socket.id, playerName);
            currentRoom = room;
            
            socket.join(roomCode);
            
            console.log('‚úÖ Player joined room:', roomCode, 'Player:', playerName);
            
            socket.emit('room-joined', {
                roomCode: roomCode,
                roomLink: getRoomLink(roomCode),
                playerId: socket.id,
                playerName: playerName,
                isHost: false,
                maxPlayers: room.maxPlayers,
                players: room.players
            });
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ
            socket.to(roomCode).emit('player-joined', {
                players: room.players,
                maxPlayers: room.maxPlayers,
                gameState: room.gameState
            });
            
        } catch (error) {
            console.error('‚ùå Error joining room:', error);
            socket.emit('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ');
        }
    });
    
    // –ü–æ–∫–∏–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    socket.on('leave-room', () => {
        console.log('üö™ Player leaving room:', socket.id);
        
        if (currentRoom) {
            const removedPlayer = currentRoom.removePlayer(socket.id);
            if (removedPlayer) {
                console.log('üëã Player left room:', currentRoom.roomCode, 'Player:', removedPlayer.name);
                
                socket.leave(currentRoom.roomCode);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
                const newHost = currentRoom.players.find(p => p.isHost);
                socket.to(currentRoom.roomCode).emit('player-left', {
                    players: currentRoom.players,
                    gameState: currentRoom.gameState,
                    newHost: newHost ? newHost.id : null
                });
                
                // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞, —É–¥–∞–ª—è–µ–º –µ—ë
                if (currentRoom.isEmpty()) {
                    console.log('üóëÔ∏è Removing empty room:', currentRoom.roomCode);
                    currentRoom.cleanup();
                    gameRooms.delete(currentRoom.roomCode);
                } else if (currentRoom.gameState === 'playing' && currentRoom.players.length < 2) {
                    // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∏–¥–µ—Ç –∏ –∏–≥—Ä–æ–∫–æ–≤ –º–µ–Ω—å—à–µ 2, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä—É
                    resetGameInRoom(currentRoom);
                }
                
                currentRoom = null;
            }
        }
    });
    
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    socket.on('disconnect', () => {
        console.log('‚ùå Player disconnected:', socket.id);
        
        if (currentRoom) {
            const removedPlayer = currentRoom.removePlayer(socket.id);
            if (removedPlayer) {
                console.log('üëã Player disconnected from room:', currentRoom.roomCode, 'Player:', removedPlayer.name);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
                const newHost = currentRoom.players.find(p => p.isHost);
                socket.to(currentRoom.roomCode).emit('player-left', {
                    players: currentRoom.players,
                    gameState: currentRoom.gameState,
                    newHost: newHost ? newHost.id : null
                });
                
                // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞, —É–¥–∞–ª—è–µ–º –µ—ë
                if (currentRoom.isEmpty()) {
                    console.log('üóëÔ∏è Removing empty room:', currentRoom.roomCode);
                    currentRoom.cleanup();
                    gameRooms.delete(currentRoom.roomCode);
                } else if (currentRoom.gameState === 'playing' && currentRoom.players.length < 2) {
                    // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∏–¥–µ—Ç –∏ –∏–≥—Ä–æ–∫–æ–≤ –º–µ–Ω—å—à–µ 2, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä—É
                    resetGameInRoom(currentRoom);
                }
            }
        }
    });
    
    // === –ò–ì–†–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
    
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
    socket.on('change-max-players', (data) => {
        if (!currentRoom) {
            socket.emit('error', '–í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ!');
            return;
        }
        
        const player = currentRoom.getPlayer(socket.id);
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!');
            return;
        }
        
        if (currentRoom.gameState !== 'lobby') {
            socket.emit('error', '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã!');
            return;
        }
        
        const newMaxPlayers = parseInt(data.maxPlayers);
        if (newMaxPlayers < 2 || newMaxPlayers > 16) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        if (newMaxPlayers < currentRoom.players.length) {
            socket.emit('error', '–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        currentRoom.maxPlayers = newMaxPlayers;
        
        console.log('üîß Max players changed in room:', currentRoom.roomCode, 'to:', newMaxPlayers);
        
        io.to(currentRoom.roomCode).emit('max-players-changed', {
            maxPlayers: currentRoom.maxPlayers,
            players: currentRoom.players
        });
    });
    
    // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
    socket.on('start-game', () => {
        console.log('üéÆ Game start requested in room:', currentRoom?.roomCode, 'by:', socket.id);
        
        if (!currentRoom) {
            socket.emit('error', '–í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ!');
            return;
        }
        
        const player = currentRoom.getPlayer(socket.id);
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!');
            return;
        }
        
        if (currentRoom.players.length < 2) {
            socket.emit('error', '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (currentRoom.gameState !== 'lobby') {
            socket.emit('error', '–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!');
            return;
        }
        
        startGameInRoom(currentRoom);
    });
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ server.js)
    // reveal-characteristic, vote-player, start-round, –∏ —Ç.–¥.
    
});

// === –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ò–ì–†–û–ô ===

function startGameInRoom(room) {
    try {
        console.log('üöÄ Starting game in room:', room.roomCode);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        room.players.forEach(player => {
            player.characteristics = generateCharacteristics();
            player.actionCards = [getRandomActionCard()];
            player.hasRevealed = false;
            player.hasVoted = false;
            player.revealedCharacteristics = [];
            player.cardsRevealedThisRound = 0;
        });
        
        room.gameState = 'playing';
        room.gamePhase = 'preparation';
        room.currentRound = 1;
        room.timeLeft = 0;
        room.playersWhoRevealed = [];
        room.currentTurnPlayer = null;
        
        const randomStory = stories[Math.floor(Math.random() * stories.length)];
        
        console.log('üöÄ Game started in room:', room.roomCode, 'Players:', room.players.length);
        
        io.to(room.roomCode).emit('game-started', {
            players: room.players,
            gameState: room.gameState,
            gamePhase: room.gamePhase,
            currentRound: room.currentRound,
            timeLeft: room.timeLeft,
            story: randomStory
        });
        
    } catch (error) {
        console.error('‚ùå Error starting game in room:', room.roomCode, error);
    }
}

function resetGameInRoom(room) {
    try {
        console.log('üîÑ Resetting game in room:', room.roomCode);
        
        if (room.timer) {
            clearInterval(room.timer);
            room.timer = null;
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
        room.players.forEach((player) => {
            player.isAlive = true;
            player.votes = 0;
            player.hasRevealed = false;
            player.hasVoted = false;
            player.votedFor = null;
            player.cardsRevealedThisRound = 0;
            player.revealedCharacteristics = [];
            player.characteristics = null;
            player.actionCards = [];
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
        room.gameState = 'lobby';
        room.gamePhase = 'waiting';
        room.currentRound = 1;
        room.timer = null;
        room.timeLeft = 0;
        room.votingResults = {};
        room.revealedThisRound = 0;
        room.currentTurnPlayer = null;
        room.playersWhoRevealed = [];
        room.totalVotes = 0;
        room.skipDiscussionVotes = [];
        room.justificationQueue = [];
        room.currentJustifyingPlayer = null;
        room.canChangeVote = {};
        room.startRoundVotes = [];
        room.activeEffects = {};
        room.pendingEliminationNextRound = false;
        room.eliminateTopVotersNextRound = false;
        
        io.to(room.roomCode).emit('game-reset', {
            players: room.players,
            gameState: room.gameState
        });
        
    } catch (error) {
        console.error('‚ùå Error resetting game in room:', room.roomCode, error);
    }
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –∫–æ–º–Ω–∞—Ç
setInterval(() => {
    const emptyRooms = [];
    for (const [roomCode, room] of gameRooms) {
        if (room.isEmpty()) {
            emptyRooms.push(roomCode);
        }
    }
    
    emptyRooms.forEach(roomCode => {
        const room = gameRooms.get(roomCode);
        if (room) {
            room.cleanup();
            gameRooms.delete(roomCode);
            console.log('üóëÔ∏è Cleaned up empty room:', roomCode);
        }
    });
    
    if (emptyRooms.length > 0) {
        console.log('üßπ Cleaned up', emptyRooms.length, 'empty rooms');
    }
}, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(() => {
    const totalPlayers = Array.from(gameRooms.values()).reduce((sum, room) => sum + room.players.length, 0);
    console.log('üìä Server stats: Rooms:', gameRooms.size, 'Total players:', totalPlayers);
}, 300000);

// === –ò–ì–†–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –ò –§–£–ù–ö–¶–ò–ò (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ server.js) ===

const actionCards = [
    { 
        id: 1, 
        name: "–î–≤–æ–π–Ω–æ–π –≥–æ–ª–æ—Å", 
        description: "–í–∞—à –≥–æ–ª–æ—Å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞ –¥–≤–∞ –≤–æ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è. –ù—É–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –î–û –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.", 
        type: "voting", 
        usesLeft: 1,
        icon: "üó≥Ô∏è"
    },
    { 
        id: 2, 
        name: "–î–µ—Ç–µ–∫—Ç–∏–≤", 
        description: "–£–∑–Ω–∞–π—Ç–µ –æ–¥–Ω—É —Å–∫—Ä—ã—Ç—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞", 
        type: "investigative", 
        usesLeft: 1,
        icon: "üîç"
    },
    { 
        id: 3, 
        name: "–ó–∞—â–∏—Ç–Ω–∏–∫", 
        description: "–°–ø–∞—Å–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –æ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è —Å–µ–±—è)", 
        type: "protective", 
        usesLeft: 1,
        icon: "üõ°Ô∏è"
    },
    { 
        id: 4, 
        name: "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≥–æ–ª–æ—Å", 
        description: "–í–∞—à –≥–æ–ª–æ—Å –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º", 
        type: "stealth", 
        usesLeft: 1,
        icon: "üë§"
    },
    { 
        id: 5, 
        name: "–ë–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫", 
        description: "–ó–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–µ–π—Å—Ç–≤–∏—è –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞", 
        type: "disruptive", 
        usesLeft: 1,
        icon: "üö´"
    },
    { 
        id: 6, 
        name: "–õ–∏–¥–µ—Ä", 
        description: "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ñ–∞–∑—É –∏–≥—Ä—ã", 
        type: "control", 
        usesLeft: 1,
        icon: "üëë"
    }
];

const professions = [
    '–í—Ä–∞—á', '–£—á–∏—Ç–µ–ª—å', '–ò–Ω–∂–µ–Ω–µ—Ä', '–ü–æ–≤–∞—Ä', '–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π', '–ü–æ–∂–∞—Ä–Ω—ã–π',
    '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä', '–≠–ª–µ–∫—Ç—Ä–∏–∫', '–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫', '–ú–µ—Ö–∞–Ω–∏–∫',
    '–§–µ—Ä–º–µ—Ä', '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä', '–ü—Å–∏—Ö–æ–ª–æ–≥', '–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç', '–•—É–¥–æ–∂–Ω–∏–∫',
    '–ú—É–∑—ã–∫–∞–Ω—Ç', '–ê–∫—Ç–µ—Ä', '–¢–∞–Ω—Ü–æ—Ä', '–ü–∏—Å–∞—Ç–µ–ª—å', '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å',
    '–ü—Ä–æ–¥–∞–≤–µ—Ü', '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä', '–Æ—Ä–∏—Å—Ç', '–°—É–¥—å—è', '–í–æ–µ–Ω–Ω—ã–π',
    '–ü–∏–ª–æ—Ç', '–°—Ç—é–∞—Ä–¥–µ—Å—Å–∞', '–í–æ–¥–∏—Ç–µ–ª—å', '–ü–æ—á—Ç–∞–ª—å–æ–Ω', '–û—Ö—Ä–∞–Ω–Ω–∏–∫'
];

const healthConditions = [
    '–ó–¥–æ—Ä–æ–≤', '–ë–ª–∏–∑–æ—Ä—É–∫–æ—Å—Ç—å', '–ê—Å—Ç–º–∞', '–î–∏–∞–±–µ—Ç', '–ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –æ—Ä–µ—Ö–∏',
    '–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è', '–ê—Ä—Ç—Ä–∏—Ç', '–ú–∏–≥—Ä–µ–Ω—å', '–ë–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞', '–î–µ–ø—Ä–µ—Å—Å–∏—è',
    '–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å', '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Ç—Ä–∞–≤–º–∞', '–û–ø–µ—Ä–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–¥—Ü–µ', '–ü—Ä–æ—Ç–µ–∑ –Ω–æ–≥–∏',
    '–°–ª—É—Ö–æ–≤–æ–π –∞–ø–ø–∞—Ä–∞—Ç', '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è –±–æ–ª—å –≤ —Å–ø–∏–Ω–µ', '–≠–ø–∏–ª–µ–ø—Å–∏—è',
    '–ê–Ω–µ–º–∏—è', '–ü–ª–æ—Ö–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è', '–ë—ã—Å—Ç—Ä–∞—è —É—Ç–æ–º–ª—è–µ–º–æ—Å—Ç—å'
];

const hobbies = [
    '–ß—Ç–µ–Ω–∏–µ', '–°–ø–æ—Ä—Ç', '–ì–æ—Ç–æ–≤–∫–∞', '–†–∏—Å–æ–≤–∞–Ω–∏–µ', '–ú—É–∑—ã–∫–∞', '–¢–∞–Ω—Ü—ã',
    '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', '–°–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ', '–†—ã–±–∞–ª–∫–∞', '–û—Ö–æ—Ç–∞', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
    '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–í—è–∑–∞–Ω–∏–µ', '–®–∞—Ö–º–∞—Ç—ã', '–í–∏–¥–µ–æ–∏–≥—Ä—ã', '–ö–∏–Ω–æ',
    '–¢–µ–∞—Ç—Ä', '–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è', '–ì–µ–æ–ª–æ–≥–∏—è', '–ê—Ä—Ö–µ–æ–ª–æ–≥–∏—è', '–ò—Å—Ç–æ—Ä–∏—è',
    '–Ø–∑—ã–∫–∏', '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞', '–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ',
    '–°–∫–∞–ª–æ–ª–∞–∑–∞–Ω–∏–µ', '–ü–∞—Ä–∞—à—é—Ç–Ω—ã–π —Å–ø–æ—Ä—Ç', '–î–∞–π–≤–∏–Ω–≥', '–°–µ—Ä—Ñ–∏–Ω–≥', '–ô–æ–≥–∞'
];

const phobias = [
    '–ê—Ä–∞—Ö–Ω–æ—Ñ–æ–±–∏—è (–ø–∞—É–∫–∏)', '–ö–ª–∞—É—Å—Ç—Ä–æ—Ñ–æ–±–∏—è (–∑–∞–º–∫–Ω—É—Ç—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞)', 
    '–ê–∫—Ä–æ—Ñ–æ–±–∏—è (–≤—ã—Å–æ—Ç–∞)', '–ê—ç—Ä–æ—Ñ–æ–±–∏—è (–ø–æ–ª–µ—Ç—ã)', '–ê–∫–≤–∞—Ñ–æ–±–∏—è (–≤–æ–¥–∞)',
    '–°–æ—Ü–∏–æ—Ñ–æ–±–∏—è (–ª—é–¥–∏)', '–ê–≥–æ—Ä–∞—Ñ–æ–±–∏—è (–æ—Ç–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞)',
    '–ù–∏–∫—Ç–æ—Ñ–æ–±–∏—è (—Ç–µ–º–Ω–æ—Ç–∞)', '–û—Ñ–∏–¥–∏–æ—Ñ–æ–±–∏—è (–∑–º–µ–∏)', '–ö–∏–Ω–æ—Ñ–æ–±–∏—è (—Å–æ–±–∞–∫–∏)',
    '–ú–∏–∑–æ—Ñ–æ–±–∏—è (–≥—Ä—è–∑—å)', '–ì–µ–º–æ—Ñ–æ–±–∏—è (–∫—Ä–æ–≤—å)', '–¢–∞–Ω–∞—Ç–æ—Ñ–æ–±–∏—è (—Å–º–µ—Ä—Ç—å)',
    '–ê–≤—Ç–æ—Ñ–æ–±–∏—è (–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ)', '–§–æ–Ω–æ—Ñ–æ–±–∏—è (–≥—Ä–æ–º–∫–∏–µ –∑–≤—É–∫–∏)',
    '–ü–∏—Ä–æ—Ñ–æ–±–∏—è (–æ–≥–æ–Ω—å)', '–¢—Ä–∏–ø–æ—Ñ–æ–±–∏—è (–¥—ã—Ä–∫–∏)', '–≠–Ω—Ç–æ–º–æ—Ñ–æ–±–∏—è (–Ω–∞—Å–µ–∫–æ–º—ã–µ)',
    '–ú–µ—Ç–µ–æ—Ä–æ—Ñ–æ–±–∏—è (–ø–æ–≥–æ–¥–∞)', '–ö—Å–µ–Ω–æ—Ñ–æ–±–∏—è (–Ω–µ–∑–Ω–∞–∫–æ–º—Ü—ã)'
];

const baggage = [
    '–†—é–∫–∑–∞–∫ —Å –µ–¥–æ–π', '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∞–ø—Ç–µ—á–∫–∞', '–ù–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤',
    '–°–ø–∞–ª—å–Ω—ã–π –º–µ—à–æ–∫', '–ü–∞–ª–∞—Ç–∫–∞', '–§–æ–Ω–∞—Ä–∏–∫ —Å –±–∞—Ç–∞—Ä–µ–π–∫–∞–º–∏',
    '–†–∞–¥–∏–æ–ø—Ä–∏–µ–º–Ω–∏–∫', '–ö–æ–º–ø–∞—Å –∏ –∫–∞—Ä—Ç—ã', '–í–µ—Ä–µ–≤–∫–∞ 50–º', '–ù–æ–∂',
    '–ó–∞–∂–∏–≥–∞–ª–∫–∞', '–°–ø–∏—á–∫–∏ –≤–æ–¥–æ—Å—Ç–æ–π–∫–∏–µ', '–ö–æ–Ω—Å–µ—Ä–≤—ã', '–í–æ–¥–∞ 10–ª',
    '–û–¥–µ—è–ª–æ', '–ó–∞–ø–∞—Å–Ω–∞—è –æ–¥–µ–∂–¥–∞', '–ö–Ω–∏–≥–∏', '–ò–≥—Ä–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã',
    '–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', '–§–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç', '–î–æ–∫—É–º–µ–Ω—Ç—ã',
    '–î–µ–Ω—å–≥–∏', '–£–∫—Ä–∞—à–µ–Ω–∏—è', '–°–µ–º–µ–π–Ω—ã–µ —Ñ–æ—Ç–æ', '–û—Ä—É–∂–∏–µ',
    '–ê–ª–∫–æ–≥–æ–ª—å', '–°–∏–≥–∞—Ä–µ—Ç—ã', '–õ–µ–∫–∞—Ä—Å—Ç–≤–∞', '–°–µ–º–µ–Ω–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π', '–£–¥–æ—á–∫–∞'
];

const facts = [
    '–°–ª—É–∂–∏–ª –≤ –∞—Ä–º–∏–∏', '–ó–Ω–∞–µ—Ç –±–æ–µ–≤—ã–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞', '–£–º–µ–µ—Ç –≥–æ—Ç–æ–≤–∏—Ç—å',
    '–ì–æ–≤–æ—Ä–∏—Ç –Ω–∞ 3 —è–∑—ã–∫–∞—Ö', '–ò–º–µ–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞', '–£–º–µ–µ—Ç —à–∏—Ç—å',
    '–ó–Ω–∞–µ—Ç –ø–µ—Ä–≤—É—é –ø–æ–º–æ—â—å', '–£–º–µ–µ—Ç —á–∏–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É', '–•–æ—Ä–æ—à–æ —Å—Ç—Ä–µ–ª—è–µ—Ç',
    '–£–º–µ–µ—Ç –≤—ã–∂–∏–≤–∞—Ç—å –≤ –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥–µ', '–ó–Ω–∞–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é', '–£–º–µ–µ—Ç –ø–µ—Ç—å',
    '–•–æ—Ä–æ—à–æ —Ç–∞–Ω—Ü—É–µ—Ç', '–£–º–µ–µ—Ç –∏–≥—Ä–∞—Ç—å –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ', '–ó–Ω–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é',
    '–£–º–µ–µ—Ç —Å—á–∏—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–æ', '–•–æ—Ä–æ—à–∞—è –ø–∞–º—è—Ç—å', '–ó–Ω–∞–µ—Ç –≥–µ–æ–≥—Ä–∞—Ñ–∏—é',
    '–£–º–µ–µ—Ç —Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã', '–ó–Ω–∞–µ—Ç –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—é', '–£–º–µ–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É',
    '–•–æ—Ä–æ—à–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è', '–£–º–µ–µ—Ç –ª–∞–∑–∏—Ç—å –ø–æ –¥–µ—Ä–µ–≤—å—è–º', '–ë—ã—Å—Ç—Ä–æ –±–µ–≥–∞–µ—Ç',
    '–°–∏–ª—å–Ω—ã–µ —Ä—É–∫–∏', '–•–æ—Ä–æ—à–µ–µ –∑—Ä–µ–Ω–∏–µ', '–û—Å—Ç—Ä—ã–π —Å–ª—É—Ö', '–ß—É–≤—Å—Ç–≤—É–µ—Ç –æ–ø–∞—Å–Ω–æ—Å—Ç—å',
    '–£–º–µ–µ—Ç —É–±–µ–∂–¥–∞—Ç—å –ª—é–¥–µ–π', '–•–æ—Ä–æ—à–∏–π –ª–∏–¥–µ—Ä'
];

const roundMessages = [
    "–í–Ω–∏–º–∞–Ω–∏–µ! –°–µ–π—á–∞—Å –Ω–∞—á–Ω–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥.",
    "–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É!",
    "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ...",
    "–£ –≤–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º—è –æ–±—Å—É–¥–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.",
    "–°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤—Å—ë!"
];

const stories = [
  "–í 2050 –≥–æ–¥—É —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–∫–Ω—É–ª–æ—Å—å —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–æ–π. –ó–µ–º–ª—è –æ–∫–∞–∑–∞–ª–∞—Å—å –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π –≤—ã–º–∏—Ä–∞–Ω–∏—è, –∏ –≤—ã–∂–∏–≤—à–∏–µ –±—ã–ª–∏ –≤—ã–Ω—É–∂–¥–µ–Ω—ã –∏—Å–∫–∞—Ç—å —É–±–µ–∂–∏—â–µ –≤ –ø–æ–¥–∑–µ–º–Ω—ã—Ö –±—É–Ω–∫–µ—Ä–∞—Ö. –í—ã ‚Äî –æ–¥–∏–Ω –∏–∑ —Ç–µ—Ö, –∫–æ–º—É —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Å—Ç–∏—Å—å.",
  "–ü–æ—Å–ª–µ —Ä–∞–∑—Ä—É—à–∏—Ç–µ–ª—å–Ω–æ–π –≤–æ–π–Ω—ã –±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –ø–ª–∞–Ω–µ—Ç—ã —Å—Ç–∞–ª–∞ –Ω–µ–ø—Ä–∏–≥–æ–¥–Ω–æ–π –¥–ª—è –∂–∏–∑–Ω–∏. –ì—Ä—É–ø–ø–∞ –ª—é–¥–µ–π —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ, —á—Ç–æ–±—ã –≤—ã–∂–∏—Ç—å –≤ –Ω–æ–≤–æ–º –º–∏—Ä–µ, –≥–¥–µ –∫–∞–∂–¥–æ–µ —Ä–µ—à–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º.",
  "–í–∏—Ä—É—Å, –≤—ã—Ä–≤–∞–≤—à–∏–π—Å—è –∏–∑ —Å–µ–∫—Ä–µ—Ç–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏, —É–Ω–∏—á—Ç–æ–∂–∏–ª –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è. –¢–µ–ø–µ—Ä—å —Å–ø–∞—Å—à–∏–µ—Å—è –¥–æ–ª–∂–Ω—ã –Ω–µ —Ç–æ–ª—å–∫–æ –±–æ—Ä–æ—Ç—å—Å—è —Å –±–æ–ª–µ–∑–Ω—å—é, –Ω–æ –∏ –∑–∞—â–∏—â–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã.",
  // ... –¥–æ–±–∞–≤—å—Ç–µ –µ—â–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å—Ç–æ—Ä–∏–π, –¥–ª–∏–Ω–æ–π 250-500 —Å–∏–º–≤–æ–ª–æ–≤
];

function startRound() {
  // ... –≤–∞—à –¥—Ä—É–≥–æ–π –∫–æ–¥ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞—É–Ω–¥–∞

  const randomStory = stories[Math.floor(Math.random() * stories.length)];
  io.emit('showStory', randomStory);
}

function onStartRound() {
    const message = roundMessages[Math.floor(Math.random() * roundMessages.length)];
    // –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –í–°–ï–ú –∫–ª–∏–µ–Ω—Ç–∞–º
    io.emit('roundMessage', message);
}

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(__dirname));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    console.log('üìÑ Serving main page');
    res.sendFile(path.join(__dirname, 'index.html'));
});

// API –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', (req, res) => {
    try {
        const totalPlayers = Array.from(gameRooms.values()).reduce((sum, room) => sum + room.players.length, 0);
        
        res.json({ 
            status: 'OK', 
            timestamp: new Date().toISOString(),
            rooms: gameRooms.size,
            totalPlayers: totalPlayers,
            connections: io.engine ? io.engine.clientsCount : 0,
            uptime: process.uptime(),
            memory: process.memoryUsage()
        });
    } catch (error) {
        console.error('Health check error:', error);
        res.status(500).json({ 
            status: 'ERROR', 
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// === –ò–ì–†–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ===

const gameRoom = {
    players: [],
    gameState: 'lobby',
    maxPlayers: 8,
    gamePhase: 'waiting',
    currentRound: 1,
    maxRounds: 3,
    timer: null,
    timeLeft: 0,
    votingResults: {},
    revealedThisRound: 0,
    currentTurnPlayer: null,
    playersWhoRevealed: [],
    totalVotes: 0,
    skipDiscussionVotes: [],
    justificationQueue: [],
    currentJustifyingPlayer: null,
    justificationPhase: 1,
    canChangeVote: {},
    startRoundVotes: [],
    activeEffects: {},
    pendingEliminationNextRound: false, // –ù–û–í–û–ï: —Ñ–ª–∞–≥ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    eliminateTopVotersNextRound: false   // –ù–û–í–û–ï: —Ñ–ª–∞–≥ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç –¥–ª—è —Ä–∞—É–Ω–¥–∞
function getRequiredCardsForRound(round) {
    if (round === 1) {
        return 2; // –ü—Ä–æ—Ñ–µ—Å—Å–∏—è + 1 –∫–∞—Ä—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä
    } else {
        return 1; // 1 –∫–∞—Ä—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä
    }
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Ñ–∞–∑—ã —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
function startRevelationPhase() {
    console.log('üîç Starting revelation phase');
    
    gameRoom.gamePhase = 'revelation';
    gameRoom.timeLeft = 60;
    gameRoom.revealedThisRound = 0;
    gameRoom.playersWhoRevealed = [];
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    gameRoom.players.forEach(player => {
        player.hasRevealed = false;
        player.cardsRevealedThisRound = 0;
    });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Ö–æ–¥–∞
    const alivePlayers = gameRoom.players.filter(p => p.isAlive);
    if (alivePlayers.length > 0) {
        gameRoom.currentTurnPlayer = alivePlayers[0].id;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ñ–∞–∑—ã
    io.to('game-room').emit('phase-changed', {
        gamePhase: gameRoom.gamePhase,
        timeLeft: gameRoom.timeLeft,
        players: gameRoom.players,
        currentTurnPlayer: gameRoom.currentTurnPlayer,
        currentRound: gameRoom.currentRound
    });
    
    startGameTimer();
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
io.on('connection', (socket) => {
    console.log('üîó New connection:', socket.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
    socket.emit('player-count', { count: gameRoom.players.length });
    
    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ
    socket.on('join-game', (data) => {
        console.log('üëã Player joining:', data.playerName, 'Socket:', socket.id);
        
        const playerName = data.playerName?.trim();
        
        if (!playerName || playerName.length < 2 || playerName.length > 20) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞');
            return;
        }
        
        // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ñ–ò–í–´–• –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π socket
        const existingPlayer = gameRoom.players.find(p => 
            p.name.toLowerCase() === playerName.toLowerCase() && 
            p.id !== socket.id
        );
        
        if (existingPlayer) {
            console.log('‚ùå Name already taken:', playerName, 'by player:', existingPlayer.id);
            socket.emit('error', '–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å –≤ –∏–≥—Ä–µ');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤
        if (gameRoom.players.length >= gameRoom.maxPlayers) {
            socket.emit('error', '–ò–≥—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
            return;
        }
        
        // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –∂–µ socket.id –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const existingPlayerIndex = gameRoom.players.findIndex(p => p.id === socket.id);
        if (existingPlayerIndex !== -1) {
            console.log('üîÑ Removing previous player with same socket:', socket.id);
            gameRoom.players.splice(existingPlayerIndex, 1);
        }
        
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
        const player = {
            id: socket.id,
            name: playerName,
            isAlive: true,
            isHost: gameRoom.players.length === 0, // –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ - —Ö–æ—Å—Ç
            votes: 0,
            hasVoted: false,
            votedFor: null,
            hasRevealed: false,
            cardsRevealedThisRound: 0,
            revealedCharacteristics: [],
            characteristics: null,
            actionCards: []
        };
        
        gameRoom.players.push(player);
        socket.join('game-room');
        
        console.log('‚úÖ Player joined:', playerName, 'Total players:', gameRoom.players.length);
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        socket.emit('join-confirmed', {
            playerId: socket.id,
            playerName: playerName,
            isHost: player.isHost,
            maxPlayers: gameRoom.maxPlayers,
            players: gameRoom.players,
            gameState: gameRoom.gameState
        });
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ
        io.to('game-room').emit('player-joined', {
            players: gameRoom.players,
            maxPlayers: gameRoom.maxPlayers,
            gameState: gameRoom.gameState
        });
    });
    
    // –î–û–ë–ê–í–õ–Ø–ï–ú –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on('disconnect', () => {
        console.log('‚ùå Player disconnected:', socket.id);
        
        const playerIndex = gameRoom.players.findIndex(p => p.id === socket.id);
        if (playerIndex !== -1) {
            const player = gameRoom.players[playerIndex];
            console.log('üëã Player left:', player.name);
            
            // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
            gameRoom.players.splice(playerIndex, 1);
            
            // –ï—Å–ª–∏ —Ö–æ—Å—Ç —É—à–µ–ª, –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞
            if (player.isHost && gameRoom.players.length > 0) {
                gameRoom.players[0].isHost = true;
                console.log('üëë New host:', gameRoom.players[0].name);
            }
            
            // –ï—Å–ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ —É—à–ª–∏ –∏–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ 2, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä—É
            if (gameRoom.players.length === 0 || (gameRoom.gameState === 'playing' && gameRoom.players.length < 2)) {
                resetGame();
            } else {
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
                io.to('game-room').emit('player-left', {
                    players: gameRoom.players,
                    gameState: gameRoom.gameState
                });
            }
        }
    });
    
    // –î–û–ë–ê–í–õ–Ø–ï–ú –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
    socket.on('change-max-players', (data) => {
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã!');
            return;
        }
        
        const newMaxPlayers = parseInt(data.maxPlayers);
        if (newMaxPlayers < 2 || newMaxPlayers > 16) {
            socket.emit('error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        if (newMaxPlayers < gameRoom.players.length) {
            socket.emit('error', '–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        gameRoom.maxPlayers = newMaxPlayers;
        
        console.log('üîß Max players changed to:', newMaxPlayers);
        
        io.to('game-room').emit('max-players-changed', {
            maxPlayers: gameRoom.maxPlayers,
            players: gameRoom.players
        });
    });
    
    // –î–û–ë–ê–í–õ–Ø–ï–ú –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã
    socket.on('start-game', () => {
        console.log('üéÆ Game start requested by:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!');
            return;
        }
        
        if (gameRoom.players.length < 2) {
            socket.emit('error', '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!');
            return;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        gameRoom.players.forEach(player => {
            player.characteristics = generateCharacteristics();
            player.actionCards = [getRandomActionCard()];
            player.hasRevealed = false;
            player.hasVoted = false;
            player.revealedCharacteristics = [];
            player.cardsRevealedThisRound = 0;
        });
        
        gameRoom.gameState = 'playing';
        gameRoom.gamePhase = 'preparation';
        gameRoom.currentRound = 1;
        gameRoom.timeLeft = 0;
        gameRoom.playersWhoRevealed = [];
        gameRoom.currentTurnPlayer = null;
        
        // –î–û–ë–ê–í–õ–Ø–ï–ú: –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        const randomStory = stories[Math.floor(Math.random() * stories.length)];
        
        console.log('üöÄ Game started! Players:', gameRoom.players.length);
        console.log('üìñ Selected story:', randomStory.substring(0, 50) + '...');
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
        io.to('game-room').emit('game-started', {
            players: gameRoom.players,
            gameState: gameRoom.gameState,
            gamePhase: gameRoom.gamePhase,
            currentRound: gameRoom.currentRound,
            timeLeft: gameRoom.timeLeft,
            story: randomStory // –î–û–ë–ê–í–õ–Ø–ï–ú –∏—Å—Ç–æ—Ä–∏—é
        });
    });
    
    // –î–û–ë–ê–í–õ–Ø–ï–ú –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    socket.on('reveal-characteristic', (data) => {
        console.log('üîç Reveal characteristic:', data);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'revelation') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫!');
            return;
        }
        
        if (gameRoom.currentTurnPlayer !== socket.id) {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!');
            return;
        }
        
        const characteristic = data.characteristic;
        
        if (!player.characteristics || !player.characteristics[characteristic]) {
            socket.emit('error', '–¢–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            return;
        }
        
        if (player.revealedCharacteristics && player.revealedCharacteristics.includes(characteristic)) {
            socket.emit('error', '–≠—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞!');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
        const requiredCards = getRequiredCardsForRound(gameRoom.currentRound);
        const currentlyRevealed = player.cardsRevealedThisRound || 0;
        
        if (currentlyRevealed >= requiredCards) {
            socket.emit('error', '–í—ã —É–∂–µ —Ä–∞—Å–∫—Ä—ã–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞—Ä—Ç—ã –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ!');
            return;
        }
        
        // –í –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        if (gameRoom.currentRound === 1) {
            if (currentlyRevealed === 0 && characteristic !== 'profession') {
                socket.emit('error', '–í –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é!');
                return;
            }
            
            if (currentlyRevealed === 1 && characteristic === 'profession') {
                socket.emit('error', '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É.');
                return;
            }
        }
        
        // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
        if (!player.revealedCharacteristics) {
            player.revealedCharacteristics = [];
        }
        
        player.revealedCharacteristics.push(characteristic);
        player.cardsRevealedThisRound = (player.cardsRevealedThisRound || 0) + 1;
        
        console.log(`üîç ${player.name} revealed ${characteristic}: ${player.characteristics[characteristic]}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
        io.to('game-room').emit('characteristic-revealed', {
            playerId: player.id,
            playerName: player.name,
            characteristic: characteristic,
            value: player.characteristics[characteristic],
            players: gameRoom.players,
            cardsRevealedThisRound: player.cardsRevealedThisRound,
            requiredCards: requiredCards
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª –ª–∏ –∏–≥—Ä–æ–∫ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ
        if (player.cardsRevealedThisRound >= requiredCards) {
            player.hasRevealed = true;
            console.log(`‚úÖ ${player.name} completed revelation phase`);
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
            setTimeout(() => {
                nextPlayerTurn();
            }, 1500);
        }
    });
    
    // –î–û–ë–ê–í–õ–Ø–ï–ú –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
    socket.on('vote-skip-discussion', () => {
        console.log('‚è≠Ô∏è Skip discussion vote from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'discussion') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ —Ñ–∞–∑–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è!');
            return;
        }
        
        if (gameRoom.skipDiscussionVotes.includes(socket.id)) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—è!');
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å
        gameRoom.skipDiscussionVotes.push(socket.id);
        
        const requiredVotes = 2; // –í—Å–µ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–≤–Ω–æ 2 –≥–æ–ª–æ—Å–∞
        const currentVotes = gameRoom.skipDiscussionVotes.length;
        
        console.log(`‚è≠Ô∏è Skip discussion votes: ${currentVotes}/${requiredVotes}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
        gameRoom.players.forEach(p => {
            const hasVoted = gameRoom.skipDiscussionVotes.includes(p.id);
            io.to(p.id).emit('skip-discussion-vote-update', {
                votes: currentVotes,
                required: requiredVotes,
                hasVoted: hasVoted
            });
        });
        
        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
        if (currentVotes >= requiredVotes) {
            console.log('‚è≠Ô∏è Skipping discussion - enough votes');
            clearInterval(gameRoom.timer);
            gameRoom.timer = null;
            
            io.to('game-room').emit('discussion-skipped', {
                gamePhase: 'voting',
                timeLeft: 120,
                players: gameRoom.players
            });
            
            startVotingPhase();
        }
    });
    
    // –î–û–ë–ê–í–õ–Ø–ï–ú –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –Ω–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞
    socket.on('start-round', () => {
        console.log('üéØ Start round vote from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'preparation') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞!');
            return;
        }
        
        if (gameRoom.startRoundVotes.includes(socket.id)) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –Ω–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞!');
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å
        gameRoom.startRoundVotes.push(socket.id);
        
        const requiredVotes = 2; // –¢—Ä–µ–±—É–µ—Ç—Å—è 2 –≥–æ–ª–æ—Å–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞
        const currentVotes = gameRoom.startRoundVotes.length;
        
        console.log(`üéØ Start round votes: ${currentVotes}/${requiredVotes}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
        gameRoom.players.forEach(p => {
            const hasVoted = gameRoom.startRoundVotes.includes(p.id);
            io.to(p.id).emit('start-round-vote-update', {
                votes: currentVotes,
                required: requiredVotes,
                hasVoted: hasVoted
            });
        });
        
        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤ - –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞—É–Ω–¥
        if (currentVotes >= requiredVotes) {
            console.log('üöÄ Starting round - enough votes');
            gameRoom.startRoundVotes = []; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
            startRevelationPhase();
        }
    });
    
    // –î–û–ë–ê–í–õ–Ø–ï–ú –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    socket.on('vote-player', (data) => {
        console.log('üó≥Ô∏è Vote from:', socket.id, 'for:', data.targetId);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        const targetPlayer = gameRoom.players.find(p => p.id === data.targetId);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (!targetPlayer || !targetPlayer.isAlive) {
            socket.emit('error', '–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'voting') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
            return;
        }
        
        if (player.hasVoted) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!');
            return;
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å
        player.hasVoted = true;
        player.votedFor = data.targetId;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤ —É —Ü–µ–ª–∏
        targetPlayer.votes = (targetPlayer.votes || 0) + 1;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        if (!gameRoom.votingResults[data.targetId]) {
            gameRoom.votingResults[data.targetId] = [];
        }
        gameRoom.votingResults[data.targetId].push(socket.id);
        
        console.log(`üó≥Ô∏è ${player.name} voted for ${targetPlayer.name} (${targetPlayer.votes} votes)`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        io.to('game-room').emit('vote-update', {
            players: gameRoom.players,
            votingResults: gameRoom.votingResults,
            canChangeVote: gameRoom.canChangeVote
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        const votedPlayers = alivePlayers.filter(p => p.hasVoted);
        
        if (votedPlayers.length === alivePlayers.length) {
            console.log('‚úÖ All players voted, processing results');
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            setTimeout(() => {
                processVotingResults();
            }, 2000);
        }
    });

    socket.on('change-vote', (data) => {
        console.log('üîÑ Change vote from:', socket.id, 'to:', data.targetId);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        const targetPlayer = gameRoom.players.find(p => p.id === data.targetId);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (!targetPlayer || !targetPlayer.isAlive) {
            socket.emit('error', '–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'voting') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
            return;
        }
        
        if (!gameRoom.canChangeVote[socket.id]) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å!');
            return;
        }
        
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥–æ–ª–æ—Å
        if (player.votedFor) {
            const previousTarget = gameRoom.players.find(p => p.id === player.votedFor);
            if (previousTarget) {
                previousTarget.votes = Math.max(0, (previousTarget.votes || 0) - 1);
            }
            
            // –£–±–∏—Ä–∞–µ–º –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            if (gameRoom.votingResults[player.votedFor]) {
                gameRoom.votingResults[player.votedFor] = gameRoom.votingResults[player.votedFor].filter(id => id !== socket.id);
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å
        player.votedFor = data.targetId;
        targetPlayer.votes = (targetPlayer.votes || 0) + 1;
        
        if (!gameRoom.votingResults[data.targetId]) {
            gameRoom.votingResults[data.targetId] = [];
        }
        gameRoom.votingResults[data.targetId].push(socket.id);
        
        // –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å –µ—â–µ —Ä–∞–∑
        gameRoom.canChangeVote[socket.id] = false;
        
        console.log(`üîÑ ${player.name} changed vote to ${targetPlayer.name}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        io.to('game-room').emit('vote-update', {
            players: gameRoom.players,
            votingResults: gameRoom.votingResults,
            canChangeVote: gameRoom.canChangeVote
        });
    });

    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    function processVotingResults() {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
        let maxVotes = 0;
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        
        alivePlayers.forEach(player => {
            if (player.votes > maxVotes) {
                maxVotes = player.votes;
            }
        });
        
        const playersWithMaxVotes = alivePlayers.filter(p => p.votes === maxVotes && maxVotes > 0);
        
        console.log(`üó≥Ô∏è Voting results: Max votes: ${maxVotes}, Players with max votes: ${playersWithMaxVotes.length}`);
        
        // –î–û–ë–ê–í–õ–Ø–ï–ú: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –∏–ª–∏ –≤—Ç–æ—Ä–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        const isSecondVoting = gameRoom.justificationQueue && gameRoom.justificationQueue.length > 0;
        
        if (playersWithMaxVotes.length === 1) {
            // –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ - –∏—Å–∫–ª—é—á–∞–µ–º —Å—Ä–∞–∑—É
            playersWithMaxVotes[0].isAlive = false;
            showResults();
        } else if (playersWithMaxVotes.length >= 2 && playersWithMaxVotes.length <= 3) {
            if (isSecondVoting) {
                // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ —ç—Ç–æ –≤—Ç–æ—Ä–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∏ —Å–Ω–æ–≤–∞ –Ω–∏—á—å—è - –Ω–∏–∫–æ–≥–æ –Ω–µ –∏—Å–∫–ª—é—á–∞–µ–º
                console.log('ü§ù Second voting tie - no elimination this round, double elimination next round');
                gameRoom.eliminateTopVotersNextRound = true;
                gameRoom.justificationQueue = []; // –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–π
                showResults(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            } else {
                // –ü–µ—Ä–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ - –∏–¥—É—Ç –æ–ø—Ä–∞–≤–¥—ã–≤–∞—Ç—å—Å—è
                startJustificationPhase();
            }
        } else {
            // –ù–∏–∫–æ–≥–æ –Ω–µ –∏—Å–∫–ª—é—á–∞–µ–º
            showResults();
        }
    }

    socket.on('finish-justification', () => {
        console.log('‚úÖ Finish justification from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || gameRoom.currentJustifyingPlayer !== socket.id) {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –æ–ø—Ä–∞–≤–¥—ã–≤–∞—Ç—å—Å—è!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'justification') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–π!');
            return;
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—é
        nextJustification();
    });

    socket.on('surrender', () => {
        console.log('üè≥Ô∏è Surrender from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å—Å—è!');
            return;
        }
        
        // –ò–≥—Ä–æ–∫ —Å–¥–∞–µ—Ç—Å—è - –∏—Å–∫–ª—é—á–∞–µ–º –µ–≥–æ
        player.isAlive = false;
        
        console.log(`üè≥Ô∏è ${player.name} surrendered`);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö
        io.to('game-room').emit('player-surrendered', {
            playerName: player.name,
            players: gameRoom.players
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        if (alivePlayers.length <= 2) {
            endGame();
        } else if (gameRoom.gamePhase === 'justification') {
            // –ï—Å–ª–∏ —Å–¥–∞–ª—Å—è –≤–æ –≤—Ä–µ–º—è –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–π - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
            nextJustification();
        }
    });
});

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
function nextPlayerTurn() {
    const alivePlayers = gameRoom.players.filter(p => p.isAlive);
    const currentPlayerIndex = alivePlayers.findIndex(p => p.id === gameRoom.currentTurnPlayer);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
    const nextPlayerIndex = (currentPlayerIndex + 1) % alivePlayers.length;
    
    // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å–Ω–æ–≤–∞ –∏ –≤—Å–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é
    if (nextPlayerIndex === 0) {
        const allRevealed = alivePlayers.every(p => p.hasRevealed);
        if (allRevealed) {
            console.log('‚úÖ All players finished revelation phase');
            startDiscussionPhase();
            return;
        }
    }
    
    const nextPlayer = alivePlayers[nextPlayerIndex];
    gameRoom.currentTurnPlayer = nextPlayer.id;
    gameRoom.timeLeft = 60;
    
    console.log(`üë§ Next turn: ${nextPlayer.name}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    io.to('game-room').emit('phase-changed', {
        gamePhase: gameRoom.gamePhase,
        timeLeft: gameRoom.timeLeft,
        players: gameRoom.players,
        currentTurnPlayer: gameRoom.currentTurnPlayer,
        currentRound: gameRoom.currentRound
    });
    
    startGameTimer();
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Ñ–∞–∑—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è
function startDiscussionPhase() {
    console.log('üí¨ Starting discussion phase');
    
    gameRoom.gamePhase = 'discussion';
    gameRoom.timeLeft = 180; // 3 –º–∏–Ω—É—Ç—ã –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
    gameRoom.currentTurnPlayer = null;
    gameRoom.skipDiscussionVotes = [];
    
    io.to('game-room').emit('phase-changed', {
        gamePhase: gameRoom.gamePhase,
        timeLeft: gameRoom.timeLeft,
        players: gameRoom.players,
        currentTurnPlayer: null,
        currentRound: gameRoom.currentRound
    });
    
    startGameTimer();
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Ñ–∞–∑—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function startVotingPhase() {
    console.log('üó≥Ô∏è Starting voting phase');
    
    gameRoom.gamePhase = 'voting';
    gameRoom.timeLeft = 120; // 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    gameRoom.votingResults = {};
    gameRoom.totalVotes = 0;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    gameRoom.players.forEach(player => {
        player.hasVoted = false;
        player.votedFor = null;
        player.votes = 0;
    });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –≥–æ–ª–æ—Å (–∫–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å –≥–æ–ª–æ—Å –æ–¥–∏–Ω —Ä–∞–∑)
    gameRoom.canChangeVote = {};
    gameRoom.players.filter(p => p.isAlive).forEach(player => {
        gameRoom.canChangeVote[player.id] = true;
    });
    
    io.to('game-room').emit('phase-changed', {
        gamePhase: gameRoom.gamePhase,
        timeLeft: gameRoom.timeLeft,
        players: gameRoom.players,
        canChangeVote: gameRoom.canChangeVote,
        currentRound: gameRoom.currentRound
    });
    
    startGameTimer();
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Ñ–∞–∑—ã –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è
function startJustificationPhase() {
    console.log('‚öñÔ∏è Starting justification phase');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
    let maxVotes = 0;
    const alivePlayers = gameRoom.players.filter(p => p.isAlive);
    
    alivePlayers.forEach(player => {
        if (player.votes > maxVotes) {
            maxVotes = player.votes;
        }
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
    const playersToJustify = alivePlayers.filter(p => 
        p.votes === maxVotes && maxVotes > 0
    );
    
    console.log(`‚öñÔ∏è Max votes: ${maxVotes}, Players with max votes:`, playersToJustify.map(p => `${p.name}(${p.votes})`));
    
    if (playersToJustify.length === 0) {
        // –ù–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
        console.log('‚öñÔ∏è No votes - proceeding to next round');
        nextRound();
        return;
    }
    
    if (playersToJustify.length === 1) {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ —Å –º–∞–∫—Å–∏–º—É–º–æ–º –≥–æ–ª–æ—Å–æ–≤ - —Å—Ä–∞–∑—É –∏—Å–∫–ª—é—á–∞–µ–º
        const eliminatedPlayer = playersToJustify[0];
        eliminatedPlayer.isAlive = false;
        console.log('üíÄ Single player eliminated:', eliminatedPlayer.name);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–∑ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–π
        showResults();
        return;
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –º–∞–∫—Å–∏–º—É–º–æ–º –≥–æ–ª–æ—Å–æ–≤ - –æ–Ω–∏ –æ–ø—Ä–∞–≤–¥—ã–≤–∞—é—Ç—Å—è
    console.log(`‚öñÔ∏è Multiple players tied with ${maxVotes} votes - starting justifications`);
    
    gameRoom.gamePhase = 'justification';
    gameRoom.justificationQueue = [...playersToJustify];
    gameRoom.currentJustifyingPlayer = gameRoom.justificationQueue[0].id;
    gameRoom.timeLeft = 60; // 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–µ
    
    console.log(`‚öñÔ∏è Players justifying: ${playersToJustify.map(p => p.name).join(', ')}`);
    
    io.to('game-room').emit('justification-started', {
        gamePhase: gameRoom.gamePhase,
        timeLeft: gameRoom.timeLeft,
        players: gameRoom.players,
        justifyingPlayer: playersToJustify[0],
        justificationQueue: gameRoom.justificationQueue.map(p => p.name),
        currentRound: gameRoom.currentRound
    });
    
    startGameTimer();
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—é
function nextJustification() {
    const currentIndex = gameRoom.justificationQueue.findIndex(p => p.id === gameRoom.currentJustifyingPlayer);
    
    if (currentIndex < gameRoom.justificationQueue.length - 1) {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
        gameRoom.currentJustifyingPlayer = gameRoom.justificationQueue[currentIndex + 1].id;
        gameRoom.timeLeft = 60;
        
        const nextPlayer = gameRoom.justificationQueue[currentIndex + 1];
        
        io.to('game-room').emit('justification-started', {
            gamePhase: gameRoom.gamePhase,
            timeLeft: gameRoom.timeLeft,
            players: gameRoom.players,
            justifyingPlayer: nextPlayer,
            justificationQueue: gameRoom.justificationQueue.map(p => p.name),
            currentRound: gameRoom.currentRound
        });
        
        startGameTimer();
    } else {
        // –í—Å–µ –æ–ø—Ä–∞–≤–¥–∞–ª–∏—Å—å - –Ω–∞—á–∏–Ω–∞–µ–º –≤—Ç–æ—Ä–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        startSecondVoting();
    }
}

// –§—É–Ω–∫—Ü–∏—è –≤—Ç–æ—Ä–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function startSecondVoting() {
    console.log('üó≥Ô∏è Starting second voting after justifications');
    
    gameRoom.gamePhase = 'voting';
    gameRoom.timeLeft = 90; // 1.5 –º–∏–Ω—É—Ç—ã –Ω–∞ –≤—Ç–æ—Ä–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    gameRoom.votingResults = {};
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    gameRoom.players.forEach(player => {
        player.hasVoted = false;
        player.votedFor = null;
        player.votes = 0;
    });
    
    // –í–æ –≤—Ç–æ—Ä–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –≥–æ–ª–æ—Å
    gameRoom.canChangeVote = {};
    
    // –í–ê–ñ–ù–û: –ù–ï –æ—á–∏—â–∞–µ–º justificationQueue –∑–¥–µ—Å—å - –æ–Ω–∞ –Ω—É–∂–Ω–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    
    io.to('game-room').emit('second-voting-started', {
        gamePhase: gameRoom.gamePhase,
        timeLeft: gameRoom.timeLeft,
        players: gameRoom.players,
        canChangeVote: gameRoom.canChangeVote,
        currentRound: gameRoom.currentRound,
        isSecondVoting: true
    });
    
    startGameTimer();
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—É–Ω–¥–∞
function showResults() {
    console.log('üìä Showing round results');
    
    gameRoom.gamePhase = 'results';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
    let maxVotes = 0;
    const alivePlayers = gameRoom.players.filter(p => p.isAlive);
    
    alivePlayers.forEach(player => {
        if (player.votes > maxVotes) {
            maxVotes = player.votes;
        }
    });
    
    const playersWithMaxVotes = alivePlayers.filter(p => p.votes === maxVotes && maxVotes > 0);
    
    console.log(`üìä Results: Max votes: ${maxVotes}, Players with max votes: ${playersWithMaxVotes.length}`);
    console.log(`üìä Eliminate top voters next round: ${gameRoom.eliminateTopVotersNextRound}`);
    
    let eliminatedPlayers = [];
    let resultMessage = '';
    
    // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    if (gameRoom.eliminateTopVotersNextRound) {
        // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ø-2 –∏–≥—Ä–æ–∫–æ–≤ (—Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∏ –≤—Ç–æ—Ä—ã–º –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤)
        console.log('üíÄ Eliminating top 2 voters from previous round');
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≥–æ–ª–æ—Å–æ–≤
        const sortedByVotes = [...alivePlayers].sort((a, b) => (b.votes || 0) - (a.votes || 0));
        
        // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤
        const uniqueVotes = [...new Set(sortedByVotes.map(p => p.votes || 0))].filter(v => v > 0);
        
        if (uniqueVotes.length >= 2) {
            // –ï—Å—Ç—å –ø–µ—Ä–≤–æ–µ –∏ –≤—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ
            const firstPlaceVotes = uniqueVotes[0];
            const secondPlaceVotes = uniqueVotes[1];
            
            const firstPlacePlayers = sortedByVotes.filter(p => p.votes === firstPlaceVotes);
            const secondPlacePlayers = sortedByVotes.filter(p => p.votes === secondPlaceVotes);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö —Å –ø–µ—Ä–≤—ã–º –º–µ—Å—Ç–æ–º –∏ —Å—Ç–æ–ª—å–∫–æ —Å–æ –≤—Ç–æ—Ä—ã–º, —á—Ç–æ–±—ã –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ã–ª–æ 2
            eliminatedPlayers = [...firstPlacePlayers];
            const remainingSlots = 2 - eliminatedPlayers.length;
            
            if (remainingSlots > 0) {
                eliminatedPlayers.push(...secondPlacePlayers.slice(0, remainingSlots));
            }
        } else if (uniqueVotes.length === 1) {
            // –í—Å–µ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –≥–æ–ª–æ—Å–∞–º–∏ - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö
            eliminatedPlayers = sortedByVotes.slice(0, 2);
        }
        
        // –ò—Å–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
        eliminatedPlayers.forEach(player => {
            player.isAlive = false;
        });
        
        resultMessage = `–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: ${eliminatedPlayers.map(p => p.name).join(', ')} (–¥–≤–æ–π–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∑–∞ –Ω–∏—á—å—é –≤ –ø—Ä–æ—à–ª–æ–º —Ä–∞—É–Ω–¥–µ)`;
        gameRoom.eliminateTopVotersNextRound = false;
        
    } else if (playersWithMaxVotes.length === 1 && maxVotes > 0) {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        eliminatedPlayers = [playersWithMaxVotes[0]];
        playersWithMaxVotes[0].isAlive = false;
        resultMessage = `–ò—Å–∫–ª—é—á–µ–Ω: ${playersWithMaxVotes[0].name}`;
        
    } else if (playersWithMaxVotes.length >= 2 && playersWithMaxVotes.length <= 3 && maxVotes > 0) {
        // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ù–∏—á—å—è –º–µ–∂–¥—É 2-3 –∏–≥—Ä–æ–∫–∞–º–∏ - –Ω–∏–∫–æ–≥–æ –Ω–µ –∏—Å–∫–ª—é—á–∞–µ–º, –Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞—É–Ω–¥–µ –∏—Å–∫–ª—é—á–∏–º —Ç–æ–ø-2
        console.log(`ü§ù Tie between ${playersWithMaxVotes.length} players - deferring elimination to next round`);
        eliminatedPlayers = [];
        resultMessage = `–ù–∏—á—å—è –º–µ–∂–¥—É ${playersWithMaxVotes.map(p => p.name).join(', ')}. –í —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞—É–Ω–¥–µ –±—É–¥—É—Ç –∏—Å–∫–ª—é—á–µ–Ω—ã 2 –∏–≥—Ä–æ–∫–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ –≥–æ–ª–æ—Å–∞–º–∏!`;
        gameRoom.eliminateTopVotersNextRound = true;
        
    } else {
        // –ù–∏–∫–æ–≥–æ –Ω–µ –∏—Å–∫–ª—é—á–∞–µ–º
        eliminatedPlayers = [];
        resultMessage = '–ù–∏–∫—Ç–æ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ';
    }
    
    // –í–ê–ñ–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    gameRoom.players.forEach(player => {
        player.hasVoted = false;
        player.votedFor = null;
        player.votes = 0;
        player.hasRevealed = false;
        player.cardsRevealedThisRound = 0;
    });
    
    gameRoom.votingResults = {};
    gameRoom.canChangeVote = {};
    gameRoom.currentTurnPlayer = null;
    gameRoom.currentJustifyingPlayer = null;
    gameRoom.justificationQueue = []; // –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–π
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
    if (gameRoom.timer) {
        clearInterval(gameRoom.timer);
        gameRoom.timer = null;
    }
    
    io.to('game-room').emit('round-results', {
        eliminatedPlayers: eliminatedPlayers.map(p => p.name),
        players: gameRoom.players,
        votingResults: gameRoom.votingResults,
        resultMessage: resultMessage,
        willEliminateTopVotersNextRound: gameRoom.eliminateTopVotersNextRound
    });
    
    // –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
    setTimeout(() => {
        nextRound();
    }, 5000);
}

// –û–ë–ù–û–í–õ–Ø–ï–ú —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
function nextRound() {
    try {
        gameRoom.currentRound++;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        
        if (alivePlayers.length <= 2 || gameRoom.currentRound > gameRoom.maxRounds) {
            endGame();
            return;
        }
        
        gameRoom.gamePhase = 'preparation';
        gameRoom.timeLeft = 0;
        gameRoom.currentTurnPlayer = null;
        gameRoom.startRoundVotes = [];
        
        console.log('üîÑ Starting round:', gameRoom.currentRound, 'Alive players:', alivePlayers.length);
        
        // –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        io.to('game-room').emit('new-round', {
            currentRound: gameRoom.currentRound,
            gamePhase: gameRoom.gamePhase,
            timeLeft: gameRoom.timeLeft,
            players: gameRoom.players,
            willEliminateTopVotersThisRound: gameRoom.eliminateTopVotersNextRound
        });
    } catch (error) {
        console.error('‚ùå Error in nextRound:', error);
    }
}

// –û–ë–ù–û–í–õ–Ø–ï–ú —Ñ—É–Ω–∫—Ü–∏—é —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã
function resetGame() {
    console.log('üîÑ Resetting game...');
    
    try {
        if (gameRoom.timer) {
            clearInterval(gameRoom.timer);
            gameRoom.timer = null;
        }
        
        // –û—Å—Ç–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤, –Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        gameRoom.players.forEach((player) => {
            player.isAlive = true;
            player.votes = 0;
            player.hasRevealed = false;
            player.hasVoted = false;
            player.votedFor = null;
            player.cardsRevealedThisRound = 0;
            player.revealedCharacteristics = [];
            player.characteristics = null;
            player.actionCards = [];
        });
        
        gameRoom.gameState = 'lobby';
        gameRoom.gamePhase = 'waiting';
        gameRoom.currentRound = 1;
        gameRoom.timer = null;
        gameRoom.timeLeft = 0;
        gameRoom.votingResults = {};
        gameRoom.revealedThisRound = 0;
        gameRoom.currentTurnPlayer = null;
        gameRoom.playersWhoRevealed = [];
        gameRoom.totalVotes = 0;
        gameRoom.skipDiscussionVotes = [];
        gameRoom.justificationQueue = [];
        gameRoom.currentJustifyingPlayer = null;
        gameRoom.canChangeVote = {};
        gameRoom.startRoundVotes = [];
        gameRoom.activeEffects = {};
        gameRoom.pendingEliminationNextRound = false; // –ù–û–í–û–ï: —Å–±—Ä–æ—Å
        gameRoom.eliminateTopVotersNextRound = false;  // –ù–û–í–û–ï: —Å–±—Ä–æ—Å
        
        io.to('game-room').emit('game-reset', {
            players: gameRoom.players,
            gameState: gameRoom.gameState
        });
    } catch (error) {
        console.error('‚ùå Error resetting game:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
function endGame() {
    try {
        console.log('üèÅ Game ended');
        
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        
        gameRoom.gamePhase = 'finished';
        if (gameRoom.timer) {
            clearInterval(gameRoom.timer);
            gameRoom.timer = null;
        }
        
        io.to('game-room').emit('game-ended', {
            winners: alivePlayers,
            players: gameRoom.players
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å –∏–≥—Ä—ã —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            resetGame();
        }, 10000);
    } catch (error) {
        console.error('‚ùå Error ending game:', error);
    }
}

// –ò–°–ü–†–ê–í–õ–Ø–ï–ú –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º-–∞—É—Ç–æ–≤
process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error);
    // –ù–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
    // –ù–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
});

// –ò–°–ü–†–ê–í–õ–Ø–ï–ú –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;

server.listen(PORT, '0.0.0.0', (error) => {
    if (error) {
        console.error('‚ùå Failed to start server:', error);
        process.exit(1);
    }
    
    console.log(`üöÄ Multi-Room Bunker Server running on port ${PORT}`);
    console.log(`üåê Access the game at: http://localhost:${PORT}`);
    console.log('üéØ Ready for players to create and join rooms!');
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üõë SIGTERM received, shutting down gracefully');
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã
    for (const room of gameRooms.values()) {
        room.cleanup();
    }
    gameRooms.clear();
    
    server.close((error) => {
        if (error) {
            console.error('‚ùå Error closing server:', error);
        }
        console.log('üîö Process terminated');
        process.exit(0);
    });
});

console.log('üéÆ Multi-Room Bunker Game Server Loaded');
