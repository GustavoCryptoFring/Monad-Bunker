const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');

console.log('üöÄ Starting Single Room Bunker Game Server...');

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(__dirname));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    console.log('üìÑ Serving main page');
    res.sendFile(path.join(__dirname, 'index.html'));
});

// API –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', (req, res) => {
    try {
        res.json({ 
            status: 'OK', 
            timestamp: new Date().toISOString(),
            players: gameRoom ? gameRoom.players.length : 0,
            gameState: gameRoom ? gameRoom.gameState : 'unknown',
            connections: io.engine ? io.engine.clientsCount : 0,
            uptime: process.uptime(),
            memory: process.memoryUsage()
        });
    } catch (error) {
        console.error('Health check error:', error);
        res.status(500).json({ 
            status: 'ERROR', 
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ timeout —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ–º –∫–∞—Ä—Ç
function handlePhaseTimeout() {
    console.log('‚è∞ Phase timeout:', gameRoom.gamePhase);
    
    switch (gameRoom.gamePhase) {
        case 'revelation':
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ —É—Å–ø–µ–ª
            const currentPlayer = gameRoom.players.find(p => p.id === gameRoom.currentTurnPlayer);
            if (currentPlayer && currentPlayer.isAlive) {
                const requiredCards = getRequiredCardsForRound(gameRoom.currentRound);
                const currentlyRevealed = currentPlayer.cardsRevealedThisRound || 0;
                
                if (currentlyRevealed < requiredCards) {
                    console.log(`‚è∞ Time's up for ${currentPlayer.name}, auto-revealing remaining cards`);
                    autoRevealRemainingCards(currentPlayer);
                }
            }
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
            nextPlayerTurn();
            break;
        case 'discussion':
            startVotingPhase();
            break;
        case 'voting':
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –≥–æ–ª–æ—Å–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è–º
            const hasVotes = Object.keys(gameRoom.votingResults).some(playerId => 
                gameRoom.votingResults[playerId] && gameRoom.votingResults[playerId].length > 0
            );
            
            if (hasVotes) {
                startJustificationPhase();
            } else {
                // –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
                nextRound();
            }
            break;
        case 'justification':
            // –í—Ä–µ–º—è –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
            nextJustification();
            break;
    }
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–∞—Ä—Ç
async function autoRevealRemainingCards(player) {
    const requiredCards = getRequiredCardsForRound(gameRoom.currentRound);
    const currentlyRevealed = player.cardsRevealedThisRound || 0;
    const cardsToReveal = requiredCards - currentlyRevealed;
    
    if (cardsToReveal <= 0) return;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const allCharacteristics = ['profession', 'health', 'hobby', 'phobia', 'baggage', 'fact1', 'fact2'];
    const alreadyRevealed = player.revealedCharacteristics || [];
    const availableCharacteristics = allCharacteristics.filter(char => 
        !alreadyRevealed.includes(char) && player.characteristics[char]
    );
    
    // –í –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞, —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –µ—ë –ø–µ—Ä–≤–æ–π
    if (gameRoom.currentRound === 1 && !alreadyRevealed.includes('profession')) {
        if (!player.revealedCharacteristics) {
            player.revealedCharacteristics = [];
        }
        
        player.revealedCharacteristics.push('profession');
        player.cardsRevealedThisRound = (player.cardsRevealedThisRound || 0) + 1;
        
        console.log(`üé≤ Auto-revealed profession for ${player.name}: ${player.characteristics.profession}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏
        io.to('game-room').emit('characteristic-revealed', {
            playerId: player.id,
            playerName: player.name,
            characteristic: 'profession',
            value: player.characteristics.profession,
            players: gameRoom.players,
            cardsRevealedThisRound: player.cardsRevealedThisRound,
            requiredCards: requiredCards,
            autoRevealed: true
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        const professionIndex = availableCharacteristics.indexOf('profession');
        if (professionIndex !== -1) {
            availableCharacteristics.splice(professionIndex, 1);
        }
    }
    
    // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ä—Ç—ã —Å–ª—É—á–∞–π–Ω–æ
    const remainingToReveal = requiredCards - (player.cardsRevealedThisRound || 0);
    
    for (let i = 0; i < remainingToReveal && availableCharacteristics.length > 0; i++) {
        const randomIndex = Math.floor(Math.random() * availableCharacteristics.length);
        const characteristic = availableCharacteristics.splice(randomIndex, 1)[0];
        
        if (!player.revealedCharacteristics) {
            player.revealedCharacteristics = [];
        }
        
        player.revealedCharacteristics.push(characteristic);
        player.cardsRevealedThisRound = (player.cardsRevealedThisRound || 0) + 1;
        
        console.log(`üé≤ Auto-revealed ${characteristic} for ${player.name}: ${player.characteristics[characteristic]}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏
        io.to('game-room').emit('characteristic-revealed', {
            playerId: player.id,
            playerName: player.name,
            characteristic: characteristic,
            value: player.characteristics[characteristic],
            players: gameRoom.players,
            cardsRevealedThisRound: player.cardsRevealedThisRound,
            requiredCards: requiredCards,
            autoRevealed: true
        });
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ä–∞—Å–∫—Ä—ã—Ç–∏—è–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
        await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –∏–≥—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ
    player.hasRevealed = true;
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
    io.to('game-room').emit('auto-reveal-completed', {
        playerName: player.name,
        cardsRevealed: player.cardsRevealedThisRound,
        players: gameRoom.players
    });
}

// Catch-all –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ä–æ—É—Ç–æ–≤
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// –ï–¥–∏–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ –¥–ª—è –≤—Å–µ—Ö
const gameRoom = {
    players: [],
    gameState: 'lobby', // lobby, playing, finished
    maxPlayers: 8, // –ò–ó–ú–ï–ù–ï–ù–û: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8 –∏–≥—Ä–æ–∫–æ–≤
    gamePhase: 'waiting', // waiting, preparation, revelation, discussion, voting, results, justification
    currentRound: 1,
    maxRounds: 3,
    timer: null,
    timeLeft: 0,
    votingResults: {},
    revealedThisRound: 0,
    currentTurnPlayer: null, // –î–ª—è —Ñ–∞–∑—ã —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
    playersWhoRevealed: [], // –ö—Ç–æ —É–∂–µ —Ä–∞—Å–∫—Ä—ã–ª –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ
    totalVotes: 0, // –î–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    skipDiscussionVotes: [], // –î–û–ë–ê–í–õ–ï–ù–û: –≥–æ–ª–æ—Å–∞ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
    // –ù–û–í–´–ï –ü–û–õ–Ø –î–õ–Ø –û–ü–†–ê–í–î–ê–ù–ò–ô
    justificationQueue: [], // –û—á–µ—Ä–µ–¥—å –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–µ
    currentJustifyingPlayer: null, // –¢–µ–∫—É—â–∏–π –æ–ø—Ä–∞–≤–¥—ã–≤–∞—é—â–∏–π—Å—è –∏–≥—Ä–æ–∫
    justificationPhase: 1, // –ù–æ–º–µ—Ä —Ñ–∞–∑—ã –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞—É–Ω–¥–æ–≤)
    canChangeVote: {}, // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–º–µ–Ω—ã –≥–æ–ª–æ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    // –ù–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
    notificationSettings: {
        gameStart: false,
        discussionSkipped: false,
        newRound: false,
        playerJoined: false  // –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–£–Æ –ù–ê–°–¢–†–û–ô–ö–£
    }
};

// Socket.IO –ª–æ–≥–∏–∫–∞
io.on('connection', (socket) => {
    console.log('‚úÖ User connected:', socket.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –Ω–æ–≤–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é
    socket.emit('room-state', {
        players: gameRoom.players,
        gameState: gameRoom.gameState,
        gamePhase: gameRoom.gamePhase,
        currentRound: gameRoom.currentRound,
        timeLeft: gameRoom.timeLeft,
        currentTurnPlayer: gameRoom.currentTurnPlayer,
        maxPlayers: gameRoom.maxPlayers,
        notificationSettings: gameRoom.notificationSettings // –ù–û–í–û–ï
    });
    
    socket.on('join-game', (data) => {
        console.log('üéØ Player joining:', data.playerName);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤
        if (gameRoom.players.length >= gameRoom.maxPlayers) {
            socket.emit('error', '–ò–≥—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤: ' + gameRoom.maxPlayers);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–æ –ª–∏ –∏–º—è
        const existingPlayer = gameRoom.players.find(p => p.name === data.playerName);
        if (existingPlayer) {
            socket.emit('error', '–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –≤ –∏–≥—Ä–µ! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.');
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
        const newPlayer = {
            id: socket.id,
            name: data.playerName,
            isHost: gameRoom.players.length === 0, // –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ö–æ—Å—Ç–æ–º
            joinedAt: new Date(),
            isAlive: true,
            votes: 0,
            hasRevealed: false,
            revealedCharacteristics: [],
            characteristics: null,
            actionCards: [],
            hasVoted: false,
            votedFor: null,
            cardsRevealedThisRound: 0
        };
        
        gameRoom.players.push(newPlayer);
        socket.join('game-room');
        
        console.log('‚úÖ Player joined:', data.playerName, 'Total players:', gameRoom.players.length);
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å maxPlayers
        socket.emit('join-confirmed', {
            playerId: socket.id,
            playerName: data.playerName,
            isHost: newPlayer.isHost,
            maxPlayers: gameRoom.maxPlayers,
            notificationSettings: gameRoom.notificationSettings // –ù–û–í–û–ï
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
        io.to('game-room').emit('player-joined', {
            players: gameRoom.players,
            newPlayer: data.playerName,
            gameState: gameRoom.gameState,
            maxPlayers: gameRoom.maxPlayers,
            notificationSettings: gameRoom.notificationSettings // –ù–û–í–û–ï
        });
    });
    
    socket.on('start-game', () => {
        console.log('üéÆ Game start requested by:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!');
            return;
        }
        
        if (gameRoom.players.length < 2) {
            socket.emit('error', '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!');
            return;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        gameRoom.players.forEach(player => {
            player.characteristics = generateCharacteristics();
            player.actionCards = [getRandomActionCard()];
            player.hasRevealed = false;
            player.hasVoted = false;
            player.revealedCharacteristics = [];
            player.cardsRevealedThisRound = 0;
        });
        
        gameRoom.gameState = 'playing';
        gameRoom.gamePhase = 'preparation';
        gameRoom.currentRound = 1;
        gameRoom.timeLeft = 0;
        gameRoom.playersWhoRevealed = [];
        gameRoom.currentTurnPlayer = null;
        
        console.log('üöÄ Game started! Players:', gameRoom.players.length);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
        io.to('game-room').emit('game-started', {
            players: gameRoom.players,
            gameState: gameRoom.gameState,
            gamePhase: gameRoom.gamePhase,
            currentRound: gameRoom.currentRound,
            timeLeft: gameRoom.timeLeft
        });
    });
    
    socket.on('start-round', () => {
        console.log('üéØ Round start requested by:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'preparation') {
            socket.emit('error', '–†–∞—É–Ω–¥ —É–∂–µ –Ω–∞—á–∞–ª—Å—è!');
            return;
        }
        
        startRevelationPhase();
    });
    
    socket.on('vote-player', (data) => {
        console.log('üó≥Ô∏è Vote from:', socket.id, 'for:', data.targetId);
        
        if (gameRoom.gamePhase !== 'voting') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
            return;
        }
        
        const voter = gameRoom.players.find(p => p.id === socket.id);
        const target = gameRoom.players.find(p => p.id === data.targetId);
        
        if (!voter || !target || !voter.isAlive || !target.isAlive) {
            socket.emit('error', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!');
            return;
        }
        
        if (voter.hasVoted) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!');
            return;
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å
        if (!gameRoom.votingResults[data.targetId]) {
            gameRoom.votingResults[data.targetId] = [];
        }
        
        gameRoom.votingResults[data.targetId].push(voter.id);
        voter.hasVoted = true;
        voter.votedFor = data.targetId;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤
        gameRoom.players.forEach(player => {
            player.votes = gameRoom.votingResults[player.id] ? gameRoom.votingResults[player.id].length : 0;
        });
        
        // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        const votedPlayers = alivePlayers.filter(p => p.hasVoted);
        
        console.log(`üìä Votes: ${votedPlayers.length}/${alivePlayers.length}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        io.to('game-room').emit('vote-update', {
            players: gameRoom.players,
            votingResults: gameRoom.votingResults,
            votedCount: votedPlayers.length,
            totalPlayers: alivePlayers.length
        });
        
        // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è–º
        if (votedPlayers.length >= alivePlayers.length) {
            console.log('‚úÖ All players voted - starting justification phase');
            clearInterval(gameRoom.timer);
            setTimeout(() => {
                startJustificationPhase();
            }, 1000);
        }
    });

    socket.on('change-vote', (data) => {
        console.log('üîÑ Change vote from:', socket.id, 'to:', data.targetId);
        
        if (gameRoom.gamePhase !== 'voting') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
            return;
        }
        
        const voter = gameRoom.players.find(p => p.id === socket.id);
        const newTarget = gameRoom.players.find(p => p.id === data.targetId);
        
        if (!voter || !newTarget || !voter.isAlive || !newTarget.isAlive) {
            socket.emit('error', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–º–µ–Ω–∞ –≥–æ–ª–æ—Å–∞!');
            return;
        }
        
        if (!gameRoom.canChangeVote[voter.id]) {
            socket.emit('error', '–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã –≥–æ–ª–æ—Å–∞!');
            return;
        }
        
        if (!voter.votedFor) {
            socket.emit('error', '–í—ã –µ—â–µ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!');
            return;
        }
        
        if (voter.votedFor === data.targetId) {
            socket.emit('error', '–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –≥–æ–ª–æ—Å
        const oldTargetVotes = gameRoom.votingResults[voter.votedFor];
        if (oldTargetVotes) {
            const voteIndex = oldTargetVotes.indexOf(voter.id);
            if (voteIndex !== -1) {
                oldTargetVotes.splice(voteIndex, 1);
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å
        if (!gameRoom.votingResults[data.targetId]) {
            gameRoom.votingResults[data.targetId] = [];
        }
        gameRoom.votingResults[data.targetId].push(voter.id);
        voter.votedFor = data.targetId;
        
        // –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã –≥–æ–ª–æ—Å–∞
        gameRoom.canChangeVote[voter.id] = false;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤
        gameRoom.players.forEach(player => {
            player.votes = gameRoom.votingResults[player.id] ? gameRoom.votingResults[player.id].length : 0;
        });
        
        console.log(`üîÑ Vote changed from ${voter.name}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        io.to('game-room').emit('vote-update', {
            players: gameRoom.players,
            votingResults: gameRoom.votingResults,
            canChangeVote: gameRoom.canChangeVote
        });
    });

    socket.on('finish-justification', () => {
        console.log('‚úÖ Finish justification from:', socket.id);
        
        if (gameRoom.gamePhase !== 'justification') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ —Ñ–∞–∑–∞ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è!');
            return;
        }
        
        if (gameRoom.currentJustifyingPlayer !== socket.id) {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à–µ –≤—Ä–µ–º—è –¥–ª—è –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è!');
            return;
        }
        
        clearInterval(gameRoom.timer);
        nextJustification();
    });

    socket.on('surrender', () => {
        console.log('üè≥Ô∏è Surrender from:', socket.id);
        
        if (gameRoom.gamePhase !== 'justification') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ —Ñ–∞–∑–∞ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è!');
            return;
        }
        
        if (gameRoom.currentJustifyingPlayer !== socket.id) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ –æ–ø—Ä–∞–≤–¥—ã–≤–∞—é—â–∏–π—Å—è –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç —Å–¥–∞—Ç—å—Å—è!');
            return;
        }
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        if (player) {
            player.isAlive = false;
            console.log('üíÄ Player surrendered:', player.name);
            
            clearInterval(gameRoom.timer);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–∞—á–∏
            io.to('game-room').emit('player-surrendered', {
                surrenderedPlayer: player.name,
                players: gameRoom.players
            });
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
            setTimeout(() => {
                nextRound();
            }, 3000);
        }
    });

    socket.on('disconnect', () => {
        console.log('‚ùå User disconnected:', socket.id);
        
        const playerIndex = gameRoom.players.findIndex(p => p.id === socket.id);
        
        if (playerIndex !== -1) {
            const player = gameRoom.players[playerIndex];
            const wasHost = player.isHost;
            
            gameRoom.players.splice(playerIndex, 1);
            
            // –ï—Å–ª–∏ —Ö–æ—Å—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è, –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞
            if (wasHost && gameRoom.players.length > 0) {
                gameRoom.players[0].isHost = true;
            }
            
            // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä—É
            if (gameRoom.players.length === 0) {
                resetGame();
            }
            
            console.log('üì§ Player left:', player.name, 'Remaining:', gameRoom.players.length);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
            io.to('game-room').emit('player-left', {
                leftPlayer: player.name,
                players: gameRoom.players,
                gameState: gameRoom.gameState
            });
        }
    });
    
    socket.on('change-max-players', (data) => {
        console.log('üîß Changing max players to:', data.maxPlayers);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã!');
            return;
        }
        
        const newMaxPlayers = parseInt(data.maxPlayers);
        if (![8, 12, 16].includes(newMaxPlayers)) {
            socket.emit('error', '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç
        if (gameRoom.players.length > newMaxPlayers) {
            socket.emit('error', `–°–µ–π—á–∞—Å –≤ –∏–≥—Ä–µ ${gameRoom.players.length} –∏–≥—Ä–æ–∫–æ–≤. –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç ${newMaxPlayers}.`);
            return;
        }
        
        gameRoom.maxPlayers = newMaxPlayers;
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        io.to('game-room').emit('max-players-changed', {
            maxPlayers: gameRoom.maxPlayers,
            players: gameRoom.players
        });
    });
    
    socket.on('vote-skip-discussion', () => {
        console.log('‚è≠Ô∏è Vote to skip discussion from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'discussion') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ —Ñ–∞–∑–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è!');
            return;
        }
        
        if (gameRoom.skipDiscussionVotes.includes(socket.id)) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –ø—Ä–æ–ø—É—Å–∫!');
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å
        gameRoom.skipDiscussionVotes.push(socket.id);
        
        const requiredVotes = 2; // –í—Å–µ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–≤–Ω–æ 2 –≥–æ–ª–æ—Å–∞
        const currentVotes = gameRoom.skipDiscussionVotes.length;
        
        console.log(`‚è≠Ô∏è Skip votes: ${currentVotes}/${requiredVotes}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
        gameRoom.players.forEach(p => {
            const hasVoted = gameRoom.skipDiscussionVotes.includes(p.id);
            io.to(p.id).emit('skip-discussion-vote-update', {
                votes: currentVotes,
                required: requiredVotes,
                hasVoted: hasVoted
            });
        });
        
        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
        if (currentVotes >= requiredVotes) {
            console.log('‚è≠Ô∏è Skipping discussion - enough votes');
            clearInterval(gameRoom.timer);
            gameRoom.skipDiscussionVotes = []; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–ø—É—Å–∫–µ
            io.to('game-room').emit('discussion-skipped', {
                gamePhase: 'voting',
                timeLeft: 120,
                players: gameRoom.players,
                notificationSettings: gameRoom.notificationSettings // –ù–û–í–û–ï
            });
            
            startVotingPhase();
        }
    });
    
    socket.on('reveal-characteristic', (data) => {
        console.log('üîç Revealing characteristic:', data);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'revelation') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ —Ñ–∞–∑–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è!');
            return;
        }
        
        if (gameRoom.currentTurnPlayer !== socket.id) {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!');
            return;
        }
        
        const characteristic = data.characteristic;
        
        if (!player.characteristics || !player.characteristics[characteristic]) {
            socket.emit('error', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞!');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞ —ç—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞
        if (player.revealedCharacteristics && player.revealedCharacteristics.includes(characteristic)) {
            socket.emit('error', '–≠—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞!');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
        const requiredCards = getRequiredCardsForRound(gameRoom.currentRound);
        const currentlyRevealed = player.cardsRevealedThisRound || 0;
        
        if (currentlyRevealed >= requiredCards) {
            socket.emit('error', '–í—ã —É–∂–µ —Ä–∞—Å–∫—Ä—ã–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ!');
            return;
        }
        
        // –í –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–µ–π
        if (gameRoom.currentRound === 1 && currentlyRevealed === 0 && characteristic !== 'profession') {
            socket.emit('error', '–í –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —Ä–∞—Å–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é!');
            return;
        }
        
        // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
        if (!player.revealedCharacteristics) {
            player.revealedCharacteristics = [];
        }
        
        player.revealedCharacteristics.push(characteristic);
        player.cardsRevealedThisRound = (player.cardsRevealedThisRound || 0) + 1;
        
        console.log(`‚úÖ ${player.name} revealed ${characteristic}: ${player.characteristics[characteristic]} (${player.cardsRevealedThisRound}/${requiredCards})`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
        io.to('game-room').emit('characteristic-revealed', {
            playerId: player.id,
            playerName: player.name,
            characteristic: characteristic,
            value: player.characteristics[characteristic],
            players: gameRoom.players,
            cardsRevealedThisRound: player.cardsRevealedThisRound,
            requiredCards: requiredCards
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª –ª–∏ –∏–≥—Ä–æ–∫ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ
        if (player.cardsRevealedThisRound >= requiredCards) {
            player.hasRevealed = true;
            console.log(`‚úÖ ${player.name} finished revealing for round ${gameRoom.currentRound}`);
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                nextPlayerTurn();
            }, 2000);
        } else {
            // –ò–≥—Ä–æ–∫ –º–æ–∂–µ—Ç —Ä–∞—Å–∫—Ä—ã—Ç—å –µ—â–µ –æ–¥–Ω—É –∫–∞—Ä—Ç—É –≤ —ç—Ç–æ–º —Ö–æ–¥—É
            console.log(`‚è≥ ${player.name} can reveal ${requiredCards - player.cardsRevealedThisRound} more cards`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ö–æ–¥–∞
            gameRoom.timeLeft = 60;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
            io.to('game-room').emit('timer-update', {
                timeLeft: gameRoom.timeLeft,
                gamePhase: gameRoom.gamePhase,
                currentTurnPlayer: gameRoom.currentTurnPlayer
            });
        }
    });
});

// === –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –§–ê–ó–ê–ú–ò ===

function getRequiredCardsForRound(round) {
    if (round === 1) {
        return 2; // –ü—Ä–æ—Ñ–µ—Å—Å–∏—è + 1 –∫–∞—Ä—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä
    } else {
        return 1; // 1 –∫–∞—Ä—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä
    }
}

function startRevelationPhase() {
    console.log('üîç Starting revelation phase for round:', gameRoom.currentRound);
    
    gameRoom.gamePhase = 'revelation';
    gameRoom.playersWhoRevealed = [];
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –¢–û–õ–¨–ö–û –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
    gameRoom.players.forEach(player => {
        player.hasRevealed = false;
        player.cardsRevealedThisRound = 0;
    });
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –∂–∏–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const alivePlayers = gameRoom.players.filter(p => p.isAlive);
    if (alivePlayers.length > 0) {
        gameRoom.currentTurnPlayer = alivePlayers[0].id;
        startPlayerTurn();
    }
}

function startPlayerTurn() {
    gameRoom.timeLeft = 60; // 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞
    
    startGameTimer();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ö–æ–¥–µ
    io.to('game-room').emit('phase-changed', {
        gamePhase: gameRoom.gamePhase,
        currentTurnPlayer: gameRoom.currentTurnPlayer,
        timeLeft: gameRoom.timeLeft,
        players: gameRoom.players,
        currentRound: gameRoom.currentRound
    });
    
    console.log(`üéØ Player turn: ${gameRoom.currentTurnPlayer}, time: ${gameRoom.timeLeft}s, round: ${gameRoom.currentRound}`);
}

function nextPlayerTurn() {
    const alivePlayers = gameRoom.players.filter(p => p.isAlive);
    const currentIndex = alivePlayers.findIndex(p => p.id === gameRoom.currentTurnPlayer);
    
    if (currentIndex === -1) {
        startDiscussionPhase();
        return;
    }
    
    const nextIndex = currentIndex + 1;
    
    if (nextIndex >= alivePlayers.length) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞ –ø–æ –Ω–æ–≤—ã–º –ø—Ä–∞–≤–∏–ª–∞–º
        const allPlayersFinished = alivePlayers.every(player => {
            const requiredCards = getRequiredCardsForRound(gameRoom.currentRound);
            return (player.cardsRevealedThisRound || 0) >= requiredCards;
        });
        
        if (allPlayersFinished) {
            // –í—Å–µ –∏–≥—Ä–æ–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é
            console.log('‚úÖ All players finished revealing for round', gameRoom.currentRound);
            startDiscussionPhase();
        } else {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–º—É –∏–≥—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª
            const nextPlayer = alivePlayers.find(player => {
                const requiredCards = getRequiredCardsForRound(gameRoom.currentRound);
                return (player.cardsRevealedThisRound || 0) < requiredCards;
            });
            
            if (nextPlayer) {
                gameRoom.currentTurnPlayer = nextPlayer.id;
                console.log(`üîÑ Continuing with player: ${nextPlayer.name}`);
                startPlayerTurn();
            } else {
                startDiscussionPhase();
            }
        }
    } else {
        // –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫
        gameRoom.currentTurnPlayer = alivePlayers[nextIndex].id;
        console.log(`‚û°Ô∏è Next player: ${alivePlayers[nextIndex].name}`);
        startPlayerTurn();
    }
}

function startDiscussionPhase() {
    console.log('üí¨ Starting discussion phase');
    
    gameRoom.gamePhase = 'discussion';
    gameRoom.timeLeft = 300; // 5 –º–∏–Ω—É—Ç –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
    gameRoom.currentTurnPlayer = null;
    gameRoom.skipDiscussionVotes = [];
    
    startGameTimer();
    
    io.to('game-room').emit('phase-changed', {
        gamePhase: gameRoom.gamePhase,
        timeLeft: gameRoom.timeLeft,
        currentTurnPlayer: null,
        players: gameRoom.players
    });
}

function startJustificationPhase() {
    console.log('‚öñÔ∏è Starting justification phase');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
    const alivePlayers = gameRoom.players.filter(p => p.isAlive);
    let maxVotes = 0;
    
    alivePlayers.forEach(player => {
        if (player.votes > maxVotes) {
            maxVotes = player.votes;
        }
    });
    
    // –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤ –∏–ª–∏ –º–∞–∫—Å–∏–º—É–º –≥–æ–ª–æ—Å–æ–≤ = 0
    if (maxVotes === 0) {
        console.log('üìä No votes - proceeding to next round');
        nextRound();
        return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
    const playersToJustify = alivePlayers.filter(player => player.votes === maxVotes);
    
    console.log(`‚öñÔ∏è Players to justify (${maxVotes} votes):`, playersToJustify.map(p => p.name));
    
    if (playersToJustify.length === 0) {
        nextRound();
        return;
    }
    
    gameRoom.gamePhase = 'justification';
    gameRoom.justificationQueue = [...playersToJustify];
    gameRoom.currentJustifyingPlayer = null;
    
    // –î–∞–µ–º –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
    gameRoom.players.forEach(player => {
        if (player.isAlive) {
            gameRoom.canChangeVote[player.id] = true;
        }
    });
    
    // –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–µ
    nextJustification();
}

function nextJustification() {
    if (gameRoom.justificationQueue.length === 0) {
        // –í—Å–µ –æ–ø—Ä–∞–≤–¥–∞–ª–∏—Å—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        console.log('‚úÖ All justifications completed - showing results');
        showResults();
        return;
    }
    
    const nextPlayer = gameRoom.justificationQueue.shift();
    gameRoom.currentJustifyingPlayer = nextPlayer.id;
    gameRoom.timeLeft = 120; // 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–µ
    
    console.log(`‚öñÔ∏è Justification turn: ${nextPlayer.name}`);
    
    startGameTimer();
    
    io.to('game-room').emit('justification-started', {
        justifyingPlayer: nextPlayer,
        timeLeft: gameRoom.timeLeft,
        remainingQueue: gameRoom.justificationQueue.length,
        players: gameRoom.players
    });
}

function startSecondVoting() {
    console.log('üó≥Ô∏è Starting second voting phase');
    
    gameRoom.gamePhase = 'voting';
    gameRoom.timeLeft = 120; // 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    
    // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞ - –æ–Ω–∏ –æ—Å—Ç–∞—é—Ç—Å—è
    // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º hasVoted - –∏–≥—Ä–æ–∫–∏ —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
    
    startGameTimer();
    
    io.to('game-room').emit('second-voting-started', {
        gamePhase: gameRoom.gamePhase,
        timeLeft: gameRoom.timeLeft,
        players: gameRoom.players,
        canChangeVote: gameRoom.canChangeVote
    });
}

function startVotingPhase() {
    gameRoom.gamePhase = 'voting';
    gameRoom.timeLeft = 120; // 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    gameRoom.votingResults = {};
    gameRoom.totalVotes = 0;
    gameRoom.skipDiscussionVotes = [];
    gameRoom.justificationQueue = [];
    gameRoom.currentJustifyingPlayer = null;
    gameRoom.canChangeVote = {};
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
    gameRoom.players.forEach(player => {
        player.votes = 0;
        player.hasVoted = false;
        player.votedFor = null;
    });
    
    console.log('üó≥Ô∏è Starting voting phase');
    
    startGameTimer();
    
    io.to('game-room').emit('phase-changed', {
        gamePhase: gameRoom.gamePhase,
        timeLeft: gameRoom.timeLeft,
        players: gameRoom.players
    });
}

// –ò–°–ü–†–ê–í–õ–Ø–ï–ú –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ timeout - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
function handlePhaseTimeout() {
    console.log('‚è∞ Phase timeout:', gameRoom.gamePhase);
    
    switch (gameRoom.gamePhase) {
        case 'revelation':
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
            nextPlayerTurn();
            break;
        case 'discussion':
            startVotingPhase();
            break;
        case 'voting':
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –≥–æ–ª–æ—Å–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è–º
            const hasVotes = Object.keys(gameRoom.votingResults).some(playerId => 
                gameRoom.votingResults[playerId] && gameRoom.votingResults[playerId].length > 0
            );
            
            if (hasVotes) {
                startJustificationPhase();
            } else {
                // –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
                nextRound();
            }
            break;
        case 'justification':
            // –í—Ä–µ–º—è –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
            nextJustification();
            break;
    }
}

function showResults() {
    gameRoom.gamePhase = 'results';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
    let maxVotes = 0;
    let eliminatedPlayer = null;
    
    gameRoom.players.forEach(player => {
        if (player.isAlive && player.votes > maxVotes) {
            maxVotes = player.votes;
            eliminatedPlayer = player;
        }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∏—á—å—é
    const playersWithMaxVotes = gameRoom.players.filter(p => p.isAlive && p.votes === maxVotes);
    
    if (playersWithMaxVotes.length > 1) {
        // –ù–∏—á—å—è - –Ω–∏–∫–æ–≥–æ –Ω–µ –∏—Å–∫–ª—é—á–∞–µ–º
        eliminatedPlayer = null;
        console.log('ü§ù Tie vote - no elimination');
    } else if (eliminatedPlayer && maxVotes > 0) {
        eliminatedPlayer.isAlive = false;
        console.log('üíÄ Player eliminated:', eliminatedPlayer.name);
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—É–Ω–¥–∞
    gameRoom.players.forEach(player => {
        player.hasRevealed = false;
        player.votes = 0;
        player.hasVoted = false;
        player.votedFor = null;
        player.cardsRevealedThisRound = 0;
        // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º revealedCharacteristics - –æ–Ω–∏ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞ –≤—Å—é –∏–≥—Ä—É
    });
    
    gameRoom.votingResults = {};
    gameRoom.revealedThisRound = 0;
    gameRoom.currentTurnPlayer = null;
    gameRoom.justificationQueue = [];
    gameRoom.currentJustifyingPlayer = null;
    gameRoom.canChangeVote = {};
    
    io.to('game-room').emit('round-results', {
        eliminatedPlayer: eliminatedPlayer ? eliminatedPlayer.name : null,
        players: gameRoom.players,
        votingResults: gameRoom.votingResults
    });
    
    // –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
    setTimeout(() => {
        nextRound();
    }, 5000);
}

function nextRound() {
    gameRoom.currentRound++;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    const alivePlayers = gameRoom.players.filter(p => p.isAlive);
    
    // –ò–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è 2 –∏–ª–∏ –º–µ–Ω—å—à–µ –∏–≥—Ä–æ–∫–æ–≤
    if (alivePlayers.length <= 2 || gameRoom.currentRound > gameRoom.maxRounds) {
        endGame();
        return;
    }
    
    // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
    gameRoom.gamePhase = 'preparation';
    gameRoom.timeLeft = 0;
    gameRoom.currentTurnPlayer = null;
    
    console.log('üîÑ Starting round:', gameRoom.currentRound, 'Alive players:', alivePlayers.length);
    
    io.to('game-room').emit('new-round', {
        currentRound: gameRoom.currentRound,
        gamePhase: gameRoom.gamePhase,
        timeLeft: gameRoom.timeLeft,
        players: gameRoom.players,
        notificationSettings: gameRoom.notificationSettings // –ù–û–í–û–ï
    });
}

function endGame() {
    gameRoom.gameState = 'finished';
    gameRoom.gamePhase = 'finished';
    
    if (gameRoom.timer) {
        clearInterval(gameRoom.timer);
    }
    
    const alivePlayers = gameRoom.players.filter(p => p.isAlive);
    
    console.log('üèÅ Game ended. Winners:', alivePlayers.map(p => p.name));
    
    io.to('game-room').emit('game-ended', {
        winners: alivePlayers,
        players: gameRoom.players
    });
    
    // –ß–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä—É
    setTimeout(() => {
        resetGame();
    }, 10000);
}

function resetGame() {
    console.log('üîÑ Resetting game...');
    
    if (gameRoom.timer) {
        clearInterval(gameRoom.timer);
    }
    
    // –û—Å—Ç–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤, –Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    gameRoom.players.forEach((player) => {
        player.isAlive = true;
        player.votes = 0;
        player.hasRevealed = false;
        player.hasVoted = false;
        player.votedFor = null;
        player.cardsRevealedThisRound = 0;
        player.revealedCharacteristics = [];
        player.characteristics = null;
        player.actionCards = [];
    });
    
    gameRoom.gameState = 'lobby';
    gameRoom.gamePhase = 'waiting';
    gameRoom.currentRound = 1;
    gameRoom.timer = null;
    gameRoom.timeLeft = 0;
    gameRoom.votingResults = {};
    gameRoom.revealedThisRound = 0;
    gameRoom.currentTurnPlayer = null;
    gameRoom.playersWhoRevealed = [];
    gameRoom.totalVotes = 0;
    gameRoom.skipDiscussionVotes = [];
    gameRoom.justificationQueue = [];
    gameRoom.currentJustifyingPlayer = null;
    gameRoom.canChangeVote = {};
    // –°–ë–†–ê–°–´–í–ê–ï–ú –ù–ê–°–¢–†–û–ô–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ö –ó–ù–ê–ß–ï–ù–ò–Ø–ú –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ
    gameRoom.notificationSettings = {
        gameStart: false,
        discussionSkipped: false,
        newRound: false,
        playerJoined: false  // –î–û–ë–ê–í–õ–Ø–ï–ú
    };
    
    io.to('game-room').emit('game-reset', {
        players: gameRoom.players,
        gameState: gameRoom.gameState,
        notificationSettings: gameRoom.notificationSettings // –ù–û–í–û–ï
    });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
const professions = [
    "–í—Ä–∞—á", "–£—á–∏—Ç–µ–ª—å", "–ò–Ω–∂–µ–Ω–µ—Ä", "–ü–æ–≤–∞—Ä", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "–ú–µ—Ö–∞–Ω–∏–∫",
    "–ü–∏—Å–∞—Ç–µ–ª—å", "–•—É–¥–æ–∂–Ω–∏–∫", "–ú—É–∑—ã–∫–∞–Ω—Ç", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å", "–§–µ—Ä–º–µ—Ä", "–ü–∏–ª–æ—Ç",
    "–ú–µ–¥—Å–µ—Å—Ç—Ä–∞", "–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π", "–ü–æ–∂–∞—Ä–Ω—ã–π", "–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä", "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫",
    "–î–∏–∑–∞–π–Ω–µ—Ä", "–§–æ—Ç–æ–≥—Ä–∞—Ñ", "–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç", "–ü—Å–∏—Ö–æ–ª–æ–≥", "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä"
];

const healthConditions = [
    "–û—Ç–ª–∏—á–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "–•–æ—Ä–æ—à–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
    "–ë–ª–∏–∑–æ—Ä—É–∫–æ—Å—Ç—å", "–î–∞–ª—å–Ω–æ–∑–æ—Ä–∫–æ—Å—Ç—å", "–ê—Å—Ç–º–∞", "–ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –ø—ã–ª—å",
    "–ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö", "–î–∏–∞–±–µ—Ç", "–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è", "–ê—Ä—Ç—Ä–∏—Ç",
    "–•—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å", "–ú–∏–≥—Ä–µ–Ω–∏", "–ë–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞", "–î–µ–ø—Ä–µ—Å—Å–∏—è"
];

const hobbies = [
    "–ß—Ç–µ–Ω–∏–µ", "–ö—É–ª–∏–Ω–∞—Ä–∏—è", "–°–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ", "–†–∏—Å–æ–≤–∞–Ω–∏–µ", "–ú—É–∑—ã–∫–∞",
    "–°–ø–æ—Ä—Ç", "–¢–∞–Ω—Ü—ã", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "–†—É–∫–æ–¥–µ–ª–∏–µ", "–ò–≥—Ä—ã", "–†—ã–±–∞–ª–∫–∞", "–û—Ö–æ—Ç–∞", "–ô–æ–≥–∞", "–ú–µ–¥–∏—Ç–∞—Ü–∏—è"
];

const phobias = [
    "–ë–æ—è–∑–Ω—å —Ç–µ–º–Ω–æ—Ç—ã", "–ë–æ—è–∑–Ω—å –≤—ã—Å–æ—Ç—ã", "–ë–æ—è–∑–Ω—å –∑–∞–º–∫–Ω—É—Ç—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤",
    "–ë–æ—è–∑–Ω—å –ø–∞—É–∫–æ–≤", "–ë–æ—è–∑–Ω—å –∑–º–µ–π", "–ë–æ—è–∑–Ω—å —Å–æ–±–∞–∫", "–ë–æ—è–∑–Ω—å –≤–æ–¥—ã",
    "–ë–æ—è–∑–Ω—å –æ–≥–Ω—è", "–ë–æ—è–∑–Ω—å —Ç–æ–ª–ø—ã", "–ë–æ—è–∑–Ω—å –ø—É–±–ª–∏—á–Ω—ã—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π"
];

const baggage = [
    "–†—é–∫–∑–∞–∫ —Å –µ–¥–æ–π", "–ê–ø—Ç–µ—á–∫–∞", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "–û—Ä—É–∂–∏–µ", "–ö–Ω–∏–≥–∏",
    "–°–µ–º–µ–Ω–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π", "–†–∞–¥–∏–æ", "–§–æ–Ω–∞—Ä–∏–∫", "–û–¥–µ—è–ª–∞", "–û–¥–µ–∂–¥–∞",
    "–î–æ–∫—É–º–µ–Ω—Ç—ã", "–î–µ–Ω—å–≥–∏", "–£–∫—Ä–∞—à–µ–Ω–∏—è", "–õ–µ–∫–∞—Ä—Å—Ç–≤–∞", "–ö–æ–º–ø—å—é—Ç–µ—Ä"
];

const facts = [
    "–ë—ã–ª –≤ —Ç—é—Ä—å–º–µ", "–°–ø–∞—Å —á—å—é-—Ç–æ –∂–∏–∑–Ω—å", "–í—ã–∏–≥—Ä–∞–ª –≤ –ª–æ—Ç–µ—Ä–µ—é",
    "–ó–Ω–∞–µ—Ç 5 —è–∑—ã–∫–æ–≤", "–ß–µ–º–ø–∏–æ–Ω –ø–æ —à–∞—Ö–º–∞—Ç–∞–º", "–ë—ã–≤—à–∏–π –≤–æ–µ–Ω–Ω—ã–π",
    "–ò–º–µ–µ—Ç –¥–≤–æ–π–Ω–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ", "–†–∞–±–æ—Ç–∞–ª –≤ —Ü–∏—Ä–∫–µ", "–ü–∏—Å–∞–ª –∫–Ω–∏–≥–∏",
    "–ò–∑–æ–±—Ä–µ–ª —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞–ª –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É",
    "–í—ã–∂–∏–ª –≤ –∞–≤–∏–∞–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–µ", "–í—Å—Ç—Ä–µ—á–∞–ª –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç—å", "–£–º–µ–µ—Ç —á–∏—Ç–∞—Ç—å –º—ã—Å–ª–∏",
    "–í–ª–∞–¥–µ–µ—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é", "–£—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Ä–µ–∞–ª–∏—Ç–∏-—à–æ—É", "–ì–æ–≤–æ—Ä–∏—Ç –Ω–∞ 3+ —è–∑—ã–∫–∞—Ö",
    "–ò–º–µ–µ—Ç —Ç–∞—Ç—É–∏—Ä–æ–≤–∫—É", "–ë–æ–∏—Ç—Å—è —Ç–µ–º–Ω–æ—Ç—ã", "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç —á—Ç–æ-—Ç–æ —Ä–µ–¥–∫–æ–µ",
    "–†–∞–±–æ—Ç–∞–ª –≤ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–µ", "–ò–º–µ–µ—Ç –Ω–µ–æ–±—ã—á–Ω–æ–µ —Ö–æ–±–±–∏", "–ë—ã–ª –Ω–∞ —Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏–∏"
];

const actionCards = [
    { id: 1, name: "–¶–µ–ª–∏—Ç–µ–ª—å", description: "–ú–æ–∂–µ—Ç–µ —Å–ø–∞—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –æ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è", type: "protective", usesLeft: 1 },
    { id: 2, name: "–î–µ—Ç–µ–∫—Ç–∏–≤", description: "–£–∑–Ω–∞–π—Ç–µ –æ–¥–Ω—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞", type: "investigative", usesLeft: 1 },
    { id: 3, name: "–°–∞–±–æ—Ç–∞–∂–Ω–∏–∫", description: "–û—Ç–º–µ–Ω–∏—Ç–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞", type: "disruptive", usesLeft: 1 },
    { id: 4, name: "–õ–∏–¥–µ—Ä", description: "–í–∞—à –≥–æ–ª–æ—Å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞ –¥–≤–∞", type: "influential", usesLeft: 1 }
];

function generateCharacteristics() {
    const availableFacts = [...facts]; // –ö–æ–ø–∏—è –º–∞—Å—Å–∏–≤–∞
    const fact1 = getRandomItem(availableFacts);
    
    // –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–∫—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    const fact1Index = availableFacts.indexOf(fact1);
    availableFacts.splice(fact1Index, 1);
    
    const fact2 = getRandomItem(availableFacts);
    
    return {
        profession: getRandomItem(professions),
        health: getRandomItem(healthConditions),
        hobby: getRandomItem(hobbies),
        phobia: getRandomItem(phobias),
        baggage: getRandomItem(baggage),
        fact1: fact1,
        fact2: fact2
    };
}

function getRandomActionCard() {
    return { ...getRandomItem(actionCards) };
}

function getRandomItem(array) {
    return array[Math.floor(Math.random() * array.length)];
}

const PORT = process.env.PORT || 3000;
const HOST = process.env.HOST || '0.0.0.0';

server.listen(PORT, HOST, () => {
    console.log(`üåê Single Room Bunker Game running on ${HOST}:${PORT}`);
    console.log(`üìä Environment: ${process.env.NODE_ENV || 'development'}`);
    console.log(`üéÆ Game room initialized with max ${gameRoom.maxPlayers} players`);
    console.log(`‚ö° Server ready to accept connections`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üõë SIGTERM received, shutting down gracefully');
    server.close(() => {
        console.log('‚úÖ Server closed');
        process.exit(0);
    });
});

process.on('SIGINT', () => {
    console.log('üõë SIGINT received, shutting down gracefully');
    server.close(() => {
        console.log('‚úÖ Server closed');
        process.exit(0);
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (err) => {
    console.error('üí• Uncaught Exception:', err);
    process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('üí• Unhandled Rejection at:', promise, 'reason:', reason);
    process.exit(1);
});

function startGameTimer() {
    if (gameRoom.timer) {
        clearInterval(gameRoom.timer);
    }
    
    gameRoom.timer = setInterval(() => {
        gameRoom.timeLeft--;
        
        if (gameRoom.timeLeft <= 0) {
            clearInterval(gameRoom.timer);
            handlePhaseTimeout();
        } else {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
            if (gameRoom.timeLeft % 5 === 0 || gameRoom.timeLeft <= 10) {
                io.to('game-room').emit('timer-update', {
                    timeLeft: gameRoom.timeLeft,
                    gamePhase: gameRoom.gamePhase,
                    currentTurnPlayer: gameRoom.currentTurnPlayer
                });
            }
        }
    }, 1000);
}