const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');

console.log('üöÄ Starting Single Room Bunker Game Server...');

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(__dirname));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    console.log('üìÑ Serving main page');
    res.sendFile(path.join(__dirname, 'index.html'));
});

// API –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', (req, res) => {
    try {
        res.json({ 
            status: 'OK', 
            timestamp: new Date().toISOString(),
            players: gameRoom ? gameRoom.players.length : 0,
            gameState: gameRoom ? gameRoom.gameState : 'unknown',
            connections: io.engine ? io.engine.clientsCount : 0,
            uptime: process.uptime(),
            memory: process.memoryUsage()
        });
    } catch (error) {
        console.error('Health check error:', error);
        res.status(500).json({ 
            status: 'ERROR', 
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ timeout —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ–º –∫–∞—Ä—Ç
function handlePhaseTimeout() {
    console.log('‚è∞ Phase timeout:', gameRoom.gamePhase);
    
    switch (gameRoom.gamePhase) {
        case 'revelation':
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ —É—Å–ø–µ–ª
            const currentPlayer = gameRoom.players.find(p => p.id === gameRoom.currentTurnPlayer);
            if (currentPlayer && currentPlayer.isAlive) {
                const requiredCards = getRequiredCardsForRound(gameRoom.currentRound);
                const currentlyRevealed = currentPlayer.cardsRevealedThisRound || 0;
                
                if (currentlyRevealed < requiredCards) {
                    console.log(`‚è∞ Time's up for ${currentPlayer.name}, auto-revealing remaining cards`);
                    autoRevealRemainingCards(currentPlayer);
                }
            }
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
            nextPlayerTurn();
            break;
        case 'discussion':
            startVotingPhase();
            break;
        case 'voting':
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –≥–æ–ª–æ—Å–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è–º
            const hasVotes = Object.keys(gameRoom.votingResults).some(playerId => 
                gameRoom.votingResults[playerId] && gameRoom.votingResults[playerId].length > 0
            );
            
            if (hasVotes) {
                startJustificationPhase();
            } else {
                // –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
                nextRound();
            }
            break;
        case 'justification':
            // –í—Ä–µ–º—è –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
            nextJustification();
            break;
    }
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–∞—Ä—Ç
async function autoRevealRemainingCards(player) {
    const requiredCards = getRequiredCardsForRound(gameRoom.currentRound);
    const currentlyRevealed = player.cardsRevealedThisRound || 0;
    const cardsToReveal = requiredCards - currentlyRevealed;
    
    if (cardsToReveal <= 0) return;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const allCharacteristics = ['profession', 'health', 'hobby', 'phobia', 'baggage', 'fact1', 'fact2'];
    const alreadyRevealed = player.revealedCharacteristics || [];
    const availableCharacteristics = allCharacteristics.filter(char => 
        !alreadyRevealed.includes(char) && player.characteristics[char]
    );
    
    // –í –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞, —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –µ—ë –ø–µ—Ä–≤–æ–π
    if (gameRoom.currentRound === 1 && !alreadyRevealed.includes('profession')) {
        if (!player.revealedCharacteristics) {
            player.revealedCharacteristics = [];
        }
        
        player.revealedCharacteristics.push('profession');
        player.cardsRevealedThisRound = (player.cardsRevealedThisRound || 0) + 1;
        
        console.log(`üé≤ Auto-revealed profession for ${player.name}: ${player.characteristics.profession}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏
        io.to('game-room').emit('characteristic-revealed', {
            playerId: player.id,
            playerName: player.name,
            characteristic: 'profession',
            value: player.characteristics.profession,
            players: gameRoom.players,
            cardsRevealedThisRound: player.cardsRevealedThisRound,
            requiredCards: requiredCards,
            autoRevealed: true
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        const professionIndex = availableCharacteristics.indexOf('profession');
        if (professionIndex !== -1) {
            availableCharacteristics.splice(professionIndex, 1);
        }
    }
    
    // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ä—Ç—ã —Å–ª—É—á–∞–π–Ω–æ
    const remainingToReveal = requiredCards - (player.cardsRevealedThisRound || 0);
    
    for (let i = 0; i < remainingToReveal && availableCharacteristics.length > 0; i++) {
        const randomIndex = Math.floor(Math.random() * availableCharacteristics.length);
        const characteristic = availableCharacteristics.splice(randomIndex, 1)[0];
        
        if (!player.revealedCharacteristics) {
            player.revealedCharacteristics = [];
        }
        
        player.revealedCharacteristics.push(characteristic);
        player.cardsRevealedThisRound = (player.cardsRevealedThisRound || 0) + 1;
        
        console.log(`üé≤ Auto-revealed ${characteristic} for ${player.name}: ${player.characteristics[characteristic]}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏
        io.to('game-room').emit('characteristic-revealed', {
            playerId: player.id,
            playerName: player.name,
            characteristic: characteristic,
            value: player.characteristics[characteristic],
            players: gameRoom.players,
            cardsRevealedThisRound: player.cardsRevealedThisRound,
            requiredCards: requiredCards,
            autoRevealed: true
        });
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ä–∞—Å–∫—Ä—ã—Ç–∏—è–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
        await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –∏–≥—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ
    player.hasRevealed = true;
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
    io.to('game-room').emit('auto-reveal-completed', {
        playerName: player.name,
        cardsRevealed: player.cardsRevealedThisRound,
        players: gameRoom.players
    });
}

// Catch-all –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ä–æ—É—Ç–æ–≤
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// === –ò–ì–†–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ===

const gameRoom = {
    players: [],
    gameState: 'lobby',
    maxPlayers: 8,
    gamePhase: 'waiting',
    currentRound: 1,
    maxRounds: 3,
    timer: null,
    timeLeft: 0,
    votingResults: {},
    revealedThisRound: 0,
    currentTurnPlayer: null,
    playersWhoRevealed: [],
    totalVotes: 0,
    skipDiscussionVotes: [],
    justificationQueue: [],
    currentJustifyingPlayer: null,
    justificationPhase: 1,
    canChangeVote: {},
    startRoundVotes: [],  // –ì–æ–ª–æ—Å–∞ –∑–∞ –Ω–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞
    activeEffects: {} // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∫–∞—Ä—Ç
};

// Socket.IO –ª–æ–≥–∏–∫–∞
io.on('connection', (socket) => {
    console.log('‚úÖ User connected:', socket.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –Ω–æ–≤–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é
    socket.emit('room-state', {
        players: gameRoom.players,
        gameState: gameRoom.gameState,
        gamePhase: gameRoom.gamePhase,
        currentRound: gameRoom.currentRound,
        timeLeft: gameRoom.timeLeft,
        currentTurnPlayer: gameRoom.currentTurnPlayer,
        maxPlayers: gameRoom.maxPlayers,
        startRoundVotes: gameRoom.startRoundVotes || [] // –î–û–ë–ê–í–õ–Ø–ï–ú
    });
    
    socket.on('join-game', (data) => {
        console.log('üéØ Player joining:', data.playerName);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤
        if (gameRoom.players.length >= gameRoom.maxPlayers) {
            socket.emit('error', '–ò–≥—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤: ' + gameRoom.maxPlayers);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–æ –ª–∏ –∏–º—è
        const existingPlayer = gameRoom.players.find(p => p.name === data.playerName);
        if (existingPlayer) {
            socket.emit('error', '–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –≤ –∏–≥—Ä–µ! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.');
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
        const newPlayer = {
            id: socket.id,
            name: data.playerName,
            isHost: gameRoom.players.length === 0, // –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ö–æ—Å—Ç–æ–º
            joinedAt: new Date(),
            isAlive: true,
            votes: 0,
            hasRevealed: false,
            revealedCharacteristics: [],
            characteristics: null,
            actionCards: [],
            hasVoted: false,
            votedFor: null,
            cardsRevealedThisRound: 0
        };
        
        gameRoom.players.push(newPlayer);
        socket.join('game-room');
        
        console.log('‚úÖ Player joined:', data.playerName, 'Total players:', gameRoom.players.length);
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - –¥–æ–±–∞–≤–ª—è–µ–º startRoundVotes
        socket.emit('join-confirmed', {
            playerId: socket.id,
            playerName: data.playerName,
            isHost: newPlayer.isHost,
            maxPlayers: gameRoom.maxPlayers,
            startRoundVotes: gameRoom.startRoundVotes || [] // –î–û–ë–ê–í–õ–Ø–ï–ú
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º - –¥–æ–±–∞–≤–ª—è–µ–º startRoundVotes
        io.to('game-room').emit('player-joined', {
            players: gameRoom.players,
            newPlayer: data.playerName,
            gameState: gameRoom.gameState,
            maxPlayers: gameRoom.maxPlayers,
            startRoundVotes: gameRoom.startRoundVotes || [] // –î–û–ë–ê–í–õ–Ø–ï–ú
        });
    });
    
    socket.on('start-game', () => {
        console.log('üéÆ Game start requested by:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!');
            return;
        }
        
        if (gameRoom.players.length < 2) {
            socket.emit('error', '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!');
            return;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        gameRoom.players.forEach(player => {
            player.characteristics = generateCharacteristics();
            player.actionCards = [getRandomActionCard()];
            player.hasRevealed = false;
            player.hasVoted = false;
            player.revealedCharacteristics = [];
            player.cardsRevealedThisRound = 0;
        });
        
        gameRoom.gameState = 'playing';
        gameRoom.gamePhase = 'preparation';
        gameRoom.currentRound = 1;
        gameRoom.timeLeft = 0;
        gameRoom.playersWhoRevealed = [];
        gameRoom.currentTurnPlayer = null;
        
        console.log('üöÄ Game started! Players:', gameRoom.players.length);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
        io.to('game-room').emit('game-started', {
            players: gameRoom.players,
            gameState: gameRoom.gameState,
            gamePhase: gameRoom.gamePhase,
            currentRound: gameRoom.currentRound,
            timeLeft: gameRoom.timeLeft
        });
    });
    
    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ start-round - —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    socket.on('start-round', () => {
        console.log('üéØ Round start vote from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'preparation') {
            socket.emit('error', '–†–∞—É–Ω–¥ —É–∂–µ –Ω–∞—á–∞–ª—Å—è!');
            return;
        }
        
        if (gameRoom.startRoundVotes.includes(socket.id)) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –Ω–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞!');
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å
        gameRoom.startRoundVotes.push(socket.id);
        
        const requiredVotes = 2; // –í—Å–µ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–≤–Ω–æ 2 –≥–æ–ª–æ—Å–∞
        const currentVotes = gameRoom.startRoundVotes.length;
        
        console.log(`üéØ Start round votes: ${currentVotes}/${requiredVotes}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
        gameRoom.players.forEach(p => {
            const hasVoted = gameRoom.startRoundVotes.includes(p.id);
            io.to(p.id).emit('start-round-vote-update', {
                votes: currentVotes,
                required: requiredVotes,
                hasVoted: hasVoted
            });
        });
        
        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤ - –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞—É–Ω–¥
        if (currentVotes >= requiredVotes) {
            console.log('üéØ Starting round - enough votes');
            gameRoom.startRoundVotes = []; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
            startRevelationPhase();
        }
    });
    
    socket.on('vote-player', (data) => {
        console.log('üó≥Ô∏è Vote from:', socket.id, 'for:', data.targetId);
        
        if (gameRoom.gamePhase !== 'voting') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
            return;
        }
        
        const voter = gameRoom.players.find(p => p.id === socket.id);
        const target = gameRoom.players.find(p => p.id === data.targetId);
        
        if (!voter || !target || !voter.isAlive || !target.isAlive) {
            socket.emit('error', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!');
            return;
        }
        
        if (voter.hasVoted) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–æ–π–Ω–æ–π –≥–æ–ª–æ—Å
        const isDoubleVote = gameRoom.activeEffects[voter.id] && gameRoom.activeEffects[voter.id].doubleVote;
        const voteWeight = isDoubleVote ? 2 : 1;
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å
        if (!gameRoom.votingResults[data.targetId]) {
            gameRoom.votingResults[data.targetId] = [];
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å(—ã)
        for (let i = 0; i < voteWeight; i++) {
            gameRoom.votingResults[data.targetId].push(voter.id);
        }
        
        voter.hasVoted = true;
        voter.votedFor = data.targetId;
        
        // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –¥–≤–æ–π–Ω–æ–π –≥–æ–ª–æ—Å, —É–±–∏—Ä–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç
        if (isDoubleVote) {
            gameRoom.activeEffects[voter.id].doubleVote = false;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤
        gameRoom.players.forEach(player => {
            player.votes = gameRoom.votingResults[player.id] ? gameRoom.votingResults[player.id].length : 0;
        });
        
        console.log(`üìä Vote weight: ${voteWeight}, Double vote: ${isDoubleVote}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        io.to('game-room').emit('vote-update', {
            players: gameRoom.players,
            votingResults: gameRoom.votingResults,
            voterName: voter.name,
            targetName: target.name,
            voteWeight: voteWeight
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        const alivePlayers = gameRoom.players.filter(p => p.isAlive);
        const votedPlayers = alivePlayers.filter(p => p.hasVoted);
        
        if (votedPlayers.length >= alivePlayers.length) {
            console.log('‚úÖ All players voted - starting justification phase');
            clearInterval(gameRoom.timer);
            setTimeout(() => {
                startJustificationPhase();
            }, 1000);
        }
    });

    socket.on('change-vote', (data) => {
        console.log('üîÑ Change vote from:', socket.id, 'to:', data.targetId);
        
        if (gameRoom.gamePhase !== 'voting') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
            return;
        }
        
        const voter = gameRoom.players.find(p => p.id === socket.id);
        const newTarget = gameRoom.players.find(p => p.id === data.targetId);
        
        if (!voter || !newTarget || !voter.isAlive || !newTarget.isAlive) {
            socket.emit('error', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–º–µ–Ω–∞ –≥–æ–ª–æ—Å–∞!');
            return;
        }
        
        if (!gameRoom.canChangeVote[voter.id]) {
            socket.emit('error', '–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã –≥–æ–ª–æ—Å–∞!');
            return;
        }
        
        if (!voter.votedFor) {
            socket.emit('error', '–í—ã –µ—â–µ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!');
            return;
        }
        
        if (voter.votedFor === data.targetId) {
            socket.emit('error', '–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞!');
            return;
        }
        
        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –≥–æ–ª–æ—Å
        const oldTargetVotes = gameRoom.votingResults[voter.votedFor];
        if (oldTargetVotes) {
            const voteIndex = oldTargetVotes.indexOf(voter.id);
            if (voteIndex !== -1) {
                oldTargetVotes.splice(voteIndex, 1);
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å
        if (!gameRoom.votingResults[data.targetId]) {
            gameRoom.votingResults[data.targetId] = [];
        }
        gameRoom.votingResults[data.targetId].push(voter.id);
        voter.votedFor = data.targetId;
        
        // –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã –≥–æ–ª–æ—Å–∞
        gameRoom.canChangeVote[voter.id] = false;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤
        gameRoom.players.forEach(player => {
            player.votes = gameRoom.votingResults[player.id] ? gameRoom.votingResults[player.id].length : 0;
        });
        
        console.log(`üîÑ Vote changed from ${voter.name}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        io.to('game-room').emit('vote-update', {
            players: gameRoom.players,
            votingResults: gameRoom.votingResults,
            canChangeVote: gameRoom.canChangeVote
        });
    });

    socket.on('finish-justification', () => {
        console.log('‚úÖ Finish justification from:', socket.id);
        
        if (gameRoom.gamePhase !== 'justification') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ —Ñ–∞–∑–∞ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è!');
            return;
        }
        
        if (gameRoom.currentJustifyingPlayer !== socket.id) {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à–µ –≤—Ä–µ–º—è –¥–ª—è –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è!');
            return;
        }
        
        clearInterval(gameRoom.timer);
        nextJustification();
    });

    socket.on('surrender', () => {
        console.log('üè≥Ô∏è Surrender from:', socket.id);
        
        if (gameRoom.gamePhase !== 'justification') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ —Ñ–∞–∑–∞ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è!');
            return;
        }
        
        if (gameRoom.currentJustifyingPlayer !== socket.id) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ –æ–ø—Ä–∞–≤–¥—ã–≤–∞—é—â–∏–π—Å—è –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç —Å–¥–∞—Ç—å—Å—è!');
            return;
        }
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        if (player) {
            player.isAlive = false;
            console.log('üíÄ Player surrendered:', player.name);
            
            clearInterval(gameRoom.timer);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–∞—á–∏
            io.to('game-room').emit('player-surrendered', {
                surrenderedPlayer: player.name,
                players: gameRoom.players
            });
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
            setTimeout(() => {
                nextRound();
            }, 3000);
        }
    });

    socket.on('disconnect', () => {
        console.log('‚ùå User disconnected:', socket.id);
        
        const playerIndex = gameRoom.players.findIndex(p => p.id === socket.id);
        
        if (playerIndex !== -1) {
            const player = gameRoom.players[playerIndex];
            const wasHost = player.isHost;
            
            gameRoom.players.splice(playerIndex, 1);
            
            // –ï—Å–ª–∏ —Ö–æ—Å—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è, –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞
            if (wasHost && gameRoom.players.length > 0) {
                gameRoom.players[0].isHost = true;
            }
            
            // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä—É
            if (gameRoom.players.length === 0) {
                resetGame();
            }
            
            console.log('üì§ Player left:', player.name, 'Remaining:', gameRoom.players.length);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
            io.to('game-room').emit('player-left', {
                leftPlayer: player.name,
                players: gameRoom.players,
                gameState: gameRoom.gameState
            });
        }
    });
    
    socket.on('change-max-players', (data) => {
        console.log('üîß Changing max players to:', data.maxPlayers);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isHost) {
            socket.emit('error', '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        if (gameRoom.gameState !== 'lobby') {
            socket.emit('error', '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã!');
            return;
        }
        
        const newMaxPlayers = parseInt(data.maxPlayers);
        if (![8, 12, 16].includes(newMaxPlayers)) {
            socket.emit('error', '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤!');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç
        if (gameRoom.players.length > newMaxPlayers) {
            socket.emit('error', `–°–µ–π—á–∞—Å –≤ –∏–≥—Ä–µ ${gameRoom.players.length} –∏–≥—Ä–æ–∫–æ–≤. –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç ${newMaxPlayers}.`);
            return;
        }
        
        gameRoom.maxPlayers = newMaxPlayers;
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        io.to('game-room').emit('max-players-changed', {
            maxPlayers: gameRoom.maxPlayers,
            players: gameRoom.players
        });
    });
    
    socket.on('vote-skip-discussion', () => {
        console.log('‚è≠Ô∏è Vote to skip discussion from:', socket.id);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'discussion') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ —Ñ–∞–∑–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è!');
            return;
        }
        
        if (gameRoom.skipDiscussionVotes.includes(socket.id)) {
            socket.emit('error', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –ø—Ä–æ–ø—É—Å–∫!');
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å
        gameRoom.skipDiscussionVotes.push(socket.id);
        
        const requiredVotes = 2; // –í—Å–µ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–≤–Ω–æ 2 –≥–æ–ª–æ—Å–∞
        const currentVotes = gameRoom.skipDiscussionVotes.length;
        
        console.log(`‚è≠Ô∏è Skip votes: ${currentVotes}/${requiredVotes}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
        gameRoom.players.forEach(p => {
            const hasVoted = gameRoom.skipDiscussionVotes.includes(p.id);
            io.to(p.id).emit('skip-discussion-vote-update', {
                votes: currentVotes,
                required: requiredVotes,
                hasVoted: hasVoted
            });
        });
        
        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
        if (currentVotes >= requiredVotes) {
            console.log('‚è≠Ô∏è Skipping discussion - enough votes');
            clearInterval(gameRoom.timer);
            gameRoom.skipDiscussionVotes = []; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–ø—É—Å–∫–µ
            io.to('game-room').emit('discussion-skipped', {
                gamePhase: 'voting',
                timeLeft: 120,
                players: gameRoom.players
                // –£–ë–ò–†–ê–ï–ú notificationSettings
            });
            
            startVotingPhase();
        }
    });
    
    socket.on('reveal-characteristic', (data) => {
        console.log('üîç Revealing characteristic:', data);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏!');
            return;
        }
        
        if (gameRoom.gamePhase !== 'revelation') {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ —Ñ–∞–∑–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è!');
            return;
        }
        
        if (gameRoom.currentTurnPlayer !== socket.id) {
            socket.emit('error', '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!');
            return;
        }
        
        const characteristic = data.characteristic;
        
        if (!player.characteristics || !player.characteristics[characteristic]) {
            socket.emit('error', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞!');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞ —ç—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞
        if (player.revealedCharacteristics && player.revealedCharacteristics.includes(characteristic)) {
            socket.emit('error', '–≠—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞!');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
        const requiredCards = getRequiredCardsForRound(gameRoom.currentRound);
        const currentlyRevealed = player.cardsRevealedThisRound || 0;
        
        if (currentlyRevealed >= requiredCards) {
            socket.emit('error', '–í—ã —É–∂–µ —Ä–∞—Å–∫—Ä—ã–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ!');
            return;
        }
        
        // –í –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–µ–π
        if (gameRoom.currentRound === 1 && currentlyRevealed === 0 && characteristic !== 'profession') {
            socket.emit('error', '–í –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —Ä–∞—Å–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é!');
            return;
        }
        
        // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
        if (!player.revealedCharacteristics) {
            player.revealedCharacteristics = [];
        }
        
        player.revealedCharacteristics.push(characteristic);
        player.cardsRevealedThisRound = (player.cardsRevealedThisRound || 0) + 1;
        
        console.log(`‚úÖ ${player.name} revealed ${characteristic}: ${player.characteristics[characteristic]} (${player.cardsRevealedThisRound}/${requiredCards})`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
        io.to('game-room').emit('characteristic-revealed', {
            playerId: player.id,
            playerName: player.name,
            characteristic: characteristic,
            value: player.characteristics[characteristic],
            players: gameRoom.players,
            cardsRevealedThisRound: player.cardsRevealedThisRound,
            requiredCards: requiredCards
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª –ª–∏ –∏–≥—Ä–æ–∫ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ
        if (player.cardsRevealedThisRound >= requiredCards) {
            player.hasRevealed = true;
            console.log(`‚úÖ ${player.name} finished revealing for round ${gameRoom.currentRound}`);
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                nextPlayerTurn();
            }, 2000);
        } else {
            // –ò–≥—Ä–æ–∫ –º–æ–∂–µ—Ç —Ä–∞—Å–∫—Ä—ã—Ç—å –µ—â–µ –æ–¥–Ω—É –∫–∞—Ä—Ç—É –≤ —ç—Ç–æ–º —Ö–æ–¥—É
            console.log(`‚è≥ ${player.name} can reveal ${requiredCards - player.cardsRevealedThisRound} more cards`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ö–æ–¥–∞
            gameRoom.timeLeft = 60;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
            io.to('game-room').emit('timer-update', {
                timeLeft: gameRoom.timeLeft,
                gamePhase: gameRoom.gamePhase,
                currentTurnPlayer: gameRoom.currentTurnPlayer
            });
        }
    });
    
    // –ü–ï–†–ï–ú–ï–©–ê–ï–ú –°–Æ–î–ê - –≤–Ω—É—Ç—Ä—å connection –±–ª–æ–∫–∞
    socket.on('use-action-card', (data) => {
        console.log('üéØ Action card use request:', data);
        
        const player = gameRoom.players.find(p => p.id === socket.id);
        
        if (!player || !player.isAlive) {
            socket.emit('error', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π!');
            return;
        }
        
        if (!player.actionCards || player.actionCards.length === 0) {
            socket.emit('error', '–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç –¥–µ–π—Å—Ç–≤–∏–π!');
            return;
        }
        
        const actionCard = player.actionCards.find(card => card.id === data.cardId);
        
        if (!actionCard) {
            socket.emit('error', '–ö–∞—Ä—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
            return;
        }
        
        if (actionCard.usesLeft <= 0) {
            socket.emit('error', '–ö–∞—Ä—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞!');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –≤ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑–µ
        if (!canUseActionCard(actionCard, gameRoom.gamePhase)) {
            socket.emit('error', `–ö–∞—Ä—Ç—É "${actionCard.name}" –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑–µ!`);
            return;
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ä—Ç—É
        const success = useActionCard(player, actionCard, data.targetId);
        
        if (success) {
            actionCard.usesLeft--;
            console.log(`‚ú® ${player.name} used action card: ${actionCard.name}`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
            io.to('game-room').emit('action-card-used', {
                playerId: player.id,
                playerName: player.name,
                cardName: actionCard.name,
                cardType: actionCard.type,
                players: gameRoom.players,
                targetId: data.targetId
            });
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    socket.on('error', function(errorMessage) {
        console.error('‚ùå Socket error:', errorMessage);
        socket.emit('error', errorMessage);
    });

}); // –ö–û–ù–ï–¶ io.on('connection')

// –£–ë–ò–†–ê–ï–ú –î–£–ë–õ–ò–†–£–Æ–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö use-action-card –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤–Ω–µ connection –±–ª–æ–∫–∞
// socket.on('use-action-card', ...) - –£–î–ê–õ–Ø–ï–ú –ü–û–õ–ù–û–°–¢–¨–Æ

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
function canUseActionCard(card, gamePhase) {
    switch (card.type) {
        case 'voting':
            return gamePhase === 'voting';
        case 'investigative':
            return ['discussion', 'voting'].includes(gamePhase);
        case 'protective':
            return gamePhase === 'results';
        case 'stealth':
            return gamePhase === 'voting';
        case 'disruptive':
            return ['discussion', 'voting', 'justification'].includes(gamePhase);
        case 'control':
            return ['discussion', 'voting'].includes(gamePhase);
        default:
            return true;
    }
}

// –§—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–µ–π—Å—Ç–≤–∏—è
function useActionCard(player, card, targetId) {
    switch (card.type) {
        case 'voting':
            // –î–≤–æ–π–Ω–æ–π –≥–æ–ª–æ—Å
            if (!gameRoom.activeEffects[player.id]) {
                gameRoom.activeEffects[player.id] = {};
            }
            gameRoom.activeEffects[player.id].doubleVote = true;
            return true;
            
        case 'investigative':
            // –î–µ—Ç–µ–∫—Ç–∏–≤ - –ø–æ–∫–∞–∑–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
            if (targetId) {
                const target = gameRoom.players.find(p => p.id === targetId);
                if (target && target.characteristics) {
                    const hiddenCharacteristics = ['profession', 'health', 'hobby', 'phobia', 'baggage', 'fact1', 'fact2']
                        .filter(key => !target.revealedCharacteristics.includes(key));
                    
                    if (hiddenCharacteristics.length > 0) {
                        const randomCharacteristic = hiddenCharacteristics[Math.floor(Math.random() * hiddenCharacteristics.length)];
                        
                        io.to(player.id).emit('detective-result', {
                            targetName: target.name,
                            characteristic: randomCharacteristic,
                            value: target.characteristics[randomCharacteristic]
                        });
                        return true;
                    }
                }
            }
            return false;
            
        case 'protective':
            // –ó–∞—â–∏—Ç–Ω–∏–∫ - —Å–ø–∞—Å—Ç–∏ –æ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            if (targetId) {
                if (!gameRoom.activeEffects.protected) {
                    gameRoom.activeEffects.protected = [];
                }
                gameRoom.activeEffects.protected.push(targetId);
                return true;
            }
            return false;
            
        case 'stealth':
            // –ê–Ω–æ–Ω–∏–º–Ω—ã–π –≥–æ–ª–æ—Å
            if (!gameRoom.activeEffects[player.id]) {
                gameRoom.activeEffects[player.id] = {};
            }
            gameRoom.activeEffects[player.id].anonymousVote = true;
            return true;
            
        case 'disruptive':
            // –ë–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫
            if (targetId) {
                const target = gameRoom.players.find(p => p.id === targetId);
                if (target && target.actionCards) {
                    target.actionCards.forEach(card => {
                        if (card.usesLeft > 0) {
                            card.usesLeft = 0;
                        }
                    });
                    return true;
                }
            }
            return false;
            
        case 'control':
            // –õ–∏–¥–µ—Ä - —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ
            clearInterval(gameRoom.timer);
            handlePhaseTimeout();
            return true;
            
        default:
            return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–µ–π—Å—Ç–≤–∏—è
function getRandomActionCard() {
    const randomIndex = Math.floor(Math.random() * actionCards.length);
    return { ...actionCards[randomIndex] }; // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–∞—Ä—Ç—ã
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
function generateCharacteristics() {
    return {
        profession: professions[Math.floor(Math.random() * professions.length)],
        health: healthConditions[Math.floor(Math.random() * healthConditions.length)],
        hobby: hobbies[Math.floor(Math.random() * hobbies.length)],
        phobia: phobias[Math.floor(Math.random() * phobias.length)],
        baggage: baggage[Math.floor(Math.random() * baggage.length)],
        fact1: facts[Math.floor(Math.random() * facts.length)],
        fact2: facts[Math.floor(Math.random() * facts.length)]
    };
}

// –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–º
function startGameTimer() {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (gameRoom.timer) {
        clearInterval(gameRoom.timer);
    }
    
    gameRoom.timer = setInterval(() => {
        gameRoom.timeLeft--;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
        if (gameRoom.timeLeft % 10 === 0 || gameRoom.timeLeft <= 10) {
            io.to('game-room').emit('timer-update', {
                timeLeft: gameRoom.timeLeft,
                gamePhase: gameRoom.gamePhase,
                currentTurnPlayer: gameRoom.currentTurnPlayer
            });
        }
        
        // –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
        if (gameRoom.timeLeft <= 0) {
            clearInterval(gameRoom.timer);
            handlePhaseTimeout();
        }
    }, 1000);
}
